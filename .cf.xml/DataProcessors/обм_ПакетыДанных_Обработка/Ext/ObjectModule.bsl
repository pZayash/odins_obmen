Перем	мОбработкаВыполнена;
Перем	мОшибки;
Перем	мПриемниковЗаполнено;
Перем	мСчетчикПакетовДанных;

#Область ПрограммныйИнтерфейс

Функция ЕстьОшибки() Экспорт
	
	Возврат мОшибки.Количество() > 0;
	
КонецФункции

Функция КоличествоОшибок() Экспорт
	
	Возврат мОшибки.Количество();
	
КонецФункции

Функция Приемник_Заполнить(пПриемникСсылка, пПакетДанных, пОбработчик, пЗаписыватьПриемника = Истина) Экспорт
	
	приемникОбъект = ПакетДанных_Обработать(пПакетДанных);
	объектСсылкаДругое = общ.ОбъектСсылкаДругое(приемникОбъект);
		
	Если объектСсылкаДругое = "Объект" Тогда
		// Ок, так и надо
			
	ИначеЕсли объектСсылкаДругое = "Ссылка" Тогда
		приемникОбъект = приемникОбъект.ПолучитьОбъект();
			
	Иначе
		Возврат Неопределено;
			
	КонецЕсли;

	Если пЗаписыватьПриемника Тогда
		Приемник_Записать(приемникОбъект, пПакетДанных);
		
	КонецЕсли;
	
	Возврат приемникОбъект;
	
КонецФункции

Функция ПакетДанных_Обработать(пакетДанныхСсылка) Экспорт
	
	приемникОбъект = Неопределено;

	Попытка
		интерфейсЗагрузчика = Обработки.обм_ИнтерфейсОбработчиков_ПакетыДанных_Обработка.Создать();
		реализацияИнтерфейса = Справочники.общ_Обработчики.ОбработчикОдиночка(пакетДанныхСсылка.Обработчик);
		общ.Интерфейс_УстановитьРеализацию(интерфейсЗагрузчика, реализацияИнтерфейса);
		
		приемникОбъект = интерфейсЗагрузчика.ПакетДанных_Обработать(пакетДанныхСсылка);
		
		мСчетчикПакетовДанных = мСчетчикПакетовДанных + 1;
			
		// Если обработчик не возвращает приемника, а только выполняет какой-то код
		Если приемникОбъект = Неопределено Тогда
			мОбработкаВыполнена = мОбработкаВыполнена + 1;
			
		КонецЕсли;
			
		Если общ.ОбъектСсылкаДругое(приемникОбъект) = "Объект" И приемникОбъект.Модифицированность() Тогда
			Приемник_Записать(приемникОбъект, пакетДанныхСсылка);
			
			// В процедуре Приемник_ПослеЗаписи выполнять проведение документов и обработку связанных с приемником данных
			интерфейсЗагрузчика.Приемник_ПослеЗаписи(приемникОбъект, пакетДанныхСсылка);
			
		КонецЕсли;
		

	Исключение
		комментОшибки = ИнформацияОбОшибке();
		Ошибка_ВЖурнал(
			"ПакетДанных.Обработка",
			комментОшибки, 
			пакетДанныхСсылка.Обработчик,
			пакетДанныхСсылка // Данные заполнения
			);
				
		мОшибки.Добавить(комментОшибки);
			
	КонецПопытки;

	Возврат приемникОбъект;

КонецФункции

Функция ПримечаниеОЗагрузке() Экспорт
	
	примечания = Новый Массив;
	
	Если ЕстьОшибки() Тогда
		примечания.Добавить(Символы.ПС);
		примечания.Добавить("При обработке были ошибки. Подробности см. в журнале регистрации");

		Для Каждого инфоОшибки Из мОшибки Цикл
			краткоеОшибки = общ.Ошибка_КраткоеПредставление(инфоОшибки);
			примечания.Добавить(краткоеОшибки);
			
		КонецЦикла;
		инфоОшибки = Неопределено;
		
	КонецЕсли;
	
	Если мСчетчикПакетовДанных = 0 Тогда
		примечания.Добавить("Нет объектов для обработки");
		
	ИначеЕсли мСчетчикПакетовДанных = 1 Тогда  
		
		Если мОбработкаВыполнена Тогда
			примечания.Добавить("Обработка выполнена");
			
		ИначеЕсли мПриемниковЗаполнено Тогда
			примечания.Добавить("Приемник заполнен");
			
		Иначе
			примечания.Добавить("Непонятный результат");
			
		КонецЕсли;
		
	ИначеЕсли мСчетчикПакетовДанных > 1 Тогда 
		
		Если мОбработкаВыполнена Тогда
			примечания.Добавить(СтрШаблон("%1 %2;", "Обработка выполнена", мОбработкаВыполнена));
			
		КонецЕсли;
		
		Если мПриемниковЗаполнено Тогда
			примечания.Добавить(СтрШаблон("%1 %2;", "Заполнено", мПриемниковЗаполнено));
			
		КонецЕсли;
		
	КонецЕсли;
	
	заполненныеПримечания = Новый Массив;
	Для Каждого строкаПримечания Из примечания Цикл
		Если ПустаяСтрока(строкаПримечания) Тогда
			Продолжить;
			
		КонецЕсли;
		
		заполненныеПримечания.Добавить(строкаПримечания);
		
	КонецЦикла;
	строкаПримечания = Неопределено;
	
	текстПримечания = СтрСоединить(заполненныеПримечания, Символы.ПС);
	
	Возврат текстПримечания;
	
КонецФункции

// @TODO 250715 Заяш: Предполагается исползовать в подключаемых обработчиках
// Если не будет использовано, удалить
Функция Приемник_ЗаполненБолееНовымиДанными(пПакетДанных, пПриемникСсылка) Экспорт
	
	ответПоУмолчанию = Ложь;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пПакетДанных, Тип("СправочникСсылка.обм_ПакетыДанных")) Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пПриемникСсылка) Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пПакетДанных", пПакетДанных);
	Запрос.УстановитьПараметр("ПриемникСсылка", пПриемникСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПоследнееЗаполнение.ПакетДанных = ДЗ.Ссылка
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(ПоследнееЗаполнение.ДатаВремя, &ПустаяДата) > ЕСТЬNULL(ДЗ.ДатаВремя, &ПустаяДата)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	РегистрСведений.обм_Приемники_ЗагруженныеПакетыДанных.СрезПоследних(, Приемник = &Приемник) КАК ПоследнееЗаполнение,
	|	Справочник.обм_ПакетыДанных КАК ДЗ
	|ГДЕ
	|	ДЗ.Ссылка = &пПакетДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Результат;
		
	КонецЕсли;
	
	Возврат ответПоУмолчанию;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура Инициализировать()
	
	мОбработкаВыполнена = 0;
	мОшибки = Новый Массив;
	мПриемниковЗаполнено = 0;
	мСчетчикПакетовДанных = 0;
	
КонецПроцедуры

Процедура Ошибка_ВЖурнал(
	пИмяСобытия,
	пКомментарийОшибки, 
	пОбработчикСсылка = Неопределено, 
	пПакетДанных = Неопределено
	)
	
	имяСобытия = обм.ИмяСобытияЖурналаРегистрации(пИмяСобытия);
	
	ссылкиДанных = Новый Массив;
	ссылкиДанных.Добавить(пОбработчикСсылка);
	ссылкиДанных.Добавить(пПакетДанных);
	
	входящееСообщениеСсылка = общ.ЗначениеРеквизитаОбъекта(пПакетДанных, "Владелец");
	ссылкиДанных.Добавить(входящееСообщениеСсылка);
	
	общ.Ошибка_ВЖурналРегистрации(имяСобытия, пКомментарийОшибки, ссылкиДанных);
	
КонецПроцедуры

Функция Приемник_Записать(пПриемникОбъект, пПакетДанных)
	
	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пПриемникОбъект);
	Если объектСсылкаДругое <> "Объект" Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	пПриемникОбъект.ДополнительныеСвойства.Вставить(обм_лит.Ключ_УзелОтправитель(), пПакетДанных.Узел);
	пПриемникОбъект.ДополнительныеСвойства.Вставить(обм_лит.Ключ_КатегорияОтправителя(), пПакетДанных.Категория);
	пПриемникОбъект.ДополнительныеСвойства.Вставить(обм_лит.Ключ_ИдентификаторОтправителя(), пПакетДанных.Идентификатор);
	
	Если общ.КорневойТипКонфигурации(пПриемникОбъект) = "Документ" Тогда
		Если пПриемникОбъект.ПометкаУдаления Тогда
			пПриемникОбъект.Проведен = Ложь;
			
		КонецЕсли;
		
		пПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	Иначе // Все кроме документов
		пПриемникОбъект.Записать();
		
	КонецЕсли;

	приемникСсылка = пПриемникОбъект.Ссылка;
	
	// Установить ссылку на загруженный объект в регистр сведений входящих документов
	РегистрыСведений.обм_Приемники.Записать(
						пПакетДанных.Узел,
						пПакетДанных.Категория,
						пПакетДанных.Идентификатор,
						приемникСсылка,
						пПакетДанных.Комментарий,
						пПакетДанных
						);

	// Установить связь между ссылкой приемником и загруженными данными
	РегистрыСведений.обм_Приемники_ЗагруженныеПакетыДанных.Связать(приемникСсылка, пПакетДанных);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

Инициализировать();


