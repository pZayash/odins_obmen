Перем	мОбработкаВыполнена;
Перем	мОшибки;
Перем	мПриемниковЗаполнено;
Перем	мСчетчикПакетовДанных;

#Область ПрограммныйИнтерфейс

Функция ЕстьОшибки() Экспорт
	
	Возврат мОшибки.Количество() > 0;
	
КонецФункции

Функция КоличествоОшибок() Экспорт
	
	Возврат мОшибки.Количество();
	
КонецФункции

Функция Приемник_Заполнить(пПриемникСсылка, пПакетДанных, пОбработчик, пЗаписыватьПриемника = Истина) Экспорт
	
	ответПоУмолчанию = Неопределено;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пОбработчик, Тип("СправочникСсылка.общ_Обработчики")) Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	приемникОбъект = Неопределено;
	Попытка
		НачатьТранзакцию();
		объектыПриемники = ПакетыДанных_Обработать(пПакетДанных, пОбработчик);
		
		Для Каждого объект ИЗ объектыПриемники Цикл
			Если общ.Ссылка_ПоОбъекту(объект) = пПриемникСсылка Тогда
				приемникОбъект = объект;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		объект = Неопределено;
		
		осд = общ.ОбъектСсылкаДругое(приемникОбъект);
		
		Если осд = "Объект" Тогда
			// Ок, так и надо
			
		ИначеЕсли осд = "Ссылка" Тогда
			приемникОбъект = приемникОбъект.ПолучитьОбъект();
			
		Иначе
			приемникОбъект = Неопределено;
			
		КонецЕсли;
		
		// Транзакцию отменяем, потому что нам нужен только один приемник
		// А обработчик может заполнить несоклько приемников
		ОтменитьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если приемникОбъект = Неопределено Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	// Записать объект вне транзакции, где он был заполнен
	Если пЗаписыватьПриемника Тогда
		Приемник_Записать(приемникОбъект, пПакетДанных, пОбработчик);
		
	КонецЕсли;
	
	Возврат приемникОбъект;
	
КонецФункции

Функция ПакетыДанных_Обработать(пПакетыДанных, пОбработчик = Неопределено) Экспорт
	
	приемникиНаВозврат = Новый Массив;

	интерфейсЗагрузчика = Обработки.обм_ПакетыДанных_Обработка_ПереопределяемыйИнтерфейс.Создать();
	реализацииИнтерфейса = общ.Интерфейс_НайтиРеализации(интерфейсЗагрузчика);
	
	Для Каждого пакетДанныхСсылка Из пПакетыДанных Цикл
		мСчетчикПакетовДанных = мСчетчикПакетовДанных + 1;
		
		Для Каждого обработчик Из реализацииИнтерфейса Цикл
			общ.Интерфейс_УстановитьРеализацию(интерфейсЗагрузчика, обработчик);
			Попытка
				заполненныеПриемники = интерфейсЗагрузчика.ПакетыДанных_Обработать(пакетДанныхСсылка);
				
				// Если обработчик не возвращает приемника, а только выполняет какой-то код
				Если заполненныеПриемники = Неопределено Тогда
					мОбработкаВыполнена = мОбработкаВыполнена + 1;
					Продолжить;
					
				КонецЕсли;
				
				Для Каждого приемникОбъект Из заполненныеПриемники Цикл 
					Если приемникОбъект = Неопределено Тогда
						Продолжить;
						
					КонецЕсли;
					
					Если приемникОбъект.Модифицированность() Тогда
						Приемник_Записать(приемникОбъект, пакетДанныхСсылка, обработчик);
						
					КонецЕсли;
					
					приемникиНаВозврат.Добавить(приемникОбъект);
					
				КонецЦикла;

			Исключение
				комментОшибки = ИнформацияОбОшибке();
				Ошибка_ВЖурнал(
					"ПакетДанных.Обработка",
					комментОшибки, 
					обработчик.РеализацияИнтерфейса,
					пакетДанныхСсылка // Данные заполнения
					);
					
				мОшибки.Добавить(комментОшибки);
				
			КонецПопытки;

		КонецЦикла;
		обработчик = Неопределено;
		
	КонецЦикла;
	пакетДанныхСсылка = Неопределено;
	
	Возврат приемникиНаВозврат;

КонецФункции

Функция ПримечаниеОЗагрузке() Экспорт
	
	строкиПримечания = Новый Массив;

	Если мСчетчикПакетовДанных = 0 Тогда
		строкиПримечания.Добавить("Нет объектов для обработки");
		
	ИначеЕсли мСчетчикПакетовДанных = 1 Тогда  
		
		Если мОбработкаВыполнена Тогда
			строкиПримечания.Добавить("Обработка выполнена");
			
		ИначеЕсли мПриемниковЗаполнено Тогда
			строкиПримечания.Добавить("Приемник заполнен");
			
		Иначе
			строкиПримечания.Добавить("Непонятный результат");
			
		КонецЕсли;
		
	ИначеЕсли мСчетчикПакетовДанных > 1 Тогда 
		
		Если мОбработкаВыполнена Тогда
			строкиПримечания.Добавить(СтрШаблон("%1 %2;", "Обработка выполнена", мОбработкаВыполнена));
			
		КонецЕсли;
		
		Если мПриемниковЗаполнено Тогда
			строкиПримечания.Добавить(СтрШаблон("%1 %2;", "Заполнено", мПриемниковЗаполнено));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки() Тогда
		строкиПримечания.Добавить(Символы.ПС);
		строкиПримечания.Добавить("При обработке были ошибки. Подробности см. в журнале регистрации");

		Для Каждого инфоОшибки Из мОшибки Цикл
			краткоеОшибки = общ.Ошибка_КраткоеПредставление(инфоОшибки);
			строкиПримечания.Добавить(краткоеОшибки);
			
		КонецЦикла;
		инфоОшибки = Неопределено;
		
	КонецЕсли;
	
	примечание = СтрСоединить(строкиПримечания, Символы.ПС);
	
	Возврат примечание;
	
КонецФункции

// @TODO 250715 Заяш: Предполагается исползовать в подключаемых обработчиках
// Если не будет использовано, удалить
Функция Приемник_ЗаполненБолееНовымиДанными(пПакетДанных, пПриемникСсылка) Экспорт
	
	ответПоУмолчанию = Ложь;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пПакетДанных, Тип("СправочникСсылка.обм_ПакетыДанных")) Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пПриемникСсылка) Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пПакетДанных", пПакетДанных);
	Запрос.УстановитьПараметр("ПриемникСсылка", пПриемникСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПоследнееЗаполнение.ПакетДанных = ДЗ.Ссылка
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(ПоследнееЗаполнение.ДатаВремя, &ПустаяДата) > ЕСТЬNULL(ДЗ.ДатаВремя, &ПустаяДата)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	РегистрСведений.обм_Приемники_ЗагруженныеПакетыДанных.СрезПоследних(, Приемник = &Приемник) КАК ПоследнееЗаполнение,
	|	Справочник.обм_ПакетыДанных КАК ДЗ
	|ГДЕ
	|	ДЗ.Ссылка = &пПакетДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Результат;
		
	КонецЕсли;
	
	Возврат ответПоУмолчанию;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура Инициализировать()
	
	мОбработкаВыполнена = 0;
	мОшибки = Новый Массив;
	мПриемниковЗаполнено = 0;
	мСчетчикПакетовДанных = 0;
	
КонецПроцедуры

Процедура Ошибка_ВЖурнал(
	пИмяСобытия,
	пКомментарийОшибки, 
	пОбработчикСсылка = Неопределено, 
	пПакетДанных = Неопределено
	)
	
	имяСобытия = обм.ИмяСобытияЖурналаРегистрации(пИмяСобытия);
	
	ссылкиДанных = Новый Массив;
	ссылкиДанных.Добавить(пОбработчикСсылка);
	ссылкиДанных.Добавить(пПакетДанных);
	
	входящееСообщениеСсылка = общ.ЗначениеРеквизитаОбъекта(пПакетДанных, "Владелец");
	ссылкиДанных.Добавить(входящееСообщениеСсылка);
	
	общ.Ошибка_ВЖурналРегистрации(имяСобытия, пКомментарийОшибки, ссылкиДанных);
	
КонецПроцедуры

Функция Приемник_Записать(пПриемникОбъект, пПакетДанных, пОбработчик)
	
	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пПриемникОбъект);
	Если объектСсылкаДругое <> "Объект" Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	пПриемникОбъект.ДополнительныеСвойства.Вставить("УзелОтправитель", пПакетДанных.Узел);
	пПриемникОбъект.ДополнительныеСвойства.Вставить("Категория", пПакетДанных.Категория);
	пПриемникОбъект.ДополнительныеСвойства.Вставить("Идентификатор", пПакетДанных.Идентификатор);
	
	Если общ.КорневойТипКонфигурации(пПриемникОбъект) = "Документ" Тогда
		Если пПриемникОбъект.ПометкаУдаления Тогда
			пПриемникОбъект.Проведен = Ложь;
			
		КонецЕсли;
		
		пПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	Иначе // Все кроме документов
		пПриемникОбъект.Записать();
		
	КонецЕсли;

	приемникСсылка = пПриемникОбъект.Ссылка;
	
	обработчикСсылка = Справочники.общ_Обработчики.НайтиСсылку(пОбработчик);
			
	// Установить ссылку на загруженный объект в регистр сведений входящих документов
	РегистрыСведений.обм_Приемники.Записать(
						пПакетДанных.Узел,
						пПакетДанных.Категория,
						пПакетДанных.Идентификатор,
						приемникСсылка,
						обработчикСсылка,
						пПакетДанных.Комментарий
						);

	// Установить связь между ссылкой приемником и загруженными данными
	РегистрыСведений.обм_Приемники_ЗагруженныеПакетыДанных.Связать(приемникСсылка, пПакетДанных, обработчикСсылка);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

Инициализировать();


