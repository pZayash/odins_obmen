Перем	мОшибки;

#Область ПрограммныйИнтерфейс

Функция ЕстьОшибки() Экспорт
	
	Возврат мОшибки.Количество() > 0;
	
КонецФункции

Функция ИсходящееСообщение_Отправить(пИсходящееСообщение, пУзел, пОбработчик = Неопределено) Экспорт
	
	интерфейс = Обработки.обм_ИсходящиеСообщения_СозданиеАдресацияОтправка_ПереопределяемыйИнтерфейс.Создать();
	реализацииИнтерфейса = Новый Массив;
	Если пОбработчик = Неопределено Тогда
		реализацииИнтерфейса = общ.Интерфейс_НайтиРеализации(интерфейс);
		
	ИначеЕсли ТипЗнч(пОбработчик) = Тип("СправочникСсылка.общ_Обработчики") Тогда
		обработчикОдиночка = Справочники.общ_Обработчики.ОбработчикОдиночка(пОбработчик);
		реализацииИнтерфейса.Добавить(обработчикОдиночка);
		
	// Иначе будем считать что это объект внешней обработки, без проверок
	Иначе
		реализацииИнтерфейса.Добавить(пОбработчик);
		
	КонецЕсли;
	
	Для Каждого обработчик Из реализацииИнтерфейса Цикл
		общ.Интерфейс_УстановитьРеализацию(интерфейс, обработчик);
		
		флагОшибкиОтправки = Ложь;
		Попытка
			интерфейс.ИсходящееСообщение_Отправить(пИсходящееСообщение, пУзел);
			
		Исключение
			имяСобытия = обм.ИмяСобытияЖурналаРегистрации("ИсходящиеСообщения_Отправить");
			инфоОшибки = ИнформацияОбОшибке();
			
			ссылкиДанных = Новый Массив;
			обработчикСсылка = Справочники.общ_Обработчики.НайтиСсылку(обработчик);
			ссылкиДанных.Добавить(обработчикСсылка);
			
			общ.Ошибка_ВЖурналРегистрации(имяСобытия, инфоОшибки, ссылкиДанных);

			флагОшибкиОтправки = Истина;
			мОшибки.Добавить(инфоОшибки);
			
		КонецПопытки;
		
		записьОбОтправке = РегистрыСведений.обм_ОтправленныеСообщения.СоздатьМенеджерЗаписи();
		записьОбОтправке.ИсходящееСообщение = пИсходящееСообщение;
		записьОбОтправке.ОбработчикОтправки = Справочники.общ_Обработчики.НайтиСсылку(обработчик);
		записьОбОтправке.ДатаОтправки = ТекущаяДатаСеанса();
		записьОбОтправке.ФлагОшибкиОтправки = флагОшибкиОтправки;
		записьОбОтправке.Записать();

	КонецЦикла;
	обработчик = Неопределено

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура Инициализировать()

	мОшибки = Новый Массив;

КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

Инициализировать();
