Перем кОбрабатываемыйОбъект;
Перем кРеализацияИнтерфейса;
Перем кРеализацияИнтерфейса_ВнешняяОбработка;

#Область ПереопределяемыйИнтерфейс

Функция МетаданныеИнтерфейса() Экспорт
	
	Возврат Метаданные.Обработки.обм_ВходящиеСообщения_Обработка;
	
КонецФункции

Функция ВходящееСообщение_СоответствуетОтбору(пВходящееСообщениеСсылка) Экспорт
	
	общ.Проверка_Тип(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения"));
	
	РеализацияИнтерфейса_Установить(пВходящееСообщениеСсылка);
	
	Результат = Ложь;
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		Результат = Ложь;
		
	Иначе
		Результат = кРеализацияИнтерфейса.ВходящееСообщение_СоответствуетОтбору(пВходящееСообщениеСсылка);

	КонецЕсли;
		
	общ.Проверка_Тип(Результат, "Булево");
	
	Возврат Результат;
	
КонецФункции

Функция ВходящееСообщение_Обрабатывается(пВходящееСообщениеСсылка) Экспорт
	
	общ.Проверка_Тип(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения"));
	
	РеализацияИнтерфейса_Установить(пВходящееСообщениеСсылка);
	
	рез = Ложь;
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		рез = Ложь;
		
	Иначе
		рез = кРеализацияИнтерфейса.ВходящееСообщение_Обрабатывается(пВходящееСообщениеСсылка);
			
	КонецЕсли;
		
	общ.Проверка_Тип(рез, "Булево");
	
	Возврат рез;
	
КонецФункции

Функция ВходящееСообщение_Обработать(пВходящееСообщениеСсылка) Экспорт
	
	общ.Проверка_Тип(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения"));
	
	РеализацияИнтерфейса_Установить(пВходящееСообщениеСсылка);
	
	примечание =  "";
	
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		примечание = "";
		
	Иначе	
		примечание = кРеализацияИнтерфейса.ВходящееСообщение_Обработать(пВходящееСообщениеСсылка);
		
	КонецЕсли;
	
	общ.Проверка_Тип(примечание, Тип("Строка"));

	Возврат примечание;
	
КонецФункции 

Функция ДанныеЗаполнения_НайтиПриемника(пДанныеЗаполненияСсылка) Экспорт
	
	общ.Проверка_Тип(пДанныеЗаполненияСсылка, Тип("СправочникСсылка.обм_ДанныеЗаполнения"));
	
	РеализацияИнтерфейса_Установить(пДанныеЗаполненияСсылка);
	
	приемникСсылка = Неопределено;
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		приемникСсылка = Неопределено;
		
	Иначе
		приемникСсылка = кРеализацияИнтерфейса.ДанныеЗаполнения_НайтиПриемника(пДанныеЗаполненияСсылка);
		
	КонецЕсли;
			
	Если Не общ.ЭтоЗаполненнаяСсылка(приемникСсылка) И приемникСсылка <> Неопределено Тогда
		ВызватьИсключение
			СтрШаблон(
				"Обработчик поиска приемника должен вернуть заполненную ссылку на объект БД или 'Неопределено'
				|Возвращенное значение: '%1' типа '%2'
				|Объект входящего запроса: %3",
				приемникСсылка, // %1
				ТипЗнч(приемникСсылка), // %2
				общ.НавигационнаяСсылка(пДанныеЗаполненияСсылка)
				);
					
	КонецЕсли;
	
	// Поиск по умолчанию
	Если приемникСсылка = Неопределено Тогда
		приемникСсылка = Справочники.обм_ДанныеЗаполнения.НайтиПриемника(пДанныеЗаполненияСсылка);
			
	КонецЕсли;
		
	Возврат приемникСсылка;

КонецФункции

// Функция должна вернуть булево, ответ на вопрос, создавать ли нового приемника при отсутствии
Функция ДанныеЗаполнения_СоздаватьНовогоПриемника(пДанныеЗаполненияСсылка, пПриемникСсылка = Неопределено) Экспорт
	
	общ.Проверка_Тип(пДанныеЗаполненияСсылка, Тип("СправочникСсылка.обм_ДанныеЗаполнения"));
	
	РеализацияИнтерфейса_Установить(пДанныеЗаполненияСсылка);
	
	Результат = Ложь;
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		Результат = Ложь;
		
	Иначе
		Результат = кРеализацияИнтерфейса.ДанныеЗаполнения_СоздаватьНовогоПриемника(пДанныеЗаполненияСсылка, пПриемникСсылка);
		
	КонецЕсли;
		
	общ.Проверка_Тип(Результат, "Булево");
	
	Возврат Результат;

КонецФункции

// Функция проверяет, допустимо ли перезаполнять существующего приемника
// Должна вернуть булево, 
//		Истина - можно перезаполнять
// 		Ложь - нельзя перезаполнять
//
// Функцию можно не реализовывать
// Без реализации по умолчанию существующие в БД объекты перезаполнять нельзя
//
Функция Приемник_Перезаполнять(пПриемникСсылка, пДанныеЗаполненияСсылка) Экспорт
	
	общ.Проверка_Тип(пДанныеЗаполненияСсылка, Тип("СправочникСсылка.обм_ДанныеЗаполнения"));
	
	РеализацияИнтерфейса_Установить(пДанныеЗаполненияСсылка);
	
	Результат = Ложь;
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		Результат = Ложь;
		
	Иначе
		Результат = 
			кРеализацияИнтерфейса.Приемник_Перезаполнять(пДанныеЗаполненияСсылка, пПриемникСсылка);

	КонецЕсли;
		
	общ.Проверка_Тип(Результат, "Булево");
	
	Возврат Результат;

КонецФункции

// Функция заполнения объекта-приемника данными заполнения
//
// Параметры:
//  пПриемникСсылка - ЛюбаяСсылка или Неопределено	 
//		- Ссылка на приемник, если он уже существует, иначе неопределено
//  пДанныеЗаполненияСсылка - СправочникСсылка.обм_ДанныеЗаполнения	 
//		- Объект входящего запроса, содержащий данные для заполнения приемника 
//  ЗаписыватьПриемника	- Булево	 
//		- записать объект сразу при обработке
// 
// Возвращаемое значение:
// СсылочныйОбъект или Неопределено  - Заполненный объект при успехе обработки или неопределено при неудаче
//
Функция Приемник_Заполнить(Знач пПриемникСсылка, пДанныеЗаполненияСсылка, ЗаписыватьПриемника = Истина) Экспорт
	
	общ.Проверка_Тип(пДанныеЗаполненияСсылка, Тип("СправочникСсылка.обм_ДанныеЗаполнения"));

	РеализацияИнтерфейса_Установить(пДанныеЗаполненияСсылка); 
	
	Если кРеализацияИнтерфейса = ЭтотОбъект Тогда
		Приемник = Неопределено;
		
	Иначе
		Приемник = кРеализацияИнтерфейса.Приемник_Заполнить(пПриемникСсылка, пДанныеЗаполненияСсылка);	
		
	КонецЕсли; 
	
	// Проверка приемника
	ОбъектСсылкаДругое = общ.ОбъектСсылкаДругое(Приемник);

	Если ОбъектСсылкаДругое = "Объект" Тогда
		// ОК
		
	ИначеЕсли Приемник = Неопределено Тогда
		// ОК
		
	Иначе
		стрОбОшибкеНеверныйТипВозвращенногоПараметра = 
			СтрШаблон(
				"Обработчик заполнения приемника должен вернуть объект БД или 'Неопределено'
				|Возвращенное значение: '%1' типа '%2'
				|Объект входящего запроса: %3",
				Приемник, // %1
				ТипЗнч(Приемник), // %2
				пДанныеЗаполненияСсылка
				);
					
		ВызватьИсключение стрОбОшибкеНеверныйТипВозвращенногоПараметра;
		
	КонецЕсли;

	Если ОбъектСсылкаДругое = "Объект" И ЗаписыватьПриемника Тогда 
		Приемник_Записать(Приемник, пДанныеЗаполненияСсылка);
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

Функция Приемник_Записать(пПриемникОбъект, пДанныеЗаполненияСсылка)
	
	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пПриемникОбъект);
	Если объектСсылкаДругое <> "Объект" Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	пПриемникОбъект.ДополнительныеСвойства.Вставить("УзелОтправитель", пДанныеЗаполненияСсылка.Узел);
	пПриемникОбъект.ДополнительныеСвойства.Вставить("Категория", пДанныеЗаполненияСсылка.Категория);
	пПриемникОбъект.ДополнительныеСвойства.Вставить("Идентификатор", пДанныеЗаполненияСсылка.Идентификатор);
	
	РеализацияИнтерфейса_Установить(пДанныеЗаполненияСсылка);
	
	// Перед записью приемника 
	РежимЗаписи = Неопределено;
	
	// Метод "ПередЗаписью" из обработчика кОбъектРеализующийИнтерфейс приоритетней, чем метод библиотеки функций
	Если кРеализацияИнтерфейса <> ЭтотОбъект Тогда
		кРеализацияИнтерфейса.Приемник_ПередЗаписью(пПриемникОбъект, пДанныеЗаполненияСсылка, РежимЗаписи);

	КонецЕсли;
		
	Если общ.КорневойТипКонфигурации_Получить(пПриемникОбъект) = "Документ" Тогда
		Если пПриемникОбъект.ПометкаУдаления Тогда
			пПриемникОбъект.Проведен = Ложь;
			
		КонецЕсли;
		
		пПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	Иначе // Все кроме документов
		пПриемникОбъект.Записать();  
		
	КонецЕсли;

	// Проверка необходимости провести документ
	Если
			общ.КорневойТипКонфигурации_Получить(пПриемникОбъект) = "Документ"
		И	Не пПриемникОбъект.ПометкаУдаления
		И	Не пПриемникОбъект.ОбменДанными.Загрузка
		И	Не ПараметрыСеанса.обм_ОбменДанными_Загрузка
		И	ТипЗнч(РежимЗаписи) = Тип("РежимЗаписиДокумента")
		И 	РежимЗаписи <> РежимЗаписиДокумента.Запись // Уже записан в этом режиме выше
	Тогда 
	
		// Внутри транзакции не проводить, и вобще не записывать
		// Если при проведении будет ошибка, транзакция развалится
		Если Не ТранзакцияАктивна() Тогда
			Попытка
				пПриемникОбъект.Записать(РежимЗаписи);
					
			Исключение
				ОбОшибке =
					СтрШаблон(
						"Ошибка при записи документа '%1' в режиме '%2' 
						|по причине: %3",
						Строка(пПриемникОбъект),
						РежимЗаписи,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
						);

				ЗаписьЖурналаРегистрации(
					обм.ИмяСобытияЖурналаРегистрации("Получение.Приемник.ПриЗаписи"),
					УровеньЖурналаРегистрации.Ошибка,
					пПриемникОбъект.Метаданные(), // Объект метаданных
					пПриемникОбъект.Ссылка, // Данные
					ОбОшибке,
					РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					);
					
			КонецПопытки;
			
		ИначеЕсли ТранзакцияАктивна() Тогда
			// Этот режим записи будет обработан в процедуре "Приемник_ПослеЗаписи"
			// Когда транзакция уже будет закрыта
			пПриемникОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
			
		КонецЕсли;
			
	КонецЕсли;
				
	ПриемникСсылка = пПриемникОбъект.Ссылка;
			
	// Установить ссылку на загруженный объект в регистр сведений входящих документов
	РегистрыСведений.обм_Приемники.Записать(
						пДанныеЗаполненияСсылка.Узел,
						пДанныеЗаполненияСсылка.Категория,
						пДанныеЗаполненияСсылка.Идентификатор,
						ПриемникСсылка,
						кРеализацияИнтерфейса_ВнешняяОбработка,
						пДанныеЗаполненияСсылка.Комментарий
						);

	// Установить связь между ссылкой приемником и загруженными данными
	РегистрыСведений.обм_Приемники_ДанныеЗаполнения.Связать(ПриемникСсылка, пДанныеЗаполненияСсылка); 
	
КонецФункции

// Функция выполняет необходимые после записи объекта приемника в БД действия
//
// Функцию можно не реализовывать
//
Функция Приемник_ПослеЗаписи(пПриемникОбъект, пДанныеЗаполненияСсылка) Экспорт
	
	ОбъектСсылкаДругое = общ.ОбъектСсылкаДругое(пПриемникОбъект);
	Если ОбъектСсылкаДругое = "Объект" Тогда
		// ОК
		
	ИначеЕсли ОбъектСсылкаДругое = "Ссылка" И общ.ЭтоЗаполненнаяСсылка(пПриемникОбъект) Тогда
		// ОК
		
	Иначе // Другое или незаполненная ссылка
		Возврат Неопределено;
		
	КонецЕсли;
	
	общ.Проверка_Тип(пДанныеЗаполненияСсылка, Тип("СправочникСсылка.обм_ДанныеЗаполнения"));
	
	РеализацияИнтерфейса_Установить(пДанныеЗаполненияСсылка);

	Если кРеализацияИнтерфейса <> ЭтотОбъект Тогда
		кРеализацияИнтерфейса.Приемник_ПослеЗаписи(пПриемникОбъект, пДанныеЗаполненияСсылка);
				
	КонецЕсли;
	
	// Сразу попытаться провести/распровести документы 
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если 
			общ.КорневойТипКонфигурации_Получить(пПриемникОбъект) = "Документ"
		И	Не пПриемникОбъект.ПометкаУдаления
		И	Не пПриемникОбъект.ОбменДанными.Загрузка
		И	Не ПараметрыСеанса.обм_ОбменДанными_Загрузка 
	Тогда
		Если
				пПриемникОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И	ТипЗнч(пПриемникОбъект.ДополнительныеСвойства.РежимЗаписи) = Тип("РежимЗаписиДокумента")
			И	пПриемникОбъект.ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Запись
		Тогда
			РежимЗаписи = пПриемникОбъект.ДополнительныеСвойства.РежимЗаписи;
			
		КонецЕсли;

		Если пПриемникОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;	
			
		КонецЕсли;
		
		Попытка
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				пПриемникОбъект.Записать(РежимЗаписиДокумента.Проведение); 
				
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И пПриемникОбъект.Проведен Тогда
				пПриемникОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			КонецЕсли; 
			
		Исключение
			ОбОшибке =
				СтрШаблон(
					"Ошибка при записи документа '%1' в режиме '%2' 
					|по причине: %3",
					пПриемникОбъект.Ссылка,
					РежимЗаписи,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					);

			ЗаписьЖурналаРегистрации(
				обм.ИмяСобытияЖурналаРегистрации("Получение.Приемник.ПослеЗаписи"),
				УровеньЖурналаРегистрации.Ошибка,
				пПриемникОбъект.Метаданные(), // Объект метаданных
				пПриемникОбъект.Ссылка, // Данные
				ОбОшибке,
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
				);
			
		КонецПопытки;
	
	КонецЕсли; // общ.КорневойТипКонфигурации_Получить(пПриемникОбъект) = "Документ"
	
	Возврат Неопределено;
	
КонецФункции  

#КонецОбласти // ПереопределяемыйИнтерфейс

#Область ПрочийВнешнийИнтерфейс

Процедура ВходящиеСообщения_ДанныеЗаполнения_Создать(пВходящиеСообщенияМассив) Экспорт
	
	массивВходящих = ВходящиеСообщения_ПодготовитьСортироватьМассив(пВходящиеСообщенияМассив);
	
	// Обработка пустого массива не имеет смысла
	Если массивВходящих.Количество() = 0 Тогда
		Возврат;
		
	КонецЕсли;

	// Основной цикл
	обработчикВходящих = Обработки.обм_ВходящиеСообщения_Обработка.Создать();
	
	Для Каждого входящееСообщениеСсылка Из массивВходящих Цикл
		
		// Проверка 
		Если ТипЗнч(входящееСообщениеСсылка) <> Тип("СправочникСсылка.обм_ВходящиеСообщения") Тогда 
			Продолжить;
			
		ИначеЕсли Не ЗначениеЗаполнено(входящееСообщениеСсылка) Тогда
			Продолжить;
			
		КонецЕсли;  
		
		примечание = "";
		обрабатывается = Ложь;  
		
		РеализацияИнтерфейса_Установить(входящееСообщениеСсылка); 
		
		реализацияПереопределена = РеализацияИнтерфейса_Переопределена(входящееСообщениеСсылка);
		
		Если реализацияПереопределена Тогда
		
			// Обработку делать в транзакции, чтобы сохранялась консистентность связанных данных:
			// Справочник.обм_ВходящиеСообщения, Справочник.обм_ДанныеЗаполения и связанные регистры
			НачатьТранзакцию();
			Попытка 
				
				// Существующие подчиненные объекты входящих запросов пометить на удаление
				// чтобы в процессе обработки не были созданы дубли
				ВходящееСообщение_ДанныеЗаполнения_ПометитьНаУдаление(входящееСообщениеСсылка);
				
				// Проверить, нужно ли обрабатывать это сообщение
				обрабатывается = обработчикВходящих.ВходящееСообщение_Обрабатывается(входящееСообщениеСсылка);
				
				// Если нужно, разобрать входящее сообщение на данныеЗаполнения
				Если обрабатывается Тогда
					примечание = обработчикВходящих.ВходящееСообщение_Обработать(входящееСообщениеСсылка);
					
				Иначе 
					примечание = "Не обрабатывается";
					
				КонецЕсли;
				
				Если ТранзакцияАктивна() Тогда
					ЗафиксироватьТранзакцию();
					
				КонецЕсли; 
				
			Исключение
				ИнфоОшибки = ИнформацияОбОшибке();
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
						
				КонецЕсли;
				
				ДополнитьЖурналРегистрацииПриОшибке(
					входящееСообщениеСсылка, 
					ИнфоОшибки, 
					обработчикВходящих.ПолучитьСсылкуНаРеализациюИнтерфейса(),
					, // ДанныеЗаполнения
					"ВходящиеСообщения.ДанныеЗаполнения.Создать"
					);

			КонецПопытки; // Обертка транзакции
		
		ИначеЕсли Не реализацияПереопределена Тогда 
			примечание = "Нет обработчика";
			обрабатывается = Ложь;
			
		КонецЕсли; // Если реализацияПереопределена
		
		// Установка статуса
		Если обрабатывается Тогда
			// Не вызывать внутри транзакции!! 
			// Там внутри создается виртуальный образ JSON для каждого подчиненного элемента Справочник.обм_ДанныеЗаполнения
			ВходящееСообщение_ДанныеЗаполнения_Приемник_JSON_Создать(входящееСообщениеСсылка);  
			
			Справочники.обм_ВходящиеСообщения.Статус_Установить( // ЖдетОбработки
				входящееСообщениеСсылка, 
				Перечисления.обм_ВходящиеСообщения_Статусы.ЖдетОбработки, 
				примечание
				);
				
		Иначе 
			Справочники.обм_ВходящиеСообщения.Статус_Установить( // НеОбрабатывается
				входящееСообщениеСсылка, 
				Перечисления.обм_ВходящиеСообщения_Статусы.НеОбрабатывается, 
				примечание
				);

		КонецЕсли;

	КонецЦикла;
	входящееСообщениеСсылка = Неопределено;
	
КонецПроцедуры 

Процедура ВходящиеСообщения_ОбработатьДанныеЗаполнения(пВходящиеСообщенияМассив) Экспорт
	
	МассивВходящихЗапросов = ВходящиеСообщения_ПодготовитьСортироватьМассив(пВходящиеСообщенияМассив);

	Для Каждого входящееСообщениеСсылка Из МассивВходящихЗапросов Цикл
		
		// Проверить статус владельца объекта входящего запроса
		Если 
				Не ВходящееСообщение_ОбработкаРазрешена(входящееСообщениеСсылка) // Проверка статусов
			Или Не ЭтотОбъект.ВходящееСообщение_Обрабатывается(входящееСообщениеСсылка) // Проверка содержимого запроса
		Тогда
			Продолжить;
					
		КонецЕсли; 
	
		
		Отказ = Ложь;
		НачатьТранзакцию();
		Попытка 
			// Все объекты должны быть обработаны без ошибок
			данныеЗаполненияМассив = ДанныеЗаполнения_Сортировать(входящееСообщениеСсылка);
			
			Приемников_НеЗаполнено = 0;
			Приемников_НеСоздано = 0;
			Приемников_ЕстьБолееНовыеДанныеЗаполнения = 0;
			Приемников_Заполнено = 0;
			обработка_Выполнена = 0;
			соотвДанныеЗаполненияПриемник = Новый Соответствие;
			Для Каждого данныеЗаполненияСсылка Из данныеЗаполненияМассив Цикл
				
				приемникСсылка = ЭтотОбъект.ДанныеЗаполнения_НайтиПриемника(данныеЗаполненияСсылка);
				приемникСсылка_Существует = общ.СсылкаСуществует(приемникСсылка);

				Если 
						приемникСсылка_Существует 
					И	Не ЭтотОбъект.Приемник_Перезаполнять(приемникСсылка, данныеЗаполненияСсылка)
				Тогда 
					Приемников_НеЗаполнено = Приемников_НеЗаполнено + 1;
					Продолжить; 
					
				КонецЕсли;
					
					// Более новые данные более старыми не перезаполнять
					Если приемникСсылка_Существует Тогда
						Если входящееСообщениеСсылка.ДатаВремя < Приемник_ПоследнееЗаполнение(приемникСсылка) Тогда
							Приемников_ЕстьБолееНовыеДанныеЗаполнения = Приемников_ЕстьБолееНовыеДанныеЗаполнения + 1;
							Продолжить;
							
						КонецЕсли;
						
					КонецЕсли; // Если СсылкаПриемник_Заполнена

				// Проверить допустимость создания нового приемника
				Если 
						Не приемникСсылка_Существует 
					И	Не ЭтотОбъект.ДанныеЗаполнения_СоздаватьНовогоПриемника(данныеЗаполненияСсылка, приемникСсылка) 
				Тогда
					Приемников_НеСоздано = Приемников_НеСоздано + 1;
					Продолжить;  
					
				КонецЕсли;
					
				// Все ОК, заполнить приемника
				Приемник = 
					ЭтотОбъект.Приемник_Заполнить(приемникСсылка, данныеЗаполненияСсылка); 
																		
				// Если обработчик не возвращает приемника, а только выполняет какой-то код
				Если Приемник = Неопределено Тогда
					обработка_Выполнена = обработка_Выполнена + 1;
					Продолжить;
					
				КонецЕсли;				
																		
				соотвДанныеЗаполненияПриемник.Вставить(данныеЗаполненияСсылка, Приемник); 
				Приемников_Заполнено = Приемников_Заполнено + 1;

			КонецЦикла;
			данныеЗаполненияСсылка = Неопределено;
			
			// Сформировать примечание
			стрПримечание = "";
			Если данныеЗаполненияМассив.Количество() = 1 Тогда  

				Если обработка_Выполнена Тогда
					стрПримечание = "Обработка выполнена";
					
				ИначеЕсли  Приемников_НеСоздано Тогда
					стрПримечание = "Приемник не создавать, по условиям алгоритмов";

				ИначеЕсли Приемников_ЕстьБолееНовыеДанныеЗаполнения Тогда
					стрПримечание = "Приемник не заполнять, есть более новые входящие данные"; 
					
				ИначеЕсли Приемников_НеЗаполнено Тогда
					стрПримечание = "Приемник не заполнять, по условиям алгоритмов";
					
				ИначеЕсли Приемников_Заполнено Тогда
					стрПримечание = "Приемник заполнен";
					
				Иначе
					стрПримечание = "Непонятный результат";
					
				КонецЕсли;
				
			ИначеЕсли данныеЗаполненияМассив.Количество() > 1 Тогда 

				Если обработка_Выполнена Тогда
					стрПримечание = СтрШаблон("%1 %2 %3;", стрПримечание, "Обработка выполнена", обработка_Выполнена);
					
				КонецЕсли;
				
				Если Приемников_НеЗаполнено Тогда
					стрПримечание = СтрШаблон("%1 %2 %3;", стрПримечание, "Не заполнен", Приемников_НеЗаполнено);
					
				КонецЕсли;
					
				Если Приемников_НеСоздано Тогда
					стрПримечание = СтрШаблон("%1 %2 %3;", стрПримечание, "Не создан", Приемников_НеСоздано);
					
				КонецЕсли;

				Если Приемников_ЕстьБолееНовыеДанныеЗаполнения Тогда
					стрПримечание = СтрШаблон("%1 %2 %3;", стрПримечание, "Есть новые данные заполнения", Приемников_ЕстьБолееНовыеДанныеЗаполнения);
					
				КонецЕсли;
					
				Если Приемников_Заполнено Тогда
					стрПримечание = СтрШаблон("%1 %2 %3;", стрПримечание, "Заполнено", Приемников_Заполнено);
					
				КонецЕсли;

			ИначеЕсли данныеЗаполненияМассив.Количество() = 0 Тогда
				стрПримечание = "Нет объектов для обработки";
				
			КонецЕсли;
			                                             
			Если данныеЗаполненияМассив.Количество() > 0 Тогда
				Справочники.обм_ВходящиеСообщения.Статус_Установить( // Обработан
					входящееСообщениеСсылка, 
					Перечисления.обм_ВходящиеСообщения_Статусы.Обработан, 
					стрПримечание
					);
				
			Иначе // ОбработанСОшибкой
				Справочники.обм_ВходящиеСообщения.Статус_Установить( // ОбработанСОшибкой  
					входящееСообщениеСсылка, 
					Перечисления.обм_ВходящиеСообщения_Статусы.ОбработанСОшибкой,
					стрПримечание // "Нет объектов для обработки"
					);

			КонецЕсли;
			
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
					
			КонецЕсли;
			
			ДополнитьЖурналРегистрацииПриОшибке(
				входящееСообщениеСсылка, 
				ИнформацияОбОшибке(), 
				ПолучитьСсылкуНаРеализациюИнтерфейса(),
				, // Данные заполнения
				"ВходящиеСообщения.ОбработатьДанныеЗаполнения"
				);
			
		КонецПопытки;
		
		// Обработка приемников после записи
		// Вне транзакции, чтобы не порушить ее
		// При отказе не обрабатывать
		Если Отказ Тогда
			Продолжить;
			
		КонецЕсли;
		Для Каждого Пара Из соотвДанныеЗаполненияПриемник Цикл
			// Обрабатывать через попытку, чтобы не пропустить приемников при ошибке
			Попытка
				данныеЗаполненияСсылка = Пара.Ключ;
				Приемник = Пара.Значение;
				Приемник_ПослеЗаписи(Приемник, данныеЗаполненияСсылка);
				
			Исключение
				ЗаписьЖурналаРегистрации(
					обм.ИмяСобытияЖурналаРегистрации("Получение.Приемник.ПослеЗаписи"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(Приемник)),
					ПолучитьСсылкуНаРеализациюИнтерфейса(),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					);
				
			КонецПопытки;
			
		КонецЦикла;
		Приемник = Неопределено;
		
	КонецЦикла;
	входящееСообщениеСсылка = Неопределено;
	
КонецПроцедуры

Функция ДанныеЗаполнения_Сортировать(пДанныеЗаполненияМассив) Экспорт

	#Область МассивВходящихОбъектов
	МассивВходящихОбъектов = Новый Массив;
	Если ТипЗнч(пДанныеЗаполненияМассив) = Тип("СправочникСсылка.обм_ДанныеЗаполнения") Тогда
		МассивВходящихОбъектов.Добавить(пДанныеЗаполненияМассив);
		
	ИначеЕсли ТипЗнч(пДанныеЗаполненияМассив) = Тип("Массив") Тогда
		Для Каждого данныеЗаполненияСсылка Из пДанныеЗаполненияМассив Цикл
			Если ТипЗнч(данныеЗаполненияСсылка) = Тип("СправочникСсылка.обм_ДанныеЗаполнения") Тогда
				МассивВходящихОбъектов.Добавить(данныеЗаполненияСсылка);
				
			КонецЕсли;
			
		КонецЦикла;
		данныеЗаполненияСсылка = Неопределено;

	ИначеЕсли 
			ТипЗнч(пДанныеЗаполненияМассив) = Тип("СправочникСсылка.обм_ВходящиеСообщения") 
		И	ЗначениеЗаполнено(пДанныеЗаполненияМассив) 
	Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВходящийЗапросВладелец", пДанныеЗаполненияМассив);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.обм_ДанныеЗаполнения КАК Т
		|ГДЕ
		|	Т.ПометкаУдаления = ЛОЖЬ
		|	И Т.Владелец = &ВходящийЗапросВладелец
		|	И Т.Родитель = ЗНАЧЕНИЕ(Справочник.обм_ДанныеЗаполнения.ПустаяСсылка)";
		
		МассивВходящихОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	#КонецОбласти // МассивВходящихОбъектов
	
	#Область СортировкаМассиваВходящихОбъектов
	// Объекты входящих запросов необходимо обрабатывать в режиме ФИФО
	// Последние поступившие обрабатываются первыми, потому что там наиболее свежие данные
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВходящихОбъектов", МассивВходящихОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.обм_ДанныеЗаполнения КАК Т
	|ГДЕ
	|	Т.Ссылка В(&МассивВходящихОбъектов)
	|	И Т.Родитель = ЗНАЧЕНИЕ(Справочник.обм_ДанныеЗаполнения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ДатаВремя УБЫВ";
	
	МассивВходящихОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	

	#КонецОбласти // СортировкаМассиваВходящихОбъектов
	
	Возврат МассивВходящихОбъектов;
	
КонецФункции

Функция ПолучитьСсылкуНаРеализациюИнтерфейса() Экспорт
	
	Возврат кРеализацияИнтерфейса_ВнешняяОбработка;
	
КонецФункции

#КонецОбласти // ПрочийВнешнийИнтерфейс

#Область Прочее 

Процедура ДополнитьЖурналРегистрацииПриОшибке(
	пВходящееСообщениеСсылка, 
	пИнфоОшибки, 
	пСсылкаНаОбработчик = Неопределено, 
	пДанныеЗаполненияСсылка = Неопределено,
	пИмяСобытия = ""
	) Экспорт
	
	ПредставлениеОшибки = общ.ПредставлениеОшибки(пИнфоОшибки);
	ОшибкаПодробно = ОбработкаОшибок.ПодробноеПредставлениеОшибки(пИнфоОшибки);
	
	Справочники.обм_ВходящиеСообщения.Статус_Установить( // ОбработанСОшибкой
		пВходящееСообщениеСсылка, 
		Перечисления.обм_ВходящиеСообщения_Статусы.ОбработанСОшибкой,
		ПредставлениеОшибки
		);

	ЗаписьЖурналаРегистрации(
		обм.ИмяСобытияЖурналаРегистрации(пИмяСобытия),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.НайтиПоТипу(ТипЗнч(пВходящееСообщениеСсылка)),
		пВходящееСообщениеСсылка,
		ОшибкаПодробно,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);
		
	// Дополнительная запись чтобы привязать ошибку к обработчику
	Если ЗначениеЗаполнено(пСсылкаНаОбработчик) Тогда
		ЗаписьЖурналаРегистрации(
			обм.ИмяСобытияЖурналаРегистрации(пИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.НайтиПоТипу(ТипЗнч(пСсылкаНаОбработчик)),
			пСсылкаНаОбработчик,
			ОшибкаПодробно,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
		
	КонецЕсли;

	// Дополнительная запись чтобы привязать ошибку в объекту входящего запроса
	Если ЗначениеЗаполнено(пДанныеЗаполненияСсылка) Тогда
		ЗаписьЖурналаРегистрации(
			обм.ИмяСобытияЖурналаРегистрации(пИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.НайтиПоТипу(ТипЗнч(пДанныеЗаполненияСсылка)),
			пДанныеЗаполненияСсылка,
			ОшибкаПодробно,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ВходящееСообщение_ДанныеЗаполнения_ПометитьНаУдаление(пВходящееСообщениеСсылка)
	
	зпрс = Новый Запрос;
	зпрс.УстановитьПараметр("ВходящееСообщениеСсылка", пВходящееСообщениеСсылка);
	зпрс.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК ДанныеЗаполненияСсылка
	|ИЗ
	|	Справочник.обм_ДанныеЗаполнения КАК Т
	|ГДЕ
	|	Т.Владелец = &ВходящееСообщениеСсылка
	|	И Т.Родитель = ЗНАЧЕНИЕ(Справочник.обм_ДанныеЗаполнения.ПустаяСсылка)
	|	И Т.ПометкаУдаления = ЛОЖЬ";
	
	вбрк = зпрс.Выполнить().Выбрать();
	Пока вбрк.Следующий() Цикл
		данныеЗаполнения = вбрк.ДанныеЗаполненияСсылка.ПолучитьОбъект(); 
		
		// Иногда бывает что ссылка битая, это кодгда получают подчиненные элементы справочника
		// Подчиненные элементы справочника содержат данные, которые должны быть записаны в родительский справочник
		// И после этого они будут удалены. Это может произойти параллельно с это обработкой, тогда данныеЗаполнения = Неопределено
		Если данныеЗаполнения = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		данныеЗаполнения.ПометкаУдаления = Истина;
		данныеЗаполнения.Записать();
		данныеЗаполнения = Неопределено;
		
	КонецЦикла;
	вбрк = Неопределено;

КонецПроцедуры

// Получение виртуального образа приемника в JSON 
// Для визуального сравнения текстов и расчета Хеш-функции
//
// Выполнить контексте этой обработки
// 
// Не вызывать внутри транзакции!!
//
Процедура ВходящееСообщение_ДанныеЗаполнения_Приемник_JSON_Создать(пВходящееСообщениеСсылка)
	
	РеализацияИнтерфейса_Установить(пВходящееСообщениеСсылка);

	// Получить выборку созданных объектов входящих запросов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВходящееСообщениеСсылка", пВходящееСообщениеСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК ДанныеЗаполненияСсылка
	|ИЗ
	|	Справочник.обм_ДанныеЗаполнения КАК Т
	|ГДЕ
	|	Т.Владелец = &ВходящееСообщениеСсылка
	|	И Т.Родитель = ЗНАЧЕНИЕ(Справочник.обм_ДанныеЗаполнения.ПустаяСсылка)
	|	И Т.ПометкаУдаления = ЛОЖЬ";
	
	выборкаДанныхЗаполнения = Запрос.Выполнить().Выбрать();	
	
	Пока выборкаДанныхЗаполнения.Следующий() Цикл
		
		Если Не общ.ЭтоЗаполненнаяСсылка(выборкаДанныхЗаполнения.ДанныеЗаполненияСсылка) Тогда
			Продолжить;
			
		КонецЕсли;
		
		Приемник_JSON = Неопределено;
			
		// Создать виртуальный образ приемника для расчета хеша
		НачатьТранзакцию();
		Попытка
			ПараметрыСеанса.обм_ОбменДанными_Загрузка = Истина;
			объектДляРасчетаХеша = Неопределено;
			объектДляРасчетаХеша = 
				Приемник_Заполнить(
					объектДляРасчетаХеша,
					выборкаДанныхЗаполнения.ДанныеЗаполненияСсылка,
					Ложь // ЗаписыватьПриемника
					);
			
			Если общ.ОбъектСсылкаДругое(объектДляРасчетаХеша) = "Объект" Тогда
				исключаемыеСвойства = Новый Соответствие;
				исключаемыеСвойства.Вставить("__МеняющиеХеш__"); 
				образПриемника = общ.СсылкаВКоллекцию(объектДляРасчетаХеша, исключаемыеСвойства);
				
				Приемник_JSON = общ.Коллекция_ЗаписатьJSONсСортировкой(образПриемника);
				
			КонецЕсли;

			Если ТранзакцияАктивна() Тогда
				ПараметрыСеанса.обм_ОбменДанными_Загрузка = Ложь;
				ОтменитьТранзакцию();
				
			КонецЕсли; 
			
		Исключение
			Если ТранзакцияАктивна() Тогда 
				ПараметрыСеанса.обм_ОбменДанными_Загрузка = Ложь;
				ОтменитьТранзакцию();
				
			КонецЕсли;    

			ОбОшибке =
				СтрШаблон(
					"Ошибка при обработке после транзакции объекта входящего запроса '%1'
					|по причине: %2",
					выборкаДанныхЗаполнения.ДанныеЗаполненияСсылка,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					);
					
			имяСобытияЖурнала = "Получение.ВходящиеСообщения.ПослеСозданияДанныхЗаполнения";
					
			ЗаписьЖурналаРегистрации(
				обм.ИмяСобытияЖурналаРегистрации(имяСобытияЖурнала),
				УровеньЖурналаРегистрации.Ошибка,
				, // Объект метаданных
				выборкаДанныхЗаполнения.ДанныеЗаполненияСсылка, // Данные
				ОбОшибке,
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
				);

			ДополнитьЖурналРегистрацииПриОшибке(
				пВходящееСообщениеСсылка, 
				ИнформацияОбОшибке(), 
				ПолучитьСсылкуНаРеализациюИнтерфейса(),
				имяСобытияЖурнала	
				);

			ВызватьИсключение ОбОшибке; 

		КонецПопытки;
		
		// Отоложенная запись реквизитов объекта справочника обм_ДанныеЗаполнения
		// Чтобы избежать блокировок при параллельной работе нескольких фоновых заданий
			потомокДанныхЗаполнения = Справочники.обм_ДанныеЗаполнения.СоздатьЭлемент();
			потомокДанныхЗаполнения.Родитель = выборкаДанныхЗаполнения.ДанныеЗаполненияСсылка;
			// Всем записаным объектам входящего запроса установить ссылку на текущую реализацию интерфейса, 
			// чтобы не искать ее повторно при обработке объектов входящего запроса
			Если общ.ЭтоОбработчик(кРеализацияИнтерфейса_ВнешняяОбработка) Тогда
				потомокДанныхЗаполнения.Обработчик = кРеализацияИнтерфейса_ВнешняяОбработка;

			КонецЕсли;
			потомокДанныхЗаполнения.Приемник_JSON = Приемник_JSON;
			потомокДанныхЗаполнения.Владелец = пВходящееСообщениеСсылка;
			потомокДанныхЗаполнения.Записать();
			потомокДанныхЗаполнения = Неопределено;

	КонецЦикла;
	выборкаДанныхЗаполнения = Неопределено; 
	
КонецПроцедуры

Функция ВходящееСообщение_ОбработкаРазрешена(пВходящееСообщениеСсылка)
	
	Если ТипЗнч(пВходящееСообщениеСсылка) <> Тип("СправочникСсылка.обм_ВходящиеСообщения") Тогда
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(пВходящееСообщениеСсылка) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекущийСтатусЗапроса = Справочники.обм_ВходящиеСообщения.Статус_Получить(пВходящееСообщениеСсылка);
	
	МожноОбрабатывать = 
			ТекущийСтатусЗапроса = Перечисления.обм_ВходящиеСообщения_Статусы.ЖдетОбработки
		Или ТекущийСтатусЗапроса = Перечисления.обм_ВходящиеСообщения_Статусы.Обработан 
		;
	
	Возврат МожноОбрабатывать;
	
КонецФункции

Функция ВходящиеСообщения_ПодготовитьСортироватьМассив(пВходящиеЗапросы)
	
	#Область Подготовка
	массивВходящихСообщений = Новый Массив;
	Если ТипЗнч(пВходящиеЗапросы) = Тип("СправочникСсылка.обм_ВходящиеСообщения") Тогда
		массивВходящихСообщений.Добавить(пВходящиеЗапросы);
		
	ИначеЕсли ТипЗнч(пВходящиеЗапросы) = Тип("Массив") Тогда
		Для Каждого ВходящееСообщениеСсылка Из пВходящиеЗапросы Цикл
			Если ТипЗнч(ВходящееСообщениеСсылка) = Тип("СправочникСсылка.обм_ВходящиеСообщения") Тогда
				массивВходящихСообщений.Добавить(ВходящееСообщениеСсылка);
				
			КонецЕсли;
			
		КонецЦикла;
		ВходящееСообщениеСсылка = Неопределено;
				
	КонецЕсли;
	
	#КонецОбласти // Подготовка
	
	#Область Сортировка
	// Входящие запросы нужно обрабатывать в режиме ФИФО
	// Самый поздний запрос обрабатывается первым, потому что там самые свежие данные
	Если массивВходящихСообщений.Количество() > 1 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивВходящихЗапросов", массивВходящихСообщений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.обм_ВходящиеСообщения КАК Т
		|ГДЕ
		|	Т.Ссылка В(&МассивВходящихЗапросов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ДатаВремя УБЫВ";
		
		массивВходящихСообщений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
		
	КонецЕсли;
	
	#КонецОбласти // Сортировка
	
	Возврат массивВходящихСообщений;
	
КонецФункции

Функция Приемник_ПоследнееЗаполнение(пСсылкаПриемник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приемник", пСсылкаПриемник);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.ДатаВремя КАК ДатаВремя
	|ИЗ
	|	РегистрСведений.обм_Приемники_ДанныеЗаполнения.СрезПоследних(, Приемник = &Приемник) КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ТипЗнч(Выборка.ДатаВремя) = Тип("Число") Тогда
		Возврат Выборка.ДатаВремя;
		
	Иначе
		Возврат '00010101';
		
	КонецЕсли;
	
КонецФункции

Функция РеализацияИнтерфейса_Найти(пВходящееСообщениеСсылка, пСюдаВернутьСсылкуНаРеализацию = Неопределено) 
	
	реализацияИнтерфейса = ЭтотОбъект;
	ссылкаНаРеализациюИнтерфейса = Неопределено;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пВходящееСообщениеСсылка, "СправочникСсылка.обм_ВходящиеСообщения, СправочникСсылка.обм_ДанныеЗаполнения") Тогда
		реализацияИнтерфейса = ЭтотОбъект;
		
	// Исключить повторный поиск реализации интерфеса для текущего обрабатываемого объекта
	ИначеЕсли кОбрабатываемыйОбъект = пВходящееСообщениеСсылка И кРеализацияИнтерфейса <> Неопределено Тогда
		реализацияИнтерфейса = кРеализацияИнтерфейса;
		
	// Стандартный поиск реализации интерфейса
	ИначеЕсли общ.ЭтоЗаполненнаяСсылка(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения")) Тогда
		запрос = Новый Запрос;
		запрос.Текст =
		"ВЫБРАТЬ
		|	ДООБ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.обм_Обработчики КАК ДООБ
		|ГДЕ
		|	ДООБ.Версия = ""#обм"" Или ДООБ.Версия = ""#обм.вх""
		|	И ДООБ.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И НЕ ДООБ.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДООБ.Наименование";
		
		выборка = запрос.Выполнить().Выбрать();
		
		Пока выборка.Следующий() Цикл
			кандидат = обм.ОбработчикОдиночка(выборка.Ссылка, Ложь);
			Если кандидат.ВходящееСообщение_СоответствуетОтбору(пВходящееСообщениеСсылка) = Истина Тогда
				реализацияИнтерфейса = кандидат;
				ссылкаНаРеализациюИнтерфейса = выборка.Ссылка;

			КонецЕсли;
			
		КонецЦикла;
		выборка = Неопределено;
		
	ИначеЕсли общ.ЭтоЗаполненнаяСсылка(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ДанныеЗаполнения"))	Тогда
		Если ЗначениеЗаполнено(пВходящееСообщениеСсылка.Обработчик) Тогда
			кандидат = обм.ОбработчикОдиночка(пВходящееСообщениеСсылка.Обработчик, Ложь);
			Если кандидат.ВходящееСообщение_СоответствуетОтбору(пВходящееСообщениеСсылка) = Истина Тогда
				реализацияИнтерфейса = кандидат;
				ссылкаНаРеализациюИнтерфейса = пВходящееСообщениеСсылка.Обработчик;

			КонецЕсли;
					
		Иначе
			// Рекурсивно попытаться получить объект реализующий интерфейс для владельца объекта входящего запроса
			реализацияИнтерфейса = РеализацияИнтерфейса_Найти(пВходящееСообщениеСсылка.Владелец, пСюдаВернутьСсылкуНаРеализацию);
				
		КонецЕсли;
			
	КонецЕсли;  
	
	пСюдаВернутьСсылкуНаРеализацию = ссылкаНаРеализациюИнтерфейса;
	
	Возврат реализацияИнтерфейса;
	
КонецФункции

Функция РеализацияИнтерфейса_Переопределена(пВходящееСообщениеСсылка)
	
	реализацияИнтерфейса = РеализацияИнтерфейса_Найти(пВходящееСообщениеСсылка);
	
	реализацияПереопределена = реализацияИнтерфейса <> ЭтотОбъект; 
	
	Возврат реализацияПереопределена;
	
КонецФункции

Процедура РеализацияИнтерфейса_Установить(пВходящееСообщениеСсылка = Неопределено)
	
	// Исключить повторную установку реализации интерфейса для одного обрабатываемого объекта
	Если кОбрабатываемыйОбъект = пВходящееСообщениеСсылка И кРеализацияИнтерфейса <> Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	// Инициализация параметров
	кОбрабатываемыйОбъект = Неопределено;
	кРеализацияИнтерфейса = Неопределено;
	кРеализацияИнтерфейса_ВнешняяОбработка = Неопределено; 
	
	кРеализацияИнтерфейса = РеализацияИнтерфейса_Найти(пВходящееСообщениеСсылка, кРеализацияИнтерфейса_ВнешняяОбработка);
	
	Если кРеализацияИнтерфейса = Неопределено Тогда
		кРеализацияИнтерфейса = ЭтотОбъект; // Обработки.обм_ВходящиеСообщения_Обработка.Создать();
		
	КонецЕсли;

	кОбрабатываемыйОбъект = пВходящееСообщениеСсылка;

КонецПроцедуры

#КонецОбласти // Прочее
