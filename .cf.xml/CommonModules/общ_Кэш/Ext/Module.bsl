Функция ОбработчикОдиночка(пВнешняяОбработкаСсылка, пБезопасныйРежим, пВерсияДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
		обработчикОбъект = обм.ОбработчикОбъект(пВнешняяОбработкаСсылка, пБезопасныйРежим);
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат обработчикОбъект;

КонецФункции

// Получает уникальный идентификатор информационной базы,
// с помощью которого можно различать различные экземпляры информационных баз,
// например, при сборе статистики или в механизмах внешнего управления базами.
// Если идентификатор не заполнен, то его значение автоматически устанавливается и возвращается.
//
// Идентификатор хранится в константе ИдентификаторИнформационнойБазы.
// Константа ИдентификаторИнформационнойБазы не должна входить в составы планов обмена, чтобы иметь
// различные значения в каждой информационной базе (узле РИБ).
//
// Возвращаемое значение:
//  Строка - идентификатор информационной базы.
//
Функция ИдентификаторИнформационнойБазы() Экспорт
	
	ид = Константы.общ_ИдентификаторИнформационнойБазы.Получить();
	
	Если Не ПустаяСтрока(ид) Тогда
		Возврат ид;
		
	КонецЕсли;
	
	ид = Строка(Новый УникальныйИдентификатор());
		
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
		
	Константы.общ_ИдентификаторИнформационнойБазы.Установить(ид);
		
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);

	Возврат ид;
	
КонецФункции

Функция ЦветОтрицательный_Получить() Экспорт

	// Цвет указал явно, т.к. с веб-цветом случается ошибка передачи с клиента на сервер
	Возврат Новый Цвет(255, 140, 105); // Лососёвый / #ff8c69
	
КонецФункции

Функция ЦветПоложительный_Получить() Экспорт

	// Цвет указал явно, т.к. с веб-цветом случается ошибка передачи с клиента на сервер
	Возврат Новый Цвет(0, 255, 127); // Springgreen / Зелёная весна / #00ff7f
	
КонецФункции

// Чтобы можно было отличить тестовую базу от боевой
//
Функция ЭтоТестоваяБаза() Экспорт  
	
	Результат = Ложь;
	
	СтрокаСоединениеИнфоБазы = ВРег(СтрокаСоединенияИнформационнойБазы());

	МассивСловОбозначающихКопию = Новый  Массив;
	МассивСловОбозначающихКопию.Добавить("COPY");
	МассивСловОбозначающихКопию.Добавить("DEV");
	МассивСловОбозначающихКопию.Добавить("TEST");
	МассивСловОбозначающихКопию.Добавить("TST");
	МассивСловОбозначающихКопию.Добавить("КОПИЯ");
	МассивСловОбозначающихКопию.Добавить("РАЗРАБОТКА");
	МассивСловОбозначающихКопию.Добавить("ТЕСТ");
	МассивСловОбозначающихКопию.Добавить("ТСТ");
	
	Для Каждого Слово Из МассивСловОбозначающихКопию Цикл
		Если Найти(СтрокаСоединениеИнфоБазы, Слово) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Слово = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Процедуры и функции из типовых конфигураций и БСП
#Область Типовые
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемыПовтИсп

#КонецОбласти // СтандартныеПодсистемыПовтИсп

#КонецОбласти // Типовые