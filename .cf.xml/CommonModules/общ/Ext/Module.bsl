Функция Группа_НайтиСоздать(пИмяГруппы, пТип, пВладелец = Неопределено) Экспорт
	
	// Имя группы должено быть заполненной строкой
	Если ТипЗнч(пИмяГруппы) <> Тип("Строка") Или ПустаяСтрока(пИмяГруппы) Тогда
		Возврат Неопределено;
		
	КонецЕсли; 
	
	корневойТип = общ.КорневойТипКонфигурации(пТип);
	Если корневойТип <> "Справочник" И корневойТип <> "ПланВидовХарактеристик" И корневойТип <> "ПланСчетов" Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	менеджер = общ.Менеджер_ПоОбъекту(пТип);
	мета = менеджер.ПустаяСсылка().Метаданные();
	Если (корневойТип = "Справочник" Или корневойТип = "ПланВидовХарактеристик") И Не мета.Иерархический Тогда
		Возврат Неопределено;
		
	КонецЕсли; 
	
	// 20230811 Заяш
	полеПредставления = "";
	
	Если Ложь Тогда
		мета = Метаданные.Справочники.НомераГТД;
		
	КонецЕсли;
	Если мета.ДлинаНаименования > 0 Тогда
		полеПредставления = "Наименование";
		
	ИначеЕсли мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка И мета.ДлинаКода > 0  Тогда
		полеПредставления = "Код";
		
	КонецЕсли;
	
	Если ПустаяСтрока(полеПредставления) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Для подчиненного справочника необходим владелец
	этоПодчиненныйСправочник = 
		корневойТип = "Справочник"
		И мета.Владельцы.Количество() > 0
		;
		
	Если этоПодчиненныйСправочник И Не общ.ЭтоЗаполненнаяСсылка(пВладелец) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	имяТаблицы = общ.Объект_ИмяТаблицы(пТип); 
	
	Если ПустаяСтрока(имяТаблицы) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	имяГруппы = ИнформационнаяБаза_Имя(пИмяГруппы);
	
	Если ПустаяСтрока(имяГруппы) Тогда
		имяГруппы = пИмяГруппы;
		
	КонецЕсли;
	
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("имяГруппы", имяГруппы);
	запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	&Т КАК Т
	|ГДЕ
	|	&условиеИерархии
	|	И &условиеВладельца
	|	И Т.Наименование = &ИмяГруппы"; 
	
	запрос.Текст = СтрЗаменить(запрос.Текст, "Т.Наименование", "Т." + полеПредставления);
	
	запрос.Текст = СтрЗаменить(запрос.Текст, "&Т", имяТаблицы);
	
	иерархияГрупп = Ложь;
	Если корневойТип = "Справочник" Или корневойТип = "ПланВидовХарактеристик" Тогда 
		иерархияГрупп = мета.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
	КонецЕсли;
	
	условиеИерархии = "Истина";
	Если корневойТип = "ПланСчетов" Тогда
		условиеИерархии = "Истина";
		
	ИначеЕсли иерархияГрупп Тогда
		условиеИерархии = "Т.ЭтоГруппа";	
			
	Иначе 
		условиеИерархии = СтрШаблон("Т.Родитель = Значение(%1.ПустаяСсылка)", имяТаблицы);
			
	КонецЕсли; 
	запрос.Текст = СтрЗаменить(запрос.Текст, "&условиеИерархии", условиеИерархии);
	
	условиеВладельца = "Истина";
	Если этоПодчиненныйСправочник Тогда
		условиеВладельца = "Т.Владелец = &владелец";
		запрос.УстановитьПараметр("владелец", пВладелец);
			
	КонецЕсли;
	запрос.Текст = СтрЗаменить(запрос.Текст, "&условиеВладельца", условиеВладельца);

	выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() Тогда
		Возврат выборка.Ссылка;
		
	Иначе
		// Если группа не найдена, создать ее 
		Если иерархияГрупп Тогда
			группаОбъект = менеджер.СоздатьГруппу();
			
		ИначеЕсли корневойТип = "ПланСчетов" Тогда
			группаОбъект = менеджер.СоздатьСчет();
			
		Иначе
			группаОбъект = менеджер.СоздатьЭлемент();
			
		КонецЕсли;
		
		группаОбъект.Наименование = имяГруппы; 
		Если этоПодчиненныйСправочник Тогда
			группаОбъект.Владелец = пВладелец;
			
		КонецЕсли;
		группаОбъект.Родитель = Неопределено;
		группаОбъект.ОбменДанными.Загрузка = Истина;
		группаОбъект.Записать();
		
		Возврат группаОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДатаУниверсальная() Экспорт

	Возврат ТекущаяУниверсальнаяДата();
	
КонецФункции

Функция ЕслиПустое(пПроверяемоеЗначение, пЗначениеЗамены) Экспорт
	
	Если Не ЗначениеЗаполнено(пПроверяемоеЗначение) Тогда
		пПроверяемоеЗначение = пЗначениеЗамены;
		
	КонецЕсли;
	
	Возврат пПроверяемоеЗначение;
	
КонецФункции

Функция ИдентификаторСеанса() Экспорт
	
	Возврат общ_Кэш.ИдентификаторСеанса();
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(пИмяСобытия = "") Экспорт
	
	результат = "общ";
	
	Если Не ПустаяСтрока(пИмяСобытия) Тогда
		результат = результат + "." + СокрЛП(пИмяСобытия);
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

Функция Интерфейс_НайтиРеализации(пИнтерфейс, пВернутьСсылки = Ложь) Экспорт
	
	метаданныеИнтерфейса = Неопределено;
	Если типЗнч(пИнтерфейс) = Тип("ОбъектМетаданных") Тогда
		метаданныеИнтерфейса = пИнтерфейс;
		
	ИначеЕсли общ.КорневойТипКонфигурации(пИнтерфейс) = "Обработка" Тогда
		метаданныеИнтерфейса = пИнтерфейс.Метаданыне();
		
	КонецЕсли;	
	
	ссылкиНаРеализации = Новый Массив;
	реализацииИнтерфейса = Новый Массив;
	Если ТипЗнч(метаданныеИнтерфейса) <> Тип("ОбъектМетаданных") Тогда
		Возврат реализацииИнтерфейса;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.общ_Обработчики КАК Т
	|ГДЕ
	|	Т.ПометкаУдаления = ЛОЖЬ";
	
	выборка = запрос.Выполнить().Выбрать();

	Пока выборка.Следующий() Цикл
		кандидат = Справочники.общ_Обработчики.ОбработчикОдиночка(выборка.Ссылка, Ложь);
		Если кандидат.РеализованИнтерфейс(метаданныеИнтерфейса) Тогда
			реализацииИнтерфейса.Добавить(кандидат);
			ссылкиНаРеализации.Добавить(выборка.Ссылка);
			
		КонецЕсли;

	КонецЦикла;
	выборка = Неопределено;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если пВернутьСсылки Тогда
		Возврат ссылкиНаРеализации;
		
	КонецЕсли;
	
	Возврат реализацииИнтерфейса;
	
КонецФункции

Функция Интерфейс_УстановитьРеализацию(пИнтерфейс, пРеализация) Экспорт
	
	// Для контекстной подсказки
	Если Ложь Тогда
		пИнтерфейс = Обработки.обм_ВходящиеСообщение_ИзвлечениеПакетовДанных_ПереопределяемыйИнтерфейс.Создать();
		пРеализация = Обработки.обм_ВходящиеСообщение_ИзвлечениеПакетовДанных_ПереопределяемыйИнтерфейс.Создать();
		
	КонецЕсли;
	
	реализация = Неопределено;
	Если типЗнч(пРеализация) = Тип("СправочникСсылка.общ_Обработчики") Тогда
		реализация = Справочники.общ_Обработчики.ОбработчикОдиночка(пРеализация);
		
	Иначе
		реализация = пРеализация;
		
	КонецЕсли;
	
	Если Не пРеализация.РеализованИнтерфейс(пИнтерфейс) Тогда
		ссылкаНаРеализацию = Справочники.общ_Обработчики.НайтиСсылку(реализация);
		обОшибке = СтрШаблон("Обработка %1 не является реализацией интерфейса обработки %2", ссылкаНаРеализацию, пИнтерфейс);
		ВызватьИсключение обОшибке;
		
	КонецЕсли;
	
	пИнтерфейс.РеализацияИнтерфейса = пРеализация;
	
КонецФункции

Функция ИнформационнойБаза_Идентификатор() Экспорт
	
	Возврат общ_Кэш.ИнформационнойБаза_Идентификатор();
	
КонецФункции

Функция ИнформационнаяБаза_Имя(Знач пСтрокаСоединенияИнформационнойБазы = Неопределено) Экспорт 
	
	Если ПустаяСтрока(пСтрокаСоединенияИнформационнойБазы) Тогда
		пСтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
		
	КонецЕсли;
	
	имяИнформациннойБазы = НСтр(пСтрокаСоединенияИнформационнойБазы, "Ref");
	
	Возврат имяИнформациннойБазы;
	
КонецФункции

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется пСтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  пСтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБаза_Файловая(Знач пСтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(пСтрокаСоединенияИнформационнойБазы) Тогда
		пСтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(пСтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

Функция Коллекция_ЗаписатьJSONсСортировкой(пКоллекция, пКэш = Неопределено) Экспорт
	
	Если Ложь Тогда 
		пКоллекция = Новый СписокЗначений;
		
	КонецЕсли;
	
	типКоллекции = ТипЗнч(пКоллекция);
	этоСписокЗначений = типКоллекции = Тип("СписокЗначений");
	Если этоСписокЗначений Тогда
		пКоллекция.СортироватьПоПредставлению();
		стрJSON = JSON(пКоллекция, Ложь, , пКэш);
		
		Возврат стрJSON;
		
	КонецЕсли; // Если этоСписокЗначений
	
	этоМассив = типКоллекции = Тип("Массив");
	этоКоллекция = общ.ЭтоКоллекцияКлючЗначение(типКоллекции);
	Если Не этоМассив И Не этоКоллекция Тогда
		Возврат Неопределено;
		
	КонецЕсли; 
	
	// Развернуть все ссылки в коллекции без вложенных ссылок, чтобы избежать циклических ссылок при записи JSON
	общ.Коллекция_РазвернутьСсылки(пКоллекция, 1, "__Реквизиты__"); 
		
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	
	сортировщик = Новый ТаблицаЗначений;
	сортировщик.Колонки.Добавить("Значение");
	сортировщик.Колонки.Добавить("КолонкаСортировки");

	Для Каждого элемент Из пКоллекция Цикл
		
		Если этоМассив Тогда
			элемент_значение = элемент;
			
		Иначе // Структура, соответствие
			элемент_значение = элемент.Значение;
			
		КонецЕсли;
		
		элемент_значение_ЭтоКоллекция = общ.ЭтоКоллекцияКлючЗначение(элемент_значение) Или ТипЗнч(элемент_значение) = Тип("Массив"); 
		Если элемент_значение_ЭтоКоллекция Тогда
			элемент_JSON = Коллекция_ЗаписатьJSONсСортировкой(элемент_значение, пКэш); 
			
		Иначе
			элемент_JSON = JSON(элемент_значение, , , пКэш);
			
		КонецЕсли;
		
		элемент_ключ = Неопределено;
		номерСтроки = Неопределено;
		Если 
				этоМассив
			И	элемент_значение_ЭтоКоллекция
			И	Общ.Коллекция_Свойство(элемент_значение, "_НомерСтроки", номерСтроки)
		Тогда
			элемент_ключ = номерСтроки;
			
		ИначеЕсли этоМассив Тогда
			элемент_ключ = элемент_JSON; 
			
		Иначе // Структура, соответствие
			элемент_ключ = элемент.Ключ;
			
		КонецЕсли;
		
		рядСортировщика = сортировщик.Добавить(); 
		рядСортировщика.Значение = элемент_JSON; 
		рядСортировщика.КолонкаСортировки = элемент_ключ;

	КонецЦикла;
	элемент = Неопределено;  
		
	сортировщик.Сортировать("КолонкаСортировки");
	
	// Начало записи
	Если этоМассив Тогда
		упорядоченнаяКоллекция = сортировщик.ВыгрузитьКолонку("Значение");
		
	Иначе // Структура, соответствие
		упорядоченнаяКоллекция = Новый СписокЗначений;
		Для Каждого рядСортировщика Из сортировщик Цикл
			упорядоченнаяКоллекция.Добавить(рядСортировщика.Значение, рядСортировщика.КолонкаСортировки);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	стрJSON = JSON(упорядоченнаяКоллекция, Ложь, , пКэш);
		
	Возврат стрJSON;
	
КонецФункции

Функция Коллекция_ЗначениеПоПути(пКоллекция, пПуть, пРазделитель = ".") Экспорт 
	
	Если Не общ.ЭтоКоллекцияКлючЗначение(пКоллекция) Тогда
		Возврат Null;
		
	КонецЕсли;

	ШагиПути = СтрРазделить(пПуть, пРазделитель);
	ВсегоШагов = ШагиПути.Количество();
	СчетчикШагов = 0;
	ЗначениеШага = пКоллекция;
	Для Каждого Шаг Из ШагиПути Цикл
		СчетчикШагов = СчетчикШагов + 1;
		ЭтоПоследнийШаг = СчетчикШагов = ВсегоШагов;
		
		ШагСуществует = общ.Коллекция_Свойство(ЗначениеШага, Шаг, ЗначениеШага);
		
		Если Не ШагСуществует Тогда
			Возврат Null;
			
		КонецЕсли;
		
		// Все шаги кроме последнего должны вернуть коллекцию
		// Иначе дальнейшая обработка не имеет смысла
		Если Не ЭтоПоследнийШаг И Не общ.ЭтоКоллекцияКлючЗначение(ЗначениеШага) Тогда
			Возврат Null;
			
		КонецЕсли;
		
		// Последний шаг содержит искомое значение
		Если ЭтоПоследнийШаг Тогда
			Возврат ЗначениеШага;
			
		КонецЕсли;
		
	КонецЦикла;
	Шаг = Неопределено; 
	
	Возврат Null;
	
КонецФункции

Функция Коллекция_КлючиСоединитьВСтроку(пКоллекция) Экспорт 
	
	разделитель = ",";
	
	Если ТипЗнч(пКоллекция) = Тип("Массив") Тогда
		Возврат СтрСоединить(пКоллекция, разделитель);
		
	ИначеЕсли общ.ЭтоКоллекцияКлючЗначение(пКоллекция) Тогда
		стрРезультат = "";
		Для Каждого пара Из пКоллекция Цикл
			Если ПустаяСтрока(пара.Ключ) Тогда
				Продолжить;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(стрРезультат) Тогда
				стрРезультат = стрРезультат + разделитель;
				
			КонецЕсли;
			
			стрРезультат = стрРезультат + СокрЛП(пара.Ключ);
			
		КонецЦикла;  
		пара = Неопределено;
		
		Возврат стрРезультат;
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция Коллекция_ПоЗначению(пЗначение) Экспорт 
	
	// Коллекция исключаемых свойств
	коллекция = Новый Соответствие;
	Если Общ.ЭтоКоллекцияКлючЗначение(пЗначение) Тогда
		коллекция = пЗначение;
		
	ИначеЕсли Не ПустаяСтрока(пЗначение) Тогда
		именаСвойств = СтрРазделить(пЗначение, ",", Ложь);
		Для Каждого имяСвойства Из именаСвойств Цикл
			стрКлюч = СокрЛП(имяСвойства);
			коллекция.Вставить(стрКлюч, стрКлюч);
			
		КонецЦикла;
		имяСвойства = Неопределено;
		
	КонецЕсли; 
	
	Возврат коллекция;
	
КонецФункции

Функция Коллекция_РазвернутьСсылки(пКоллекция, Знач пУровень, Знач пИсключаяСвойства = Неопределено) Экспорт

	Если Не общ.ЭтоКоллекцияКлючЗначение(пКоллекция) Тогда
		Возврат пКоллекция;
		
	КонецЕсли;
	
	общ.Проверка_Тип(пУровень, "Число");
		
	пУровень = Цел(пУровень);
	Если пУровень <= 0 Тогда
		Возврат пКоллекция;
		
	КонецЕсли;  
	
	коллекцияИсключаемых = Коллекция_ПоЗначению(пИсключаяСвойства);
	коллекцияИсключаемых.Вставить("__ТабличныеЧасти__");
	коллекцияИсключаемых.Вставить("__ХранилищаЗначений__");
	
	этоПослединийУровень = пУровень <= 1;
	Если этоПослединийУровень Тогда
		коллекцияИсключаемых.Вставить("__Реквизиты__");
					
	КонецЕсли; 
	
	// Исключаемые свойства должны быть именно в виде строки
	// Потому что если это будет коллекция, то при передаче ее в функцию по ссылке (знач)
	// Она всеравно меняется
	стрИсключитьСвойства = Коллекция_КлючиСоединитьВСтроку(коллекцияИсключаемых);

	ссылкаИзКоллекции = общ.Ссылка_ПоКоллекции(пКоллекция);
	этоПеречисление = Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ссылкаИзКоллекции));
	метаданныеТЧ = Неопределено;
	Если общ.ЭтоЗаполненнаяСсылка(ссылкаИзКоллекции) И Не этоПеречисление Тогда
		метаданныеТЧ = ссылкаИзКоллекции.Метаданные().ТабличныеЧасти;
		
	КонецЕсли;
	
	// На последнем уровне не разворачивать вложенные ссылки
	коллекцияРазвернутыхЗначений = Новый Соответствие;
	Для Каждого пара Из пКоллекция Цикл 
		
		// Обработка вложенных коллекций, уровень уменьшается
		вПареКоллекция = общ.ЭтоКоллекцияКлючЗначение(пара.Значение);
		Если вПареКоллекция Тогда
			обработаннаяКоллекция = общ.Коллекция_РазвернутьСсылки(пара.Значение, пУровень - 1, стрИсключитьСвойства);
			
			коллекцияРазвернутыхЗначений.Вставить(пара.Ключ, обработаннаяКоллекция);
			
			Продолжить;
			
		КонецЕсли;

		// Обработка ссылок
		Если общ.ЭтоСсылка(пара.Значение) Тогда
			разворачиваемяСсылка = пара.Значение;
			образСсылки = общ.Коллекция_ПоСсылке(разворачиваемяСсылка, стрИсключитьСвойства);
			коллекцияРазвернутыхЗначений.Вставить(пара.Ключ, образСсылки); 
			
			Продолжить;
			
		КонецЕсли;
			
		// Рекурсивный вызов для табличных частей, уровень остается неизменным 
		этоОбразТЧ = 
			ТипЗнч(пара.Значение) = Тип("Массив")
			И	ТипЗнч(метаданныеТЧ) = Тип("КоллекцияОбъектовМетаданных") 
			И	метаданныеТЧ.Найти(пара.Ключ) <> Неопределено 
			;
		Если этоОбразТЧ	Тогда
			массивРазвернутыхСтрокТЧ = Новый Массив;
			Для Каждого образСтрокиТЧ Из пара.Значение Цикл
				Если общ.ЭтоКоллекцияКлючЗначение(образСтрокиТЧ) Тогда
					развернутыйОбразСтрокиТЧ = общ.Коллекция_РазвернутьСсылки(образСтрокиТЧ, пУровень, стрИсключитьСвойства);
					массивРазвернутыхСтрокТЧ.Добавить(развернутыйОбразСтрокиТЧ);
					
				Иначе
					массивРазвернутыхСтрокТЧ.Добавить(образСтрокиТЧ);
					
				КонецЕсли;
			
			КонецЦикла;
			образСтрокиТЧ = Неопределено;
			
			коллекцияРазвернутыхЗначений.Вставить(пара.Ключ, массивРазвернутыхСтрокТЧ);
			
			Продолжить;
			
		КонецЕсли;
			
	КонецЦикла;
	пара = Неопределено;
	
	// Заменить в исходной коллекции ссылки на развернутые коллекции
	Для Каждого пара Из коллекцияРазвернутыхЗначений Цикл
		пКоллекция.Вставить(пара.Ключ, пара.Значение);
		
	КонецЦикла;
	пара = Неопределено;
	
	Возврат пКоллекция;
	
КонецФункции // СсылкуВСтруктуруДляОбмена

// Вспомогательная функция. Сортировать коллекцию не имеет смысла при операциях в программе,
// Но иногда нужно чтобы ключи коллекции при записи в JSON располагались по алфавиту
//
Функция Коллекция_Сортировать(пКоллекция, пСортироватьРекурсивно = Ложь) Экспорт

	Если ТипЗнч(пКоллекция) = Тип("Массив") И пСортироватьРекурсивно Тогда
		ОтсортированныйМассив = Новый Массив;
		Для Каждого ЭлементМассива Из пКоллекция Цикл
			ОтсортированныйЭлемент = Коллекция_Сортировать(ЭлементМассива, пСортироватьРекурсивно);
			ОтсортированныйМассив.Добавить(ОтсортированныйЭлемент);
			
		КонецЦикла;
		ЭлементМассива = Неопределено;
		
		Возврат ОтсортированныйМассив;
		
	ИначеЕсли Типзнч(пКоллекция) = Тип("Массив") Тогда
		Возврат пКоллекция;
		
	ИначеЕсли Проверка_Тип(пКоллекция, "Структура, Соответствие", Ложь) = "" Тогда	
		ТаблицаКлючей = Новый ТаблицаЗначений;
		ТаблицаКлючей.Колонки.Добавить("Ключ");
		
		Для Каждого Пара Из пКоллекция Цикл
			СтрокаТаблицыКлючей = ТаблицаКлючей.Добавить();
			СтрокаТаблицыКлючей.Ключ = Пара.Ключ;
			
		КонецЦикла;
		Пара = Неопределено;   
		
		// Соответсвие выводится в JSON в обратном порядке
		Если ТипЗнч(пКоллекция) = Тип("Соответствие") Тогда
			ТаблицаКлючей.Сортировать("Ключ Убыв");
			
		// Структура выводится в JSON в прямом порядке
		ИначеЕсли ТипЗнч(пКоллекция) = Тип("Структура") Тогда
			ТаблицаКлючей.Сортировать("Ключ");
			
		КонецЕсли;
		
		Если ТипЗнч(пКоллекция) = Тип("Структура") Тогда
			ОтсортированнаяКоллекция = Новый Структура;
			
		Иначе
			ОтсортированнаяКоллекция = Новый Соответствие;
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыКлючей Из ТаблицаКлючей Цикл
			Ключ = СтрокаТаблицыКлючей.Ключ;
			Значение = пКоллекция[СтрокаТаблицыКлючей.Ключ]; 
			
			Если пСортироватьРекурсивно И общ.ЭтоКоллекцияКлючЗначение(Значение)	Тогда
				Значение = Коллекция_Сортировать(Значение, пСортироватьРекурсивно);	
			
			КонецЕсли;
			
			ОтсортированнаяКоллекция.Вставить(Ключ, Значение);
			
		КонецЦикла;
		СтрокаТаблицыКлючей = Неопределено; 
		
		Возврат ОтсортированнаяКоллекция;
	
	Иначе
		// Этот вид коллекции не сортируется
		Возврат пКоллекция;

	КонецЕсли;
	
КонецФункции

Функция Коллекция_Свойство(пКоллекция, пКлюч, пНайденноеЗначение = Неопределено) Экспорт
	
	ответПоУмолчанию = Ложь;

	Если ТипЗнч(пКоллекция) = Тип("Массив") Или ТипЗнч(пКоллекция) = Тип("ФиксированныйМассив") Тогда

		Если ТипЗнч(пКлюч) <> Тип("Число") Тогда
			Возврат ответПоУмолчанию;
			
		ИначеЕсли Цел(пКлюч) > пКоллекция.ВГраница() Тогда
			Возврат ответПоУмолчанию;
			
		Иначе
			индекс = Цел(пКлюч);
			пНайденноеЗначение = пКоллекция[индекс];
		
			Возврат Истина;
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(пКоллекция) = Тип("Структура") Или ТипЗнч(пКоллекция) = Тип("ФиксированнаяСтруктура") Тогда
		Возврат пКоллекция.Свойство(пКлюч, пНайденноеЗначение);
			
	ИначеЕсли ТипЗнч(пКоллекция) = Тип("Соответствие") Тогда
		Если пКоллекция[пКлюч] <> Неопределено Тогда
			пНайденноеЗначение = пКоллекция[пКлюч];
			Возврат Истина;
			
		КонецЕсли;
		
		// Обработка случая, когда в соответствие вставлен ключ, но его значение равно "Неопределено"
		// Чтобы проверить такое, запомнить число пар, попытаться удалить пару по ключу
		// и если удаление произошло, значит есть ключ со значением "Неопределено"
		количествоПарДоУдаления = пКоллекция.Количество();
		пКоллекция.Удалить(пКлюч);
		количествоПарПослеУдаления = пКоллекция.Количество();
		естьКлюч = количествоПарДоУдаления > количествоПарПослеУдаления;
		Если естьКлюч Тогда
			пКоллекция.Вставить(пКлюч);
			пНайденноеЗначение = Неопределено;
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пКоллекция) = Тип("ФиксированноеСоответствие") Тогда
		Если пКоллекция[пКлюч] <> Неопределено Тогда
			пНайденноеЗначение = пКоллекция[пКлюч];
			Возврат Истина;
			
		КонецЕсли;
		
		Для Каждого пара Из пКоллекция Цикл
			Если пара.Ключ = пКлюч Тогда
				пНайденноеЗначение = пара.Значение;
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		пара = Неопределено;
			
	КонецЕсли;
	
	Возврат ответПоУмолчанию;
	
КонецФункции

Функция Коллекция_ЭтоОбразСсылки(пКоллекция) Экспорт 
	
	Если Не общ.ЭтоКоллекцияКлючЗначение(пКоллекция) Тогда
		Возврат Ложь;
		
	КонецЕсли;

	Если общ.Коллекция_Свойство(пКоллекция, "_Тип") И общ.Коллекция_Свойство(пКоллекция, "_УникальныйИдентификатор") Тогда 
		Возврат Истина;
		
	ИначеЕсли общ.Коллекция_Свойство(пКоллекция,  "_ЭтоПеречисление") И общ.Коллекция_Свойство(пКоллекция, "_Значение") Тогда
		Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция КорневойТипКонфигурации(Знач пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеТипа = пОбъект;
	Иначе
		Если ТипЗнч(пОбъект) = Тип("ОписаниеТипов") Тогда
			Если пОбъект.Типы().Количество() > 0 Тогда 
				пОбъект = пОбъект.Типы()[0];
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(пОбъект);
		Иначе
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗнч(пОбъект));
		КонецЕсли;
	КонецЕсли;
	Если МетаданныеТипа <> Неопределено Тогда 
		МассивФрагментов = СтрРазделить(МетаданныеТипа.ПолноеИмя(),".");
		Если МассивФрагментов.Количество() = 2 Тогда 
			Возврат МассивФрагментов[0];
		Иначе
			// Ссылка на субобъект
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Проверяет, является ли строка именем корневого типа объекта БД.
//
// Параметры:
//  пИмяКорневогоТипа - Строка, Неопределено - имя корневого типа.
//
// Возвращаемое значение:
//  Истина       – тип является корневым типом объекта БД;
//  Ложь         – иначе.
//
// 20140121 Заяш 
// Автор TormozIT
// Взято из подсистемы "ИнструментыРазработчика"
// ирГлобальный.ЛксЛиКорневойТипОбъектаБД
//
Функция КорневойТипКонфигурации_Проверить(пКорневойТип) Экспорт

	Если Ложь
		ИЛИ пКорневойТип = "БизнесПроцесс" 
		ИЛИ пКорневойТип = "Задача" 
		ИЛИ пКорневойТип = "Документ"
		ИЛИ пКорневойТип = "Перечисление"
		ИЛИ пКорневойТип = "ПланВидовРасчета" 
		ИЛИ пКорневойТип = "ПланВидовХарактеристик" 
		ИЛИ пКорневойТип = "ПланОбмена"
		ИЛИ пКорневойТип = "ПланСчетов" 
		ИЛИ пКорневойТип = "Справочник"
	Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ЛксЛиКорневойТипОбъектаБД()

// Функция возвращает менеджер объекта по переданному значению
// Значение может быть типом или ссылкой
//
// Параметры:
//  пОбъект  - Тип, Ссылка - Обязательный параметр
//           Объект, для которого необходимо определить менеджер
//
// Возвращаемое значение:
//   Произвольный   
//		- менеджер объетка при успешном выполнении (ДокументМенеджер, СправочникМенеджер и т.д.)
//	    или Неопределено, если получение менеджера для переданного значения невозможно
//
// 20140121 Заяш 
//
Функция Менеджер_ПоОбъекту(Знач пОбъект) Экспорт

	Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
		ТипОбъекта = пОбъект;
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда
		ТипОбъекта = Тип_ПоМетаданным(пОбъект);
	Иначе
		ТипОбъекта = ТипЗнч(пОбъект);
	КонецЕсли;
	
	Если Не Тип_ЭтоСсылка(ТипОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта).Имя;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Документы[ИмяОбъекта];
		
	#Если Не МобильноеПриложениеСервер Тогда		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Задачи[ИмяОбъекта];
	#КонецЕсли
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат НеОпределено;
	КонецЕсли;

КонецФункции

// Функция получает ссылку, объект которой заведомо не существует в базе
// Т.е. битую ссылку
//
// 20230601 05:56 Павел Заяш
// 
Функция Менеджер_БитаяСсылка(пМенеджер, пКандидат = Неопределено) Экспорт
	
	этоПеречисление = общ.КорневойТипКонфигурации(пМенеджер) = "Перечисление";
	Если этоПеречисление Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	ссылкаРезультат = Неопределено;
	
	// Получить уид кандидата, если возможно
		уид = Неопределено;  
		Если ТипЗнч(пКандидат) = Тип("УникальныйИдентификатор") Тогда
			уид = пКандидат;
			
		ИначеЕсли общ.ОбъектСсылкаДругое(пКандидат) = "Ссылка" Тогда
			уид = пКандидат.УникальныйИдентификатор();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(уид) Тогда
			уид = Неопределено;
			
		КонецЕсли;

	Пока Истина Цикл
		
		Если ТипЗнч(уид) <> Тип("УникальныйИдентификатор") Тогда
			уид = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		ссылкаРезультат = пМенеджер.ПолучитьСсылку(уид);
		уид = Неопределено;
		
		Если Ссылка_Существует(ссылкаРезультат) Тогда
			Продолжить;
			
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла; // Пока Истина Цикл
	
	Возврат ссылкаРезультат;
	
КонецФункции

Функция Менеджер_СоздатьОбъект(пМенеджер, Знач пСоздатьГруппу = Ложь) Экспорт 
	
	// Привести параметр к Булево
	пСоздатьГруппу = пСоздатьГруппу = Истина; 
	
	корневойТип = КорневойТипКонфигурации(пМенеджер.ПустаяСсылка());
	
	// Проверить иерархию
	Если пСоздатьГруппу Тогда 
		мета = пМенеджер.ПустаяСсылка().Метаданные(); 
		пСоздатьГруппу = 
				(корневойТип <> "Справочник" ИЛи корневойТип <> "ПланВидовХарактеристик")
			И	мета.Иерархический 
			И	мета.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
			;

	КонецЕсли;
	
	Если корневойТип = "БизнесПроцесс" Тогда 
		новыйОбъект = пМенеджер.СоздатьБизнесПроцесс();
		
	ИначеЕсли корневойТип = "Задача" Тогда
		новыйОбъект = пМенеджер.СоздатьЗадачу();
		
	ИначеЕсли корневойТип = "Документ" Тогда
		новыйОбъект = пМенеджер.СоздатьДокумент();
		
	ИначеЕсли корневойТип = "ПланВидовРасчета" Тогда 
		новыйОбъект = пМенеджер.СоздатьВидРасчета();
		
	ИначеЕсли корневойТип = "ПланВидовХарактеристик" И пСоздатьГруппу Тогда
		новыйОбъект = пМенеджер.СоздатьГруппу();
			
	ИначеЕсли корневойТип = "ПланВидовХарактеристик" Тогда
		новыйОбъект = пМенеджер.СоздатьЭлемент();

	ИначеЕсли корневойТип = "ПланОбмена" Тогда
		новыйОбъект = пМенеджер.СоздатьУзел();
		
	ИначеЕсли корневойТип = "ПланСчетов" Тогда 
		новыйОбъект = пМенеджер.СоздатьСчет();
		
	ИначеЕсли корневойТип = "Справочник" И пСоздатьГруппу Тогда
		новыйОбъект = пМенеджер.СоздатьГруппу();	
		
	ИначеЕсли корневойТип = "Справочник" Тогда
		новыйОбъект = пМенеджер.СоздатьЭлемент();
		
	КонецЕсли;
	
	Возврат новыйОбъект;
	
КонецФункции

// Безопасное получение навигационной ссылки, 
// не зависит от типа параметра
Функция НавигационнаяСсылка(пОбъект) Экспорт
	
	ссылкаНаОбъект = Ссылка_ПоОбъекту(пОбъект);
	
	Если ссылкаНаОбъект = Неопределено Тогда
		Возврат Неопределено;
		
	КонецЕсли; 
			
	Попытка
		Возврат ПолучитьНавигационнуюСсылку(ссылкаНаОбъект);
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки; 
	
	Возврат Неопределено;
	
КонецФункции

Функция ОбластьТабличногоДокумента_ИменаПараметров(пЯчейка, пЗаполнениеТекстКакШаблон = Ложь, пТегСлева = "[", пТегСправа = "]") 
	
	общ.Проверка_Тип(пЯчейка, Тип("ОбластьЯчеекТабличногоДокумента")); 
	
	// Значение на возврат
	массивИменПараметров = Новый Массив;
	
	// Если теги обрамления параметров не заданы, вернуть пустой массив
	Если ПустаяСтрока(пТегСлева) Или ПустаяСтрока(пТегСправа) Тогда
		Возврат массивИменПараметров;
		
	КонецЕсли;
	
    соотвИменПараметров = Новый Соответствие;
	
	Если пЯчейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
    	соотвИменПараметров.Вставить(пЯчейка.Параметр);
		
	ИначеЕсли пЯчейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Или пЗаполнениеТекстКакШаблон Тогда
         ячейкаТекст = пЯчейка.Текст;
         ячейкаТекст = СтрЗаменить(ячейкаТекст, пТегСлева, Символы.ПС + пТегСлева);
         ячейкаТекст = СтрЗаменить(ячейкаТекст, пТегСправа, Символы.ПС);
		 
		 Для счСтрок = 1 По СтрЧислоСтрок(ячейкаТекст) Цикл
             стрШаблона = СтрПолучитьСтроку(ячейкаТекст, счСтрок);
			 Если Лев(стрШаблона, СтрДлина(пТегСлева)) <> пТегСлева Тогда
				Продолжить;
				
			КонецЕсли;
			
            имяПараметра = Сред(стрШаблона, СтрДлина(пТегСлева) + 1);
    		соотвИменПараметров.Вставить(имяПараметра);

		КонецЦикла; 
		счСтрок = Неопределено;
				
	КонецЕсли;//конец проверки, что в ячейке - текст, параметр или шаблон  

	Для Каждого пара Из соотвИменПараметров Цикл 
		массивИменПараметров.Добавить(пара.Ключ);
		
	КонецЦикла;
	пара = Неопределено;
 
	Возврат массивИменПараметров;
	
КонецФункции 

Функция Объект_Метаданные_ЕстьРеквизит(пОбъект, пИмяРеквизита) Экспорт 
	
	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пОбъект);
	
	Если объектСсылкаДругое = "Другое" Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	объектМетаданных = пОбъект.Метаданные();

	Если объектМетаданных.Реквизиты.Найти(пИмяРеквизита) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из объектМетаданных.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = пИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	СтандартныйРеквизит = Неопределено;
	
	Возврат Ложь;
	
КонецФункции

Функция Объект_ИмяТаблицы(пОбъект) Экспорт
	
	результат = Неопределено;
	
	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда
		результат = пОбъект.ПолноеИмя(); 
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("Тип") Тогда
		результат = Общ.Менеджер_ПоОбъекту(пОбъект).ПустаяСсылка().Метаданные().ПолноеИмя();
		
	ИначеЕсли ОбъектСсылкаДругое(пОбъект) <> "Другое" Тогда
		результат = пОбъект.Метаданные().ПолноеИмя();
		
	Иначе 
		результат = Неопределено;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

// Функция - Объект получить коллекцию ссылок в объекте
//
// Параметры:
//  пОбъектСсылочный					 - Произвольный - Ссылки или объект, в котором необходимо найти другие ссылки 
//  пОписаниеТиповДляРекурсивнойОбработки- ОписаниетТипов - Необязательный. Коллекция типов, для которых нужно рекурсивно искаь ссылки
//  пКоллекцияОбработанных		 - Соответствие - Не использовать, для рекурсивного вызова функции
//  КоллекцияСсылокВОбъекте				 - Соответствие - Не использовать, для рекурсивного вызова функции 
// 
// Возвращаемое значение:
// Соответствие - Коллекция ссылок в объекте
//
Функция Объект_КоллекцияСсылокВОбъекте(пОбъектСсылочный, пОписаниеТиповДляРекурсивнойОбработки = Неопределено, пКоллекцияОбработанных = Неопределено, КоллекцияСсылокВОбъекте = Неопределено) Экспорт 
	
	Если ТипЗнч(пОписаниеТиповДляРекурсивнойОбработки) <> Тип("ОписаниеТипов") Тогда
		пОписаниеТиповДляРекурсивнойОбработки = Новый ОписаниеТипов;
		
	КонецЕсли;  
	
	Если ТипЗнч(пКоллекцияОбработанных) <> Тип("Соответствие") Тогда
		пКоллекцияОбработанных = Новый Соответствие;
		
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияСсылокВОбъекте) <> Тип("Соответствие") Тогда
		КоллекцияСсылокВОбъекте = Новый Соответствие; 
		
	КонецЕсли; 
	
	// Проверки, предотвращение бесконечной рекурсии
	Если 
			общ.ОбъектСсылкаДругое(пОбъектСсылочный) = "Другое" // Не ссылка
		Или общ.Коллекция_Свойство(пКоллекцияОбработанных, пОбъектСсылочный.Ссылка) // Объект уже выгружен	
	Тогда
		Возврат КоллекцияСсылокВОбъекте;
		
	КонецЕсли;  

	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(пОбъектСсылочный)); 
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат КоллекцияСсылокВОбъекте;
		
	КонецЕсли;
	
	// Ссылка на сам объект
	КоллекцияСсылокВОбъекте.Вставить(пОбъектСсылочный.Ссылка, пОбъектСсылочный.Ссылка);
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ЗначениеРеквизита = пОбъектСсылочный[Реквизит.Имя];
		Если общ.ОбъектСсылкаДругое(ЗначениеРеквизита) <> "Другое" И ЗначениеЗаполнено(ЗначениеРеквизита.Ссылка) Тогда
			КоллекцияСсылокВОбъекте.Вставить(ЗначениеРеквизита.Ссылка, ЗначениеРеквизита.Ссылка);
			
			// Если реквизит находится в коллекции выгружаемых по сслке, рекурсивно выгрузить его
			ВыгружатьПоСсылке = пОписаниеТиповДляРекурсивнойОбработки.СодержитТип(ТипЗнч(ЗначениеРеквизита)); 
				
			Если ВыгружатьПоСсылке Тогда
				Объект_КоллекцияСсылокВОбъекте(
					ЗначениеРеквизита,
					пОписаниеТиповДляРекурсивнойОбработки,
					пКоллекцияОбработанных,
					КоллекцияСсылокВОбъекте
					);
					
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;

	Для Каждого МетаданныеТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ТЧ = пОбъектСсылочный[МетаданныеТЧ.Имя];
		
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			Для Каждого РеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл 
				ЗначениеРеквизита = СтрокаТЧ[РеквизитТЧ.Имя];
				Если общ.ОбъектСсылкаДругое(ЗначениеРеквизита) <> "Другое" И ЗначениеЗаполнено(ЗначениеРеквизита.Ссылка) Тогда
					КоллекцияСсылокВОбъекте.Вставить(ЗначениеРеквизита.Ссылка, ЗначениеРеквизита.Ссылка);
					
					// Если реквизит находится в коллекции выгружаемых по сслке, рекурсивно выгрузить его
					ВыгружатьПоСсылке = пОписаниеТиповДляРекурсивнойОбработки.СодержитТип(ТипЗнч(ЗначениеРеквизита)); 
						
					Если ВыгружатьПоСсылке Тогда
						Объект_КоллекцияСсылокВОбъекте(
							ЗначениеРеквизита,
							пОписаниеТиповДляРекурсивнойОбработки,
							пКоллекцияОбработанных,
							КоллекцияСсылокВОбъекте
							);
							
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			РеквизитТЧ = Неопределено;
			
		КонецЦикла;
		СтрокаТЧ = Неопределено;
		
	КонецЦикла;
	МетаданныеТЧ = Неопределено; 
	
	пКоллекцияОбработанных.Вставить(пОбъектСсылочный.Ссылка);

	Возврат КоллекцияСсылокВОбъекте;	
	
КонецФункции

Функция Объект_ПоТипу(пТипСсылкиОбъекта, пСсылка = Неопределено, Знач пУИД = Неопределено) Экспорт
	
	Проверка_Тип(пТипСсылкиОбъекта, Тип("Тип"));

	результатОбъект = Неопределено;
	менеджер = Менеджер_ПоОбъекту(пТипСсылкиОбъекта);
	
	Если общ.ЭтоЗаполненнаяСсылка(пСсылка, пТипСсылкиОбъекта)  Тогда
		Если общ.Ссылка_Существует(пСсылка) Тогда
			результатОбъект = пСсылка.ПолучитьОбъект();
		
		// Если ссылка битая
		// То создать новый объект и установить ему ссылку нового
		Иначе
			результатОбъект = Менеджер_СоздатьОбъект(менеджер);
			результатОбъект.УстановитьСсылкуНового(пСсылка);
			
		КонецЕсли;
		                                 
	Иначе
		результатОбъект = Менеджер_СоздатьОбъект(менеджер);
		
		уид = Неопределено;
		Если ТипЗнч(пУИД) = Тип("УникальныйИдентификатор") Тогда
			уид = пУИД;
			
		ИначеЕсли общ.Строка_ЭтоУникальныйИдентификатор(пУИД) Тогда
			уид = Новый УникальныйИдентификатор(пУИД);
			
		КонецЕсли;
		
		Если ТипЗнч(уид) <> Тип("УникальныйИдентификатор") Или Не ЗначениеЗаполнено(уид) Тогда
			уид = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		ссылкаНового = менеджер.ПолучитьСсылку(уид);
		результатОбъект.УстановитьСсылкуНового(ссылкаНового);
		
	КонецЕсли;
	
	Если результатОбъект.ЭтоНовый() И ЗначениеЗаполнено(уид) Тогда
		// Созданному элементу сразу установить ссылку, чтобы можно было использовать ее далее 
		// Например, для заполнения служебных регистров
		ссылкаНового = менеджер.ПолучитьСсылку(уид);
		результатОбъект.УстановитьСсылкуНового(ссылкаНового);
		
	КонецЕсли;
	
	Возврат результатОбъект;
	
КонецФункции

Функция ОбъектСсылкаДругое(пОбъект) Экспорт
	
	ВариантыРезультата = Новый ФиксированнаяСтруктура("Объект, Ссылка, Другое", "Объект", "Ссылка", "Другое");
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(пОбъект));

	Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
		Возврат ВариантыРезультата.Другое;
		
	КонецЕсли;

	Если КорневойТипКонфигурации(ОбъектМетаданных) = Неопределено Тогда
		Возврат ВариантыРезультата.Другое;
		
	КонецЕсли;

	Если ЭтоСсылка(пОбъект) Тогда
		Возврат ВариантыРезультата.Ссылка;
		
	Иначе
		Возврат ВариантыРезультата.Объект;
		
	КонецЕсли;
	
	Возврат ВариантыРезультата.Другое;	
	
КонецФункции

Функция ОписаниеТиповСтроки(ДлинаСтроки = 1000) Экспорт

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));

КонецФункции // ОписаниеТиповСтроки()

Процедура Ошибка_ВЖурналРегистрации(пИмяСобытия, пКомментарийОшибки, Знач пСсылкиДанных = Неопределено) Экспорт
	
	комментарийОшибки = "";
	Если ТипЗнч(пКомментарийОшибки) = Тип("ИнформацияОбОшибке") Тогда
		комментарийОшибки = общ.Ошибка_ПодробноеПредставление(пКомментарийОшибки);
		
	ИначеЕсли ТипЗнч(пКомментарийОшибки) = Тип("Стркоа") Тогда
		комментарийОшибки = пКомментарийОшибки;
		
	Иначе
		комментарийОшибки = Строка(пКомментарийОшибки);
		
	КонецЕсли;
	
	ссылкиДанных = Новый Массив;
	Если ТипЗнч(пСсылкиДанных) = Тип("Массив") Тогда
		ссылкиДанных = пСсылкиДанных;
		
	ИначеЕсли ссылкиДанных = Неопределено Тогда
		// Ничего не делать
		
	ИначеЕсли Не ЗначениеЗаполнено(ссылкиДанных) Тогда
		// Ничего не делать
		
	Иначе
		ссылкиДанных.Добавить(пСсылкиДанных);
		
	КонецЕсли;
	
	естьЗапись = Ложь;
	
	Для Каждого данные Из ссылкиДанных Цикл
		данныеСсылка = Неопределено;
		осд = общ.ОбъектСсылкаДругое(данные);
		Если осд = "Объект" Тогда
			данныеСсылка = данные.Ссылка;
			
		ИначеЕсли осд = "Ссылка" Тогда
			данныеСсылка = данные;
			
		Иначе
			данныеСсылка = Неопределено;
			
		КонецЕсли;
		
		Если Не общ.ЭтоЗаполненнаяСсылка(данныеСсылка) Тогда
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			пИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.НайтиПоТипу(ТипЗнч(данныеСсылка)),
			данныеСсылка,
			комментарийОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
			
		естьЗапись = Истина;

	КонецЦикла;
	
	// Цикл выше сделал запись, привязанную к данным, дальше не обрабатывать
	Если естьЗапись Тогда 
		Возврат;
		
	КонецЕсли;

	// Сделать запись в журнал регистрации без привязки к данным
	ЗаписьЖурналаРегистрации(
		пИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		комментарийОшибки,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);

КонецПроцедуры

Функция Ошибка_КраткоеПредставление(пИнфоОшибки) Экспорт 
	
	Если ВерсияПлатформыНеНижеУказанной("8.3.17.0") Тогда
		Возврат ОбработкаОшибок.КраткоеПредставлениеОшибки(пИнфоОшибки);
		
	КонецЕсли;
	
	Возврат КраткоеПредставлениеОшибки(пИнфоОшибки);
	
КонецФункции

// Эмуляция системной функции ОписаниеОшибки,
// Которая доступна только внутри операторных скобок Исключение-КонецПопытки
Функция Ошибка_Описание(пИнфоОшибки) Экспорт 
	
	Проверка_Тип(пИнфоОшибки, Тип("ИнформацияОбОшибке"));
	
	представлениеОшибки = 
		СтрШаблон(
			"%1
			|{%2(%3)}: %4",
			пИнфоОшибки.Описание, // %1
			пИнфоОшибки.ИмяМодуля, // %2
			пИнфоОшибки.НомерСтроки, // %3
			пИнфоОшибки.ИсходнаяСтрока // %4
			);

	Возврат представлениеОшибки;	
	
КонецФункции

Функция Ошибка_ПодробноеПредставление(пИнфоОшибки) Экспорт 
	
	Если ВерсияПлатформыНеНижеУказанной("8.3.17.0") Тогда
		Возврат ОбработкаОшибок.ПодробноеПредставлениеОшибки(пИнфоОшибки);
		
	КонецЕсли;
	
	Возврат ПодробноеПредставлениеОшибки(пИнфоОшибки);
	
КонецФункции

// Функция проверяет тип объекта
// Если тип не соответсвует вызывается исключение, или возвращается сообщение об ошибке.
Функция Проверка_Тип(пЗначение, Знач пПроверяемыйТип, пВызыватьИсключение = Истина) Экспорт
	
	// ПРОВЕРКА ВХОДНЫХ ПАРАМЕТРОВ 
	ожидаемыйТипПараметра2 = Новый ОписаниеТипов("Строка,Тип,ОписаниеТипов");
	Если Не ожидаемыйТипПараметра2.СодержитТип(ТипЗнч(пПроверяемыйТип)) Тогда
		ВызватьИсключение 
			СтрШаблон(
				"Неверный тип параметра #2 '%1'. Параметр может иметь тип 'Строка', 'Тип' или 'ОписаниеТипов'",
				Тип_Представление(пПроверяемыйТип) );
	КонецЕсли;
	
	допустимоНеопределено = ТипЗнч(пПроверяемыйТип) = Тип("Строка") И СтрНайти(ВРЕГ(пПроверяемыйТип), "НЕОПРЕДЕЛЕНО");

	// Привести проверяемый тип к описанию типов
	Если ТипЗнч(пПроверяемыйТип) <> Тип("ОписаниеТипов") Тогда
		пПроверяемыйТип = Новый ОписаниеТипов(пПроверяемыйТип);
		
	КонецЕсли;

	// Обработка массива переменных
	Если ТипЗнч(пЗначение) = Тип("Массив") И Не пПроверяемыйТип.СодержитТип(Тип("Массив")) Тогда
		проверяемыеЗначения = пЗначение;
		
	Иначе
		проверяемыеЗначения = Новый Массив;
		проверяемыеЗначения.Добавить(пЗначение);
		
	КонецЕсли;
	
	// ОСНОВНОЙ АЛГОРИТМ
	индексыПлохихЗначений = Новый Массив;
	индекс = -1;
	Для Каждого значение Из проверяемыеЗначения Цикл
		индекс = индекс + 1;
		Если значение = Неопределено И допустимоНеопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		значениеСоответствует = значение <> Неопределено И пПроверяемыйТип.СодержитТип(ТипЗнч(значение));
		Если значениеСоответствует Тогда
			Продолжить;
			
		КонецЕсли; 
		
		индексыПлохихЗначений.Добавить(индекс);
		
	КонецЦикла;
	значение = Неопределено;
	
	Если индексыПлохихЗначений.Количество() = 0 Тогда
		Возврат "";
		
	КонецЕсли;

	именаТипов  = Новый Массив;
	Для Каждого Тип Из пПроверяемыйТип.Типы() Цикл
		именаТипов.Добавить(Тип_Представление(Тип));
		
	КонецЦикла;
	
	Если допустимоНеопределено Тогда
		именаТипов.Добавить("Неопределено");
		
	КонецЕсли;
	
	типыСтрокой = СокрЛП(СтрСоединить(именаТипов, Символы.ПС));
	имяТипаЗначения = Тип_Представление(ТипЗнч(значение));
	текстыОшибок = Новый Массив;
	Для Каждого индекс Из индексыПлохихЗначений Цикл
		текстОшибкиЗначения = 
			СтрШаблон(
				"[%1] Тип значения '%2' = '%3' не соответствует допустимому '%4'.",
				Формат(индекс, "ЧГ=0"), // %1
				значение, // %2 
				имяТипаЗначения, // %3
				типыСтрокой);
					
		текстыОшибок.Добавить(текстОшибкиЗначения);
		
	КонецЦикла;
		
	всеОшибки = СтрСоединить(текстыОшибок, Символы.ПС);
	
	Если пВызыватьИсключение Тогда
		ВызватьИсключение всеОшибки;
		
	КонецЕсли;
		
	Возврат всеОшибки;

КонецФункции

// Процедура устанавливает отбор СКД. Используется для СКД и отборов динамических списков
//
// Параметры:
//		ОтборСКД
//			Обязательный, отбор СКД или группа элементов отбора компоновки данных
//			Отбор, в котором необходимо установить элемент
//		ЛевоеЗначение
//			Обязательный, Строка или ПолеКомпоновкиДанных
//			Поле, по которому будет происходить отбор
//		ПравоеЗначение
//			Обязательный, произвольный
//			Значение для отбора
//		ВидСравненияСКД
//			Необязательный, ВидСравненияКомпоновкиДанных
//			По умолчанию неопределено
//			Если значение не заполнено, будет взят вид сравнения "Равно".
//		Использование
//			Необязательный, Булево
//			По умолчанию Истина
//			Признак, использовать параметр или нет
// 		ЭлементОтбораДанных
//			Необязательный, не заполнять
//			Нужен для рекурсивной работы процедуры
//
// 20120905103206 Заяш
// 
Процедура СКД_Отбор_Установить(
		ОтборСКД, 
		знач ЛевоеЗначение, 
		знач ПравоеЗначение, 
		ВидСравненияСКД = Неопределено, 
		Использование = Истина, 
		ЭлементОтбораДанных = Неопределено
		) Экспорт
	
	Проверка_Тип(Использование, Тип("Булево"));
	
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	КонецЕсли;
	   
	Если ВидСравненияСКД = Неопределено Тогда
		ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементыОтбора = ОтборСКД.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			// Вызвать рекурсивно эту процедуру
			СКД_Отбор_Установить(ЭлементОтбора, ЛевоеЗначение, ПравоеЗначение, ВидСравненияСКД, Использование, ЭлементОтбораДанных);
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияСКД;
				ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
				ЭлементОтбораДанных.Использование = Использование;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если элемент отбора не найден, добавить новый в корень и установить ему значения
	Если ЭлементОтбораДанных = Неопределено И ТипЗнч(ОтборСКД) = Тип("ОтборКомпоновкиДанных") Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияСКД;
		ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
		ЭлементОтбораДанных.Использование = Использование;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникОбъект_УстановитьУИДкакКод(СправочникОбъект) Экспорт

	ИДСтрокой = "";
	
	Если СправочникОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
		СсылкаНового = Неопределено;
		
		Если СправочникОбъект.ДополнительныеСвойства.Свойство("СсылкаНового") Тогда
			СсылкаНового = СправочникОбъект.ДополнительныеСвойства.СсылкаНового;
			
		КонецЕсли;
		
		Если
					ТипЗнч(СсылкаНового) <> ТипЗнч(СправочникОбъект.Ссылка)
			 ИЛИ	Не ЗначениеЗаполнено(СсылкаНового)
 		Тогда
			СправочникМенеджер = Менеджер_ПоОбъекту(СправочникОбъект.Ссылка);
			СсылкаНового = СправочникМенеджер.ПолучитьСсылку();
			
		КонецЕсли;

		СправочникОбъект.УстановитьСсылкуНового(СсылкаНового);
		
		ИДСтрокой = Строка(СсылкаНового.УникальныйИдентификатор());
		
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
	КонецЕсли;

	// Установить код равный уникальному идентификатору
	Если ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
		ИДСтрокой = Строка(СправочникОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИДСтрокой) И СправочникОбъект.Код <> ИДСтрокой Тогда
		СправочникОбъект.Код = ИДСтрокой;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Коллекция_ПоСсылке(пСсылкаИлиОбъект, Знач пИсключаяСвойства = Неопределено) Экспорт
	
	образ = Новый Структура();
	
	// Подготовительные операции и классификация по входящим параметрам
	объектСсылкаДругое = ОбъектСсылкаДругое(пСсылкаИлиОбъект);
	этотОбъектУдален = Ложь;
	этоНовый = Ложь;
	этоПеречисление = Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(пСсылкаИлиОбъект));
	Если этоПеречисление Тогда
		ссылкаОбъекта = пСсылкаИлиОбъект;
		
	ИначеЕсли объектСсылкаДругое = "Ссылка" Тогда
		ссылкаОбъекта = пСсылкаИлиОбъект;
		этотОбъектУдален = общ.ЭтоЗаполненнаяСсылка(ссылкаОбъекта) И Не Ссылка_Существует(ссылкаОбъекта);

	ИначеЕсли объектСсылкаДругое = "Объект" Тогда
		ссылкаОбъекта = пСсылкаИлиОбъект.Ссылка;
		этоНовый = пСсылкаИлиОбъект.ЭтоНовый();
		этотОбъектУдален = Не этоНовый И общ.ЭтоЗаполненнаяСсылка(ссылкаОбъекта) И Не Ссылка_Существует(ссылкаОбъекта);
		
	Иначе
		Возврат образ;
		
	КонецЕсли; 
	
	// !!! В коде ниже не должно быть переменной пСсылкаИлиОбъект
	// Дальше использовать только ссылкаОбъекта  
	
	типОбъекта = ТипЗнч(ссылкаОбъекта); 
	образ.Вставить("_Тип", Тип_Представление(типОбъекта)); 
	Если Не Тип_ЭтоСсылка(типОбъекта) Тогда
		Возврат образ;
		
	КонецЕсли;  
	
	этоПустаяСсылка = Не ЗначениеЗаполнено(ссылкаОбъекта);
  	Если этоПустаяСсылка Тогда
		образ.Вставить("_ПустаяСсылка", Истина);
		Возврат образ;
		
	КонецЕсли;
	
	// Минимальный набор для определения ссылки
	Если этоПеречисление Тогда
		полноеИмяПеречисления = ПолучитьПолноеИмяПредопределенногоЗначения(ссылкаОбъекта);
		образ.Вставить("_Значение", СтрРазделить(полноеИмяПеречисления, ".")[2]); 
		образ.Вставить("_ЭтоПеречисление", Истина);
		
	Иначе // Не перечисление
		образ.Вставить("_ИмяТаблицы", Ссылка_ИмяТаблицы(ссылкаОбъекта));
		образ.Вставить("_НавигационнаяСсылка", общ.НавигационнаяСсылка(ссылкаОбъекта));
		образ.Вставить("_УникальныйИдентификатор", Строка(ссылкаОбъекта.УникальныйИдентификатор())); 
		
		Если этотОбъектУдален Тогда
			образ.Вставить("_ОбъектУдален", Истина);
		Иначе
			образ.Вставить("_Представление", Строка(ссылкаОбъекта));
		КонецЕсли;

	КонецЕсли; 
	
	// Коллекция исключаемых свойств
	коллекцияИсключаемых = Коллекция_ПоЗначению(пИсключаяСвойства); 
	
	// __Все__ эквивалентно "Исключить все"
	нуженМинимальныйОбраз = общ.Коллекция_Свойство(коллекцияИсключаемых, "__Все__"); 
	Если нуженМинимальныйОбраз Или этотОбъектУдален Или этоПустаяСсылка Тогда  
		образ.Вставить("_ЭтоОбразБезРеквизитов", Истина);
		Возврат образ;
		
	КонецЕсли;

	// Реквизиты определяющие ссылку, нужны для поиска
	#Область ОпределяющиеРеквизиты
	этоПВХ = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(типОбъекта);
	этоПланСчетов = ПланыСчетов.ТипВсеСсылки().СодержитТип(типОбъекта);
	этоСпр = Справочники.ТипВсеСсылки().СодержитТип(типОбъекта);
	естьИерархия = этоСпр Или этоПВХ;
	
	исключитьВложенныеСсылки =
			общ.Коллекция_Свойство(коллекцияИсключаемых, "__ВложенныеСсылки__")
		Или общ.Коллекция_Свойство(коллекцияИсключаемых, "__МеняющиеХеш__")
		;
	
	// Выгрузить родителя и владельца
	// Для некоторых видов метаданных родитель/владелец является определяющим признаком, наравне с кодом или наименованием
	// Без него невозможно определить верный элемент справочника.
	// Например, такая ситуация в справочнике ВидыКонтактнойИнформации типовых бухгалтерий 3.0 для России
	// Там элементы без кода с одинаковыми наименованиями, отличаются только положением в иерархии, родитель у них разный
	Если этоСпр Тогда
		образ.Вставить("Наименование", ссылкаОбъекта.Наименование);
		образ.Вставить("Владелец", ссылкаОбъекта.Владелец);
		Если исключитьВложенныеСсылки Или образ["Владелец"] = ссылкаОбъекта Тогда
			образ.Вставить("Владелец", общ.Коллекция_ПоСсылке(образ["Владелец"], "__Все__"));
			
		КонецЕсли;
				
	ИначеЕсли этоПланСчетов Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(типОбъекта) Тогда
		образ.Вставить("Наименование", ссылкаОбъекта.Наименование);
		
	КонецЕсли; 
	
	Если естьИерархия Тогда
		образ.Вставить("_ЭтоГруппа", ссылкаОбъекта.ЭтоГруппа);
		образ.Вставить("ЭтоГруппа", ссылкаОбъекта.ЭтоГруппа);
		образ.Вставить("Родитель", ссылкаОбъекта.Родитель);
		
		Если исключитьВложенныеСсылки Или образ["Родитель"] = ссылкаОбъекта Тогда
			образ.Вставить("Родитель", общ.Коллекция_ПоСсылке(образ["Родитель"], "__Все__"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	этоДокумент = Документы.ТипВсеСсылки().СодержитТип(типОбъекта);
		
	#Область исключитьМеняющиеХеш
	// Признак необхододимости обезличить объект
	// Если равен истина, то не будут выгружены служебные реквизиты типа кода, номера, проведен, версия данных
	// Используется чтобы сравнивать объекты между собой, путем сравнения хешей коллекций или сериализованных в JSON коллекций
	исключитьМеняющиеХеш = общ.Коллекция_Свойство(коллекцияИсключаемых, "__МеняющиеХеш__");
	Если исключитьМеняющиеХеш Тогда
		образ.Удалить("_НавигационнаяСсылка");
		образ.Удалить("_УникальныйИдентификатор");
		образ.Вставить("_ЭтоОбразДляВычисленияХеша", Истина);
		
	Иначе // Не исключитьМеняющиеХеш
		Если	
				этоСпр 
			Или этоПВХ
			Или этоПланСчетов
			Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(типОбъекта)
		Тогда
			образ.Вставить("Код", ссылкаОбъекта.Код);

		ИначеЕсли 
				этоДокумент 
			Или	Задачи.ТипВсеСсылки().СодержитТип(типОбъекта)	
			Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(типОбъекта)
		Тогда
			образ.Вставить("Номер", ссылкаОбъекта.Номер);
			образ.Вставить("Дата", ссылкаОбъекта.Дата); 

		КонецЕсли;
		
	КонецЕсли; // не для хеша
		
	#КонецОбласти // неДляХеша  
	
	#КонецОбласти // ОпределяющиеРеквизиты	

	выгружатьРеквизиты = Не общ.Коллекция_Свойство(коллекцияИсключаемых, "__Реквизиты__");
	Если Не выгружатьРеквизиты Или этоПеречисление Тогда
		Возврат образ;
		
	КонецЕсли; 
	
	// Далее полная выгрузка объекта, реквизитов и табличных частей 
	Если Не исключитьМеняющиеХеш Тогда
		образ.Вставить("ПометкаУдаления", ссылкаОбъекта.ПометкаУдаления);
			
		Если этоНовый Тогда
			образ.Вставить("ЭтоНовый", этоНовый);
				
		КонецЕсли;
			
		Если этоДокумент Тогда
			образ.Вставить("Проведен", ссылкаОбъекта.Проведен);
			
		КонецЕсли; 
		
	КонецЕсли; // Если пВыгрузитьРеквизитыСостояния
	
	мета = Метаданные.НайтиПоТипу(типОбъекта);
	
	// Выгрузить реквизиты 
	выгружатьХранилищаЗначений = Не общ.Коллекция_Свойство(коллекцияИсключаемых, "__ХранилищаЗначений__");
	Для Каждого реквизитМетаданных Из мета.Реквизиты Цикл
		Если общ.Коллекция_Свойство(коллекцияИсключаемых, НРЕГ(реквизитМетаданных.Имя)) Тогда
			Продолжить;
			
		КонецЕсли;
		
		значениеРеквизита = ссылкаОбъекта[реквизитМетаданных.Имя];
		типРеквизита = ТипЗнч(значениеРеквизита);
		
		выгрузкаРазрешена = Истина;
		Если типРеквизита = Тип("ХранилищеЗначения") И Не выгружатьХранилищаЗначений Тогда
			выгрузкаРазрешена = Ложь;
			
		КонецЕсли;
		
		Если выгрузкаРазрешена Тогда
			
			// Запрет циклической ссылки самой на себя - например, ГоловнойКонтрагент у Контрагента это он сам
			Если значениеРеквизита = ссылкаОбъекта Тогда
				образ.Вставить(реквизитМетаданных.Имя, общ.Коллекция_ПоСсылке(значениеРеквизита, "__Все__")); 
				
			ИначеЕсли общ.ЭтоСсылка(значениеРеквизита) И исключитьВложенныеСсылки Тогда
				образ.Вставить(реквизитМетаданных.Имя, общ.Коллекция_ПоСсылке(значениеРеквизита, "__Все__"));
				
			Иначе				
				образ.Вставить(реквизитМетаданных.Имя, значениеРеквизита);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	реквизитМетаданных = Неопределено;

	// Выгрузить табличные части
	выгружатьТабличныеЧасти = Не общ.Коллекция_Свойство(коллекцияИсключаемых, "__ТабличныеЧасти__"); 
	Если выгружатьТабличныеЧасти Тогда
		Для Каждого тчМетаданных Из мета.ТабличныеЧасти Цикл
			Если общ.Коллекция_Свойство(коллекцияИсключаемых, НРЕГ(тчМетаданных.Имя)) Тогда
				Продолжить;
				
			КонецЕсли;
			
			образТЧ = Новый Массив;
			ТЧ = ссылкаОбъекта[тчМетаданных.Имя];
			Для Каждого рядТЧ Из ТЧ Цикл
				образСтрокиТЧ = Новый Структура;

				// Нужен номер строки для сортировки результирующей ТЧ на выходе
				образСтрокиТЧ.Вставить("_НомерСтроки", рядТЧ.НомерСтроки);
				образСтрокиТЧ.Вставить("НомерСтроки", рядТЧ.НомерСтроки); 
				
				Для Каждого реквизитТчМетаданных Из тчМетаданных.Реквизиты Цикл
					Если общ.Коллекция_Свойство(коллекцияИсключаемых, НРЕГ(тчМетаданных.Имя + "." + реквизитТчМетаданных.Имя)) Тогда
						Продолжить;
						
					КонецЕсли;
					
					значениеРеквизитаТЧ = рядТЧ[реквизитТчМетаданных.Имя];
					типРеквизитаТЧ = ТипЗнч(значениеРеквизитаТЧ);
					
					Если общ.ЭтоСсылка(типРеквизитаТЧ) И (исключитьВложенныеСсылки Или значениеРеквизита = ссылкаОбъекта) Тогда
						образСтрокиТЧ.Вставить(реквизитТчМетаданных.Имя, общ.Коллекция_ПоСсылке(значениеРеквизитаТЧ, "__Все__"));
						
					Иначе
						образСтрокиТЧ.Вставить(реквизитТчМетаданных.Имя, значениеРеквизитаТЧ); 
						
					КонецЕсли;

				КонецЦикла;
				реквизитТчМетаданных = Неопределено;
				
				образТЧ.Добавить(образСтрокиТЧ);
				
			КонецЦикла;
			рядТЧ = Неопределено;
			
			образ.Вставить(тчМетаданных.Имя, образТЧ); 

		КонецЦикла;
		тчМетаданных = Неопределено;
		
	КонецЕсли; // Если выгружатьТабличныеЧасти
		
	// Специфика плана счетов
	Если этоПланСчетов Тогда
		// Признаки учета
		Для Каждого признакУчета Из мета.ПризнакиУчета Цикл
			имяФлагаУчета = признакУчета.Имя;
			
			Если общ.Коллекция_Свойство(коллекцияИсключаемых, НРег(имяФлагаУчета)) Тогда
				Продолжить;
				
			КонецЕсли;
			
			образ.Вставить(имяФлагаУчета, ссылкаОбъекта[имяФлагаУчета]);
			
		КонецЦикла;
		признакУчета = Неопределено;
		
		// Виды субконто
		Если Не общ.Коллекция_Свойство(коллекцияИсключаемых, НРег("ВидыСубконто")) Тогда
			оВидахСубконто = Новый Массив;
			Для индексСубконто = 0 По ссылкаОбъекта.ВидыСубконто.Количество() - 1 Цикл
				
				строкаВидовСубконто = ссылкаОбъекта.ВидыСубконто[индексСубконто];
				образСтрокиВидовСубконто = Новый Структура;
				
				образВидаСубконто = Коллекция_ПоСсылке(строкаВидовСубконто.ВидСубконто);
				образСтрокиВидовСубконто.Вставить("ВидСубконто", образВидаСубконто);
				образСтрокиВидовСубконто.Вставить("НомерСтроки", строкаВидовСубконто.НомерСтроки);
				образСтрокиВидовСубконто.Вставить("_НомерСтроки", строкаВидовСубконто.НомерСтроки);
				
				образСтрокиВидовСубконто.Вставить("Предопределенное", строкаВидовСубконто.Предопределенное);
				образСтрокиВидовСубконто.Вставить("ТолькоОбороты", строкаВидовСубконто.ТолькоОбороты);
				
				Для Каждого признакУчетаСубконто Из мета.ПризнакиУчетаСубконто Цикл 
					имяФлагаУчетаСубконто = признакУчетаСубконто.Имя;
					образСтрокиВидовСубконто.Вставить(имяФлагаУчетаСубконто, строкаВидовСубконто[имяФлагаУчетаСубконто]);
					
				КонецЦикла;
				
				оВидахСубконто.Добавить(образСтрокиВидовСубконто);
				
			КонецЦикла;
			индексСубконто = Неопределено;
			
			образ.Вставить("ВидыСубконто", оВидахСубконто);
			
		КонецЕсли; // Виды субконто счета
		
	КонецЕсли; // Если этоПланСчетов

	Возврат образ;

КонецФункции // СсылкуВСтруктуруДляОбмена

Функция Ссылка_ЕстьРеквизит(Ссылка, знач ИмяРеквизита = "") Экспорт
	
	ИмяРеквизита = СокрЛП(ИмяРеквизита);		
	
	Если Не ЭтоСсылка(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ссылка_Метаданные = Ссылка.Метаданные();
	
	Если Ссылка_Метаданные.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из Ссылка_Метаданные.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = ИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	СтандартныйРеквизит = Неопределено;
	
	Возврат Ложь;

КонецФункции

Функция Ссылка_ЗначениеРеквизита(Ссылка, ИмяРеквизита = "") Экспорт
	
	Если Не ЭтоСсылка(Ссылка) Тогда
		ВызватьИсключение "Параметр #1 должен иметь ссылочный тип";
	КонецЕсли;
	
	// Если ссылка не записана, вернуть неопределено
	Если Не ЗначениеЗаполнено(Ссылка.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Если имя реквизита не заполнено, вернем неопределено
	Если ПустаяСтрока(ИмяРеквизита) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	// Если у документа нет реквизита, вернем неопределено
	Если Не Ссылка_ЕстьРеквизит(Ссылка, ИмяРеквизита) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		СтрШаблон(
		"ВЫБРАТЬ 
		|%1 КАК ЗначениеРеквизита 
		|ИЗ %2.%3
		|ГДЕ Ссылка = &Ссылка",
		ИмяРеквизита, // %1
		КорневойТипКонфигурации(Ссылка), // %2
		Ссылка.Метаданные().Имя // %3
		);
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеРеквизита;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Функция обратная ЗначениеВJSON для ссылочных объектов
Функция Ссылка_ПоКоллекции(пКоллекция) Экспорт 
	
	Если Не общ.ЭтоКоллекцияКлючЗначение(пКоллекция) Тогда
		Возврат Неопределено;
		
	КонецЕсли; 
	
	типСсылки = Неопределено;
	стрТипСсылки = Неопределено;
	Если общ.Коллекция_Свойство(пКоллекция, "_Тип", стрТипСсылки) Тогда
		типСсылки = Тип_ИзСтроки(стрТипСсылки);		
	КонецЕсли;
	
	Если Не общ.Тип_ЭтоСсылка(типСсылки) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	// 0. Значение перечисления
		этоПеречисление = Перечисления.ТипВсеСсылки().СодержитТип(типСсылки);
		Если этоПеречисление Тогда
			перечисление_менеджер = общ.Менеджер_ПоОбъекту(типСсылки);
			Если Общ.Коллекция_Свойство(пКоллекция, "_ПустаяСсылка") Тогда
				Возврат перечисление_менеджер.ПустаяСсылка();
				
			КонецЕсли; 
			
			Если Не общ.Коллекция_Свойство(пКоллекция, "_Значение") Тогда
				Возврат Неопределено;
				
			КонецЕсли;
			
			перечисление_метаданные = перечисление_менеджер.пустаяСсылка().Метаданные();
		    перечисление_существует = перечисление_метаданные.ЗначенияПеречисления.Найти(пКоллекция["_Значение"]) <> Неопределено;
			Если перечисление_существует Тогда
				Возврат перечисление_менеджер[пКоллекция["_Значение"]];
				
			Иначе
				Возврат Неопределено;
				
			КонецЕсли;
					
		КонецЕсли; // этоПеречисление	

	// 1. Искать по навигационной ссылке
	навигационнаяСсылка = Неопределено;
	естьНавигационнаяСсылка = 
			общ.Коллекция_Свойство(пКоллекция, "_НавигационнаяСсылка", навигационнаяСсылка)
		И ЗначениеЗаполнено(навигационнаяСсылка)
		;
		
	Если естьНавигационнаяСсылка Тогда	
		ссылкаРезультат = общ.Ссылка_ПоНавигационнойСсылке(навигационнаяСсылка); 
		Если общ.ЭтоЗаполненнаяСсылка(ссылкаРезультат) Тогда
			Возврат ссылкаРезультат; 
			
		Иначе
			ссылкаРезультат = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2. Искать по типу и уникальному идентификатору
	менеджер = общ.Менеджер_ПоОбъекту(типСсылки); 

	уид = Неопределено;
	Если общ.Коллекция_Свойство(пКоллекция, "_УникальныйИдентификатор", уид) И общ.Строка_ЭтоУникальныйИдентификатор(уид) Тогда 
		ссылкаРезультат = менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(пКоллекция["_УникальныйИдентификатор"]));
		
	Иначе
		ссылкаРезультат = менеджер.ПустаяСсылка();
		
	КонецЕсли;
		
	Возврат ссылкаРезультат; 
		
КонецФункции

// Фунция преобразует строку навигационной ссылки и ссылку БД
// https://1c-bezproblem.ru/blog/v-pomoshch-1s-programmistu/1s-poluchit-ssylku-na-ob-ekt-po-navigatsionnoj-ssylke
//
// Параметры:
//  НавигационнаяСсылка	 - Строка - навигационная ссылка 1С 
// 
// Возвращаемое значение:
//  Ссылка - Результат преобразования навигационной ссылки 
//
Функция Ссылка_ПоНавигационнойСсылке(пНавигационнаяСсылка) Экспорт

	Если ТипЗнч(пНавигационнаяСсылка) <> Тип("Строка") Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	точка1 = Найти(пНавигационнаяСсылка, "e1cib/data/");
	
	Если точка1 = 0 Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	точка2 = Найти(пНавигационнаяСсылка, "?ref=");
	Если точка2 = Неопределено Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	результат = Неопределено;

	ПредставлениеТипа = Сред(пНавигационнаяСсылка, точка1 + 11, точка2 - точка1 - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(пНавигационнаяСсылка, точка2 + 5));
	результат = ЗначениеИзСтрокиВнутр(ЗначениеСсылки); 
	
	Возврат результат;

КонецФункции

Функция Ссылка_ИмяТаблицы(пСсылка) Экспорт
	
	Возврат Объект_ИмяТаблицы(пСсылка);
	
КонецФункции

Функция Ссылка_ПоОбъекту(пОбъект) Экспорт
	
	результат = Неопределено;
	
	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пОбъект);
	
	Если объектСсылкаДругое = "Объект" Тогда
		результат = пОбъект.Ссылка;
		
	ИначеЕсли объектСсылкаДругое = "Ссылка" Тогда 
		результат = пОбъект;
		
	КонецЕсли;
		
	Если Не общ.ЭтоЗаполненнаяСсылка(результат) Тогда
		результат = Неопределено;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

Функция Ссылка_Существует(пСсылка) Экспорт 
	
	// 20230830 Заяш // Исправлены ошибка, когда в функцию передается перечисление
	корневойТип = Общ.КорневойТипКонфигурации(пСсылка);
	Если корневойТип = "Перечисление" Тогда
		Возврат ЗначениеЗаполнено(пСсылка);
		
	КонецЕсли;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пСсылка) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	запро = Новый Запрос;
	запро.УстановитьПараметр("СсылкаНаОбъект", пСсылка);
	запро.Текст = 
		СтрШаблон(
			"Выбрать Таб.Ссылка ИЗ %1 КАК Таб ГДЕ Таб.Ссылка = &СсылкаНаОбъект",
			Ссылка_ИмяТаблицы(пСсылка),
			);
			
	УстановитьПривилегированныйРежим(Истина);
	
	рез = Не запро.Выполнить().Пустой();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат рез;
	
КонецФункции

Функция Строка_ИзBase64(пСтрокаBase64) Экспорт
	
	дд = Base64Значение(пСтрокаBase64);
	Если дд = Неопределено Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	тмп = ПолучитьИмяВременногоФайла();
	дд.Записать(тмп);
	чтениеТекста = Новый ЧтениеТекста(тмп);
	
	строкаРезультат = чтениеТекста.Прочитать();
	
	Попытка
		чтениеТекста.Закрыть();
		УдалитьФайлы(тмп); 
		
	Исключение
		обОшибке = ИнформацияОбОшибке();
		ВызватьИсключение;
		
	КонецПопытки; 
	
	Возврат строкаРезультат;
	
КонецФункции 
 
Функция Строка_УдалитьНедопустимыеСимволы(стр, ДопустимыеСимволы) Экспорт

	Возврат СтрСоединить(СтрРазделить(стр, СтрСоединить(СтрРазделить(стр, ДопустимыеСимволы))))

КонецФункции

// Проверяет, является ли строка уникальным идентификатором.
// В качестве уникального идентификатора предполагается строка вида
// "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX", где X = [0..9,a..f].
//
// Параметры:
//  Значение - Строка - проверяемая строка.
//
// Возвращаемое значение:
//  Булево - Истина, если переданная строка является уникальным идентификатором.
//
// 20230601 Заяш: функция взята из СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор
//
Функция Строка_ЭтоУникальныйИдентификатор(Знач пСтрока) Экспорт
	
	Если ТипЗнч(пСтрока) <> Тип("Строка") Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(пСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Позиция = 1 По СтрДлина(пСтрока) Цикл
		Если КодСимвола(Шаблон, Позиция) = 88 // X
			И ((КодСимвола(пСтрока, Позиция) < 48 Или КодСимвола(пСтрока, Позиция) > 57) // 0..9
			И (КодСимвола(пСтрока, Позиция) < 97 Или КодСимвола(пСтрока, Позиция) > 102) // a..f
			И (КодСимвола(пСтрока, Позиция) < 65 Или КодСимвола(пСтрока, Позиция) > 70)) // A..F
			Или КодСимвола(Шаблон, Позиция) = 45 И КодСимвола(пСтрока, Позиция) <> 45 Тогда // -
				Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция Структура_ИзСоответствия(пСоответсвие) Экспорт 
	
	общ.Проверка_Тип(пСоответсвие, "Соответствие");

	структураРезультат = Новый Структура; 
	
	текстJSON = общ.JSON(пСоответсвие);
	чтение = Новый ЧтениеJSON;
	чтение.УстановитьСтроку(текстJSON); 
	структураРезультат = ПрочитатьJSON(чтение, Ложь);
	
	Возврат структураРезультат;
	
КонецФункции

// Функция для преобразования табличного документа в таблицу значений.
// Предполагается, что в первой строке табличного документа содержаться имена колонок.
//
// Параметры
//  ТабличныйДокумент
//		Обязательный, ТабличныйДокумент
//		Табличный документ, который нужно преобразовать в таблицу значений
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
// 20121010 Заяш
//
Функция ТабличныйДокумент_ВТаблицуЗначений(ТабличныйДокумент) Экспорт
	
	ТЗ=Новый ТаблицаЗначений();
	
	//Считываем колонки
	Для Стр=1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если Стр>1 Тогда
			ТекСтр=ТЗ.Добавить();
		КонецЕсли;
		ПустаяСтрока=истина;
		Для Кол=1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			Яч=ТабличныйДокумент.Область(Стр, Кол);
			Если Яч.СодержитЗначение Тогда
				Зн=Яч.Значение;
			Иначе
				Зн=Яч.Текст;
			КонецЕсли;
			Если ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн) Тогда
				Зн=Неопределено;
			КонецЕсли;
			
			//Добавляем колонку
			Если Стр=1 Тогда
				
				// В имени колонки убрать пробелы
				Зн = СокрЛП(Зн);
				Зн = СтрЗаменить(Зн, " ", "_");
				Зн = СтрЗаменить(Зн, Символы.ПС, "");
				Зн = СтрЗаменить(Зн, "-", "");
				Зн = СтрЗаменить(Зн, "№", "_N0_");
				
				// Если в таблице уже есть колонка стаким именем, добавить номер
				Если ТЗ.Колонки.Найти(Зн) <> Неопределено Тогда
					Счетчик = 0;
					
					Пока Истина Цикл
						Счетчик = Счетчик + 1;
						
						ЗнСоСчетчиком = Зн + "_" + Счетчик;
						
						НайденнаяКолонка = ТЗ.Колонки.Найти(ЗнСоСчетчиком);
						
						Если НайденнаяКолонка = Неопределено Тогда
							Зн = ЗнСоСчетчиком;
							Прервать;
							
						Иначе
							Продолжить;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТЗ.Колонки.Добавить(Зн, ОписаниеТиповСтроки(255));
				
			Иначе
				ТекСтр[Кол-1]=Зн;
				
			КонецЕсли;
			
		КонецЦикла;
		Кол = Неопределено;
		
	КонецЦикла;
	Стр = Неопределено;
	
	Возврат ТЗ;
	
КонецФункции // ТабличныйДокумент_ВТаблицуЗначений()

Функция ТабличныйДокумент_ИменаПараметров(пТабДок, пЗаполнениеТекстКакШаблон = Ложь, пТегСлева = "[", пТегСправа = "]") Экспорт
	
	общ.Проверка_Тип(пТабДок, "ТабличныйДокумент, ОбластьЯчеекТабличногоДокумента"); 
	
	Если ТипЗнч(пТабДок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат 
			ОбластьТабличногоДокумента_ИменаПараметров(
				пТабДок, пЗаполнениеТекстКакШаблон, пТегСлева, пТегСправа
				);
		
	КонецЕсли;
	
    соотвИменПараметров = Новый Соответствие;
	
    Для номерСтроки = 1 По пТабДок.ВысотаТаблицы Цикл
        Для номерКолонки = 1 По пТабДок.ШиринаТаблицы Цикл
            ячейка = пТабДок.Область(номерСтроки, номерКолонки, номерСтроки, номерКолонки);
			массивПараметровЯчейки = 
				ОбластьТабличногоДокумента_ИменаПараметров(
					ячейка, пЗаполнениеТекстКакШаблон, пТегСлева, пТегСправа
					);
			
			Для Каждого имяПараметра Из массивПараметровЯчейки Цикл
				соотвИменПараметров.Вставить(имяПараметра);
				
			КонецЦикла;
			имяПараметра = Неопределено;

		КонецЦикла;//конец обхода по колонкам
		номерКолонки = Неопределено
 
	КонецЦикла;//конец обхода по строкам 
	номерСтроки = Неопределено;
	
	массивИменПараметров = Новый Массив;
	
	Для Каждого пара Из соотвИменПараметров Цикл 
		массивИменПараметров.Добавить(пара.Ключ);
		
	КонецЦикла;			
 
	Возврат массивИменПараметров;

КонецФункции 

Функция Тип_ИзИмениТаблицы(пИмяТаблицы) Экспорт
	
	запрос = Новый Запрос;
	запрос.Текст = СтрШаблон("ВЫБРАТЬ Значение(%1.ПустаяСсылка) КАК ПустаяСсылка", пИмяТаблицы);
	
	Попытка
		выборка = Запрос.Выполнить().Выбрать();
		Если выборка.Следующий() Тогда 
			рез = ТипЗнч(выборка.ПустаяСсылка);
			Возврат рез;
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Безопасное преобразование строки в тип
// Если строка неправильная, будет возвращено неопределено
Функция Тип_ИзСтроки(пИмяТипа) Экспорт
	
	Если типЗнч(пИмяТипа) <> Тип("Строка") Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		Возврат Тип(пИмяТипа);
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает строковое представление типа значения 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта"
// Для остальных типов приводит тип к строке, например "Число".
//
// Параметры:
//  пТип - Тип, произвольный - значение, для которого надо получить представление типа
// 
// Возвращаемое значение:
// 	Строка - представление типа строкой
// 
Функция Тип_Представление(Знач пТип) Экспорт

	Если Не ТипЗнч(пТип) = Тип("Тип") Тогда
		пТип = ТипЗнч(пТип);
	КонецЕсли;
	
	поУмолчанию = Строка(пТип);
	
	Если Не Тип_ЭтоСсылка(пТип) Тогда
		Возврат поУмолчанию;
		
	КонецЕсли;
	
	ПолноеИмя = Метаданные.НайтиПоТипу(пТип).ПолноеИмя();
	ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
	
	Если Справочники.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "СправочникСсылка";
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ДокументСсылка";
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "БизнесПроцессСсылка";
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ПланВидовХарактеристикСсылка";
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ПланСчетовСсылка";
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ПланВидовРасчетаСсылка";
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ЗадачаСсылка";
		
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ПланОбменаСсылка";
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(пТип) Тогда
		Представление = "ПеречислениеСсылка";
		
	Иначе
		Возврат поУмолчанию;
		
	КонецЕсли;
	
	Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
	
	Возврат Результат;
	
КонецФункции

// Получает ссылочный тип по метаданным.
//
// Параметры:
//  пМетаданные  – ОбъектМетаданных.
//
// Возвращаемое значение:
//               – Тип - ссылочный;
//  Неопределено – тип нельзя получить.
//
// 20140121 Заяш 
// Автор TormozIT
// Взять из подситстемы ИнструментыРазработчика
// ирГлобальный.ЛксПолучитьСсылочныйТипПоМетаданным(пМетаданные)
//
Функция Тип_ПоМетаданным(пМетаданные) Экспорт

	Результат = Неопределено;
	КорневойТип = КорневойТипКонфигурации(пМетаданные);
	Если КорневойТипКонфигурации_Проверить(КорневойТип) Тогда 
		Результат = Тип(КорневойТип + "Ссылка." + пМетаданные.Имя);
	КонецЕсли;
	Возврат Результат;

КонецФункции

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция Тип_ПустоеЗначение(пТип) Экспорт
	
	Если пТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли пТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли пТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли пТип = Тип("Булево") Тогда
		Возврат Ложь;
	ИначеЕсли пТип = Тип("Неопределено") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(пТип) = Тип("ОписаниеТипов") Тогда
		Если пТип.Типы().Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Тип_ПустоеЗначение(пТип.Типы()[0]);
		КонецЕсли;
	ИначеЕсли ТипЗнч(пТип) = Тип("Тип") Тогда
		Возврат Новый(пТип);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеТипа();

// Проверка того, что тип имеет ссылочный тип данных
//
// Параметры:
//	Тип — Тип или объект метаданных
//		необходимо проверить, педставляет ли этот тип
//
//	Возвращает:
//		Булево — признак того, что это ссылка
//
Функция Тип_ЭтоСсылка(Знач пТип) Экспорт 
	
	Если пТип = Неопределено Или пТип = Тип("Неопределено") Тогда
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(пТип) = Тип("Тип") Тогда
		Возврат 
			Справочники.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(пТип)
			ИЛИ Задачи.ТипВсеСсылки().СодержитТип(пТип)
			ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(пТип);
			
	ИначеЕсли ТипЗнч(пТип) = Тип("ОбъектМетаданных") Тогда
		Возврат
			Метаданные.Справочники.Содержит(пТип)
			ИЛИ Метаданные.Документы.Содержит(пТип)
			ИЛИ Метаданные.Перечисления.Содержит(пТип)
			ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(пТип)
			ИЛИ Метаданные.ПланыСчетов.Содержит(пТип)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(пТип)
			ИЛИ Метаданные.БизнесПроцессы.Содержит(пТип)
			ИЛИ Метаданные.Задачи.Содержит(пТип)
			ИЛИ Метаданные.ПланыОбмена.Содержит(пТип);
			
	Иначе
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция Файл_ПодготовитьИмя(Знач ИмяФайла) Экспорт
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "/", "%");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "%");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", ";");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "x");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "&");
	ИмяФайла = СтрЗаменить(ИмяФайла, """", "'");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "{");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "}");
	ИмяФайла = СтрЗаменить(ИмяФайла, "|", "!");
	ИмяФайла = СтрЗаменить(ИмяФайла, Символы.Таб, " ");
	ИмяФайла = СтрЗаменить(ИмяФайла, Символы.НПП, " ");
	ИмяФайла = СокрЛП(ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

Функция Число_ВСтроку_ДополнитьЛидирующимиНулями(пЧисло, КоличествоСимволов) Экспорт
	
	Проверка_Тип(пЧисло, "Число"); 
	Проверка_Тип(КоличествоСимволов, "Число");
	
	ФорматнаяСтрока = 
		СтрШаблон(
			"ЧЦ=%1; ЧВН=; ЧГ=0",
			Формат(КоличествоСимволов, "ЧДЦ=0; ЧГ=0")
			);
	
	Возврат Формат(пЧисло, ФорматнаяСтрока);
	
КонецФункции

Функция ЭтоЗаполненнаяСсылка(пСсылка, пПроверяемыйТип = Неопределено) Экспорт
	
	// Если передан параметр ПроверяемыйТип, проверить, соответствует ли ему ПроверяемоеЗначение
	Если ТипЗнч(пПроверяемыйТип) = Тип("Тип") Тогда 
		ПроверяемоеЗначениеСоответствуетТипу = Проверка_Тип(пСсылка, пПроверяемыйТип, Ложь) = "";
		
		Если Не ПроверяемоеЗначениеСоответствуетТипу Тогда
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоСсылка(пСсылка, Ложь) И ЗначениеЗаполнено(пСсылка);
	
КонецФункции

Функция ЭтоКоллекцияКлючЗначение(пЗначение) Экспорт 
	
	типЗначения = Неопределено;
	Если ТипЗнч(пЗначение) = Тип("Тип") Тогда
		типЗначения = пЗначение;
		
	Иначе
		типЗначения = ТипЗнч(пЗначение);
		
	КонецЕсли;
	
	Возврат
			типЗначения = Тип("Структура") 
		Или	типЗначения = Тип("ФиксированнаяСтруктура") 
		Или типЗначения = Тип("Соответствие") 
		Или типЗначения = Тип("ФиксированноеСоответствие") 
		;

КонецФункции

Функция ЭтоОбработчик(пОбработчикСсылка) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.обм_Переопределяемый_Обработчики.Тип.СодержитТип(ТипЗнч(пОбработчикСсылка));
	
КонецФункции

Функция ЭтоСсылка(пЗначение, пПроверятьМетаданные_ОставленДляСовместимости = Истина) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Тип") Тогда
		Возврат Тип_ЭтоСсылка(пЗначение);	
		
	Иначе
		Возврат Тип_ЭтоСсылка(ТипЗнч(пЗначение));
		
	КонецЕсли;

КонецФункции

Функция ЭтоТестоваяБаза() Экспорт
	
	Возврат общ_Кэш.ЭтоТестоваяБаза();
	
КонецФункции

#Область JSON 

Функция UnJSON(СтрJSON, ПрочитатьВСоответствие = Истина) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрJSON);
	результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();

	Возврат результат;

КонецФункции

Функция JSON(пЗначение, пЭкранироватьСимволы = Истина, Знач пОтступ = "", пКэш = Неопределено) Экспорт
	
	Если ТипЗнч(пКэш) <> Тип("Соответствие") Тогда
		пКэш = Новый Соответствие;
		
	КонецЕсли;
	
	стр = ""; // Значение на возврат
	
	// Поиск в кэше
	значениеВКэше = пКэш[пЗначение];
	Если значениеВКэше <> Неопределено Тогда
		стр = СтрЗаменить(значениеВКэше, Символы.ПС, Символы.ПС + пОтступ);
		Возврат стр;
		
	КонецЕсли;	
	
	отступСледующего = пОтступ + Символы.Таб;
	
	типЗначения = ТипЗнч(пЗначение);

	Если типЗначения = Тип("Строка") Тогда
		Если пЭкранироватьСимволы Тогда
			стр = """" + JSON_ЭкранироватьНедопустимыеСимволы(пЗначение) + """";
			пКэш.Вставить(пЗначение, стр);

		Иначе
			стр = пЗначение;	
			
		КонецЕсли;
		
		стр = СтрЗаменить(стр, Символы.ПС, Символы.ПС + пОтступ);

	ИначеЕсли типЗначения = Тип("Число") ИЛИ ТипЗнч(пЗначение)=Тип("Булево") Тогда
		стр = XMLСтрока(пЗначение);
		пКэш.Вставить(пЗначение, стр);

	ИначеЕсли типЗначения = Тип("Дата") Тогда
		стр= """"+?(ЗначениеЗаполнено(пЗначение),XMLСтрока(пЗначение),"")+"""";
		пКэш.Вставить(пЗначение, стр);

	ИначеЕсли типЗначения = Тип("Массив") Тогда 
		Для Каждого ЭлементМассива Из пЗначение Цикл
			стр = 
				СтрШаблон(
					"%1%2	%3",
					?(ПустаяСтрока(стр), "", стр + ","  + Символы.ПС), // %1 Разделитель элементов, выводить после первого 
					пОтступ, // %2
					JSON(ЭлементМассива, пЭкранироватьСимволы, отступСледующего, пКэш) // %3
					); 
					
		КонецЦикла;
		ЭлементСписка = Неопределено;
		
		Если ПустаяСтрока(стр) Тогда
			стр = пОтступ + "[]";  
			
		Иначе
			стр = 
				СтрШаблон(
					"%2[
					|%1
					|%2	]", 
					стр, // %1
					пОтступ // %2
					);
					
		КонецЕсли;
		
	ИначеЕсли общ.ЭтоКоллекцияКлючЗначение(пЗначение) Тогда 
		стр = общ.Коллекция_ЗаписатьJSONсСортировкой(пЗначение, пКэш);
		
	ИначеЕсли типЗначения = Тип("СписокЗначений") Тогда
		пЗначение.СортироватьПоПредставлению();
		
		Для Каждого элемент Из пЗначение Цикл 
			стрКлюч = СокрЛП(элемент.Представление);
			
			Если ПустаяСтрока(стрКлюч) Тогда
				Продолжить;
				
			КонецЕсли;
			
			значение = JSON(элемент.Значение, пЭкранироватьСимволы, отступСледующего, пКэш);
			
			// Пустые строки
			Если значение = "" Тогда
				значение = """""";
				
			КонецЕсли;

			стр = 
				СтрШаблон(
					"%1%2	""%3"": %4",
					?(ПустаяСтрока(стр), "", стр + ","  + Символы.ПС), // %1 Разделитель элементов, выводить после первого 
					пОтступ, // %2
					стрКлюч, // %3
					значение // %4
					);
					
		КонецЦикла;
		элемент = Неопределено;
		
		Если ПустаяСтрока(стр) Тогда
			стр = пОтступ + "{}";  
			
		Иначе
			стр = 
				СтрШаблон(
					"%2{
					|%1
					|%2	}", 
					стр, // %1
					пОтступ // %2
					);
					
		КонецЕсли;
		
	ИначеЕсли типЗначения = Тип("ТаблицаЗначений") Тогда
		МассивОбразовСтрокТЗ = Новый Массив;
		Для Каждого СтрокаТЗ Из пЗначение Цикл
			ОбразСтрокиТЗ=Новый Структура;
			Для Каждого Колонка Из пЗначение.Колонки Цикл
				ОбразСтрокиТЗ.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя])
				
			КонецЦикла;
			Колонка = Неопределено;
			
			МассивОбразовСтрокТЗ.Добавить(ОбразСтрокиТЗ);
			
		КонецЦикла;
		СтрокаТЗ = Неопределено;
		
		стр = JSON(МассивОбразовСтрокТЗ, пЭкранироватьСимволы, отступСледующего, пКэш);
   
	ИначеЕсли 
			типЗначения = Тип("ТабличныйДокумент")
		Или типЗначения = Тип("ХранилищеЗначения")
		Или типЗначения = Тип("ОписаниеТипов")
		Или типЗначения = Тип("Тип")
	Тогда
		Писатель = Новый ЗаписьJSON;
		Писатель.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьJSON(Писатель, пЗначение, НазначениеТипаXML.Явное);
		стр = Писатель.Закрыть();
		
		Если
				типЗначения = Тип("ОписаниеТипов")
			Или типЗначения = Тип("Тип")
		Тогда
			пКэш.Вставить(пЗначение, стр);
			
		КонецЕсли;
		
	ИначеЕсли пЗначение = Неопределено Или пЗначение = Null Тогда 
		стр = "null";
		пКэш.Вставить(пЗначение, стр);
		
	ИначеЕсли общ.ЭтоСсылка(пЗначение) Тогда
		// Создать краткий образ ссылки без реквизитов, только необходимые для идетнификации ссылки поля
 		образСсылки = общ.Коллекция_ПоСсылке(пЗначение, "__Реквизиты__");
		
		стр = общ.Коллекция_ЗаписатьJSONсСортировкой(образСсылки, пКэш);
		пКэш.Вставить(пЗначение, стр);
		
	ИначеЕсли ТипЗнч(пЗначение) = Тип("УникальныйИдентификатор") Тогда
		стр = СтрШаблон("""%1""", Строка(пЗначение));
		пКэш.Вставить(пЗначение, стр);

	Иначе
		стр = "";
		
	КонецЕсли; 

	Возврат стр;

КонецФункции

Функция JSON_ЭкранироватьНедопустимыеСимволы(пСтр)
	
	Х = пСтр;
	Х=СтрЗаменить(Х,"\","\\");  
	Х=СтрЗаменить(Х,Символ(8),"\b");
	Х=СтрЗаменить(Х,Символы.ПФ,"\f");
	Х=СтрЗаменить(Х,Символы.ПС,"\n");
	Х=СтрЗаменить(Х,Символы.ВК,"\r");
	Х=СтрЗаменить(Х,Символы.ВТаб,"\t");
	Х=СтрЗаменить(Х,"""","\""");
	Х=СтрЗаменить(Х,"/","\/");

	Возврат Х
	
КонецФункции

#КонецОбласти // JSON

#Область RS256 
// Исходный код взят из https://infostart.ru/public/805071/
// Автор uno-c 

// возвращает двоичную подпись
Функция ПодписьSHA256RSA(пДляПодписи, пЗакрытыйКлючPEM) Экспорт
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(пДляПодписи);
	ХешДвоичный = Хеширование.ХешСумма;
		
	ХешХексСтрока = ПолучитьHexСтрокуИзДвоичныхДанных(ХешДвоичный);
	
	// PKCS #1 v2.2: RSA Cryptography Standard, 9.2 EMSA-PKCS1-v1_5
	// перед подписанием хеш дополняется данными
	// EM  = 0x00 || 0x01 ||PS  || 0x00 ||T
	// T SHA-256:  (0x)30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05 00 04 20 || H
	ЕМ = "0001" + "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"+
	"00" + "3031300D060960864801650304020105000420" + ХешХексСтрока; 
	
	ХешХексСтрока = ЕМ;
  	хешчисло = ЧислоИзШестнадцатеричнойСтроки("0x"+ХешХексСтрока);
	
	СтрукСерт = ПолучитьСтруктуруСертификата(пЗакрытыйКлючPEM);	
	dP 			= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.DP);
	p 			= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.P);
	dQ	 		= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.DQ);
	q 			= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.Q);
	qInv 		= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.InverseQ);
	Exponent 	= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.Exponent); //открытый параметр ключа
	Modulus 	= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.Modulus); //открытый параметр ключа
	
	//s1 = pow(хешчисло,DP_Число)% P_Число;//переполнение десятичной арифметики
	
	// ↓ вычисление подписи по ускоренному алгоритму
	s1 = ВозведениеВСтепеньПоМодулю (хешчисло, dP, p);
	s2 = ВозведениеВСтепеньПоМодулю (хешчисло, dQ, q);
	Если s1>s2 Тогда
		h = ((s1-s2)*qInv)%p
	Иначе
		h = ((s1-s2+p)*qInv)%p
	КонецЕсли;
	s = s2 + q*h; //подпись - число
	// ↑
	
	//ПроверкаПодписиЧисло = ВозведениеВСтепеньПоМодулю (s, Exponent, Modulus);
	//подписьВерна = (ПроверкаПодписиЧисло = хешчисло);
	//Сообщить ("Подпись верна:" + подписьВерна); 
	
	Возврат ДвоичныеИзЧисла(s)
	
КонецФункции 

// существует изменённый Base64 для URL, где не используется заполнение символом = 
// и символы + и / соответственно заменяются на * и -
// -------- подошел второй ↓ вариант плюс убраны заполнения символом "=" ----------
// Base64-кодирования URL адресов признается вариант, 
// когда символы + и / заменяются, соответственно, на - и _ (RFC 3548, раздел 4). 
Функция Base64Url(пДвоичныеДанные) Экспорт
	
	бейс64строка = Base64Строка(пДвоичныеДанные);
	бейс64строка = стрЗаменить(бейс64строка, "+", "-");
	бейс64строка = стрЗаменить(бейс64строка, "/", "_");
	бейс64строка = стрЗаменить(бейс64строка, Символы.ВК, "");
	бейс64строка = стрЗаменить(бейс64строка, Символы.ПС, "");
	
	Если Прав(бейс64строка, 2) = "==" Тогда
		бейс64строка = Лев(бейс64строка,СтрДлина(бейс64строка)-2);
		
	ИначеЕсли Прав(бейс64строка, 1) = "=" Тогда
		бейс64строка = Лев(бейс64строка,СтрДлина(бейс64строка)-1);
	КонецЕсли;
	
	Возврат бейс64строка;
	
КонецФункции 

Функция ПолучитьСтруктуруСертификата(пЗакрытыйКлючPEM)

	пЗакрытыйКлючPEM = СтрЗаменить(пЗакрытыйКлючPEM,"-----BEGIN PRIVATE KEY-----","");
	пЗакрытыйКлючPEM = СтрЗаменить(пЗакрытыйКлючPEM,"-----BEGIN RSA PRIVATE KEY-----","");
	пЗакрытыйКлючPEM = СтрЗаменить(пЗакрытыйКлючPEM,"-----END PRIVATE KEY-----","");
	пЗакрытыйКлючPEM = СтрЗаменить(пЗакрытыйКлючPEM,"-----END RSA PRIVATE KEY-----","");
	ХексСтрокаКлюча = ПолучитьHexСтрокуИзДвоичныхДанных(Base64Значение(пЗакрытыйКлючPEM));
	Тэги = Новый Соответствие;
	Тэги.Вставить("30","SEQUENCE");
	Тэги.Вставить("02","INTEGER");
	Тэги.Вставить("06","OBJECT IDENTIFIER");
	Тэги.Вставить("04","OCTET STRING");
	Тэги.Вставить("05","NULL");
	
	ДлинаАдресаОдинБайт = "81";
	ДлинаАдресаДваБайта = "82";
	
	парс = Новый ДеревоЗначений;
	парс.Колонки.Добавить("Класс",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(2)));
	парс.Колонки.Добавить("ИмяКласса",Новый ОписаниеТипов("Строка"));
	парс.Колонки.Добавить("ПредбайтДлины",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(2)));
	парс.Колонки.Добавить("БайтДлины",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(4)));
	парс.Колонки.Добавить("ДлинаЧисло", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	парс.Колонки.Добавить("Значение",Новый ОписаниеТипов("Строка"));
	
	СтрокаOCTET_STRING = Неопределено; //в октетстринг лежит RSAPrivateKey по RFC 3447
	ПарсХекс(парс, ХексСтрокаКлюча, СтрокаOCTET_STRING);
	
	// Для "-----BEGIN RSA PRIVATE KEY-----" OCTET_STRING лежит на верхнем уровне
	Если СтрокаOCTET_STRING = Неопределено Тогда 
		СтрокаOCTET_STRING = парс;	
		
	КонецЕсли;	
	
	RSAPrivateKey_SEQUENCE = СтрокаOCTET_STRING.Строки[0];
	// единственный элемент внутри OCTET_STRING, является RSAPrivateKey ::= SEQUENCE {...
	PKey_SEQUENCE_fields = RSAPrivateKey_SEQUENCE.Строки;
	
	СтруктураСертификата = Новый Структура;
	//PKey_SEQUENCE_fields[0] - version не нужна
	СтруктураСертификата.Вставить("Modulus",	PKey_SEQUENCE_fields[1].Значение);
	СтруктураСертификата.Вставить("Exponent",	PKey_SEQUENCE_fields[2].Значение);
	СтруктураСертификата.Вставить("D",			PKey_SEQUENCE_fields[3].Значение);
	СтруктураСертификата.Вставить("P",			PKey_SEQUENCE_fields[4].Значение);
	СтруктураСертификата.Вставить("Q",			PKey_SEQUENCE_fields[5].Значение);
	СтруктураСертификата.Вставить("DP",			PKey_SEQUENCE_fields[6].Значение);
	СтруктураСертификата.Вставить("DQ",			PKey_SEQUENCE_fields[7].Значение);
	СтруктураСертификата.Вставить("InverseQ",	PKey_SEQUENCE_fields[8].Значение);
	
	Возврат СтруктураСертификата;
	
	//RFC 3447
   // A.1.2 RSA private key syntax

   //An RSA private key should be represented with the ASN.1 Категория
   //RSAPrivateKey:

   //   RSAPrivateKey ::= SEQUENCE {
   //  0     version           Version,
   //  1     modulus           INTEGER,  -- n
   //  2     publicExponent    INTEGER,  -- e
   //  3     privateExponent   INTEGER,  -- d
   //  4     prime1            INTEGER,  -- p
   //  5     prime2            INTEGER,  -- q
   //  6     exponent1         INTEGER,  -- d mod (p-1)
   //  7     exponent2         INTEGER,  -- d mod (q-1)
   //  8     coefficient       INTEGER,  -- (inverse of q) mod p
   //  9     otherPrimeInfos   OtherPrimeInfos OPTIONAL
   //   }

   //The fields of Категория RSAPrivateKey have the following meanings:

   // * version is the version number, for compatibility with future
   //   revisions of this document.  It shall be 0 for this version of the
   //   document, unless multi-prime is used, in which case it shall be 1.

   //         Version ::= INTEGER { two-prime(0), multi(1) }
   //            (CONSTRAINED BY
   //            {-- version must be multi if otherPrimeInfos present --})

   // * modulus is the RSA modulus n.

   // * publicExponent is the RSA public exponent e.

   // * privateExponent is the RSA private exponent d.

   // * prime1 is the prime factor p of n.

   // * prime2 is the prime factor q of n.

   // * exponent1 is d mod (p - 1).

   // * exponent2 is d mod (q - 1).

   // * coefficient is the CRT coefficient q^(-1) mod p.

   // * otherPrimeInfos contains the information for the additional primes
   //   r_3, ..., r_u, in order.  It shall be omitted if version is 0 and
   //   shall contain at least one instance of OtherPrimeInfo if version
   //   is 1.
	
КонецФункции 

Процедура ПарсХекс(Родитель, ХексСтрокаКлюча, СтрокаOCTET_STRING)
	Тэги = Новый Соответствие;
	Тэги.Вставить("30","SEQUENCE");
	Тэги.Вставить("02","INTEGER");
	Тэги.Вставить("06","OBJECT IDENTIFIER");
	Тэги.Вставить("04","OCTET STRING");
	Тэги.Вставить("05","NULL");
	
	Позиция = 1;
	//Родитель = парс;
	Пока Позиция < СтрДлина(ХексСтрокаКлюча) Цикл
		сПарс = Родитель.Строки.Добавить(); 
		сПарс.Класс = Сред(ХексСтрокаКлюча, Позиция, 2);
		Позиция = Позиция + 2;
		сПарс.ИмяКласса = Тэги.Получить(сПарс.Класс);
		
		байт = Сред(ХексСтрокаКлюча, Позиция, 2);
		Если байт = "81" или байт = "82" Тогда
			сПарс.ПредбайтДлины = байт;
			Позиция = Позиция + 2;
			
			КолвоБайтАдресации = Число(байт) - 80;
			сПарс.БайтДлины = Сред(ХексСтрокаКлюча, Позиция, 2 * КолвоБайтАдресации);
			Позиция = Позиция + 2 * КолвоБайтАдресации;
			сПарс.ДлинаЧисло = ЧислоИзШестнадцатеричнойСтроки("0x"+сПарс.БайтДлины);
			
			сПарс.Значение = Сред(ХексСтрокаКлюча, Позиция, 2 * сПарс.ДлинаЧисло);
			Позиция = Позиция + 2 * сПарс.ДлинаЧисло;
			//последнюю позицию сдвинем/несдвинем после Если
			
		Иначе
			сПарс.ПредбайтДлины = ""; //отсутствует
			
			сПарс.БайтДлины = Сред(ХексСтрокаКлюча, Позиция, 2);
			Позиция = Позиция + 2;
			сПарс.ДлинаЧисло = ЧислоИзШестнадцатеричнойСтроки("0x"+сПарс.БайтДлины);
			
			сПарс.Значение = Сред(ХексСтрокаКлюча, Позиция, 2 * сПарс.ДлинаЧисло);
			Позиция = Позиция + 2 * сПарс.ДлинаЧисло;

		КонецЕсли;
		
		Если сПарс.ИмяКласса = "OCTET STRING" Тогда
			СтрокаOCTET_STRING = сПарс;
		КонецЕсли;
		
		Если сПарс.ИмяКласса = "SEQUENCE" или сПарс.ИмяКласса = "OCTET STRING" Тогда
			// эти классы содержат подклассы, разбираем подветки рекурсивно
			ПарсХекс(сПарс, сПарс.Значение, СтрокаOCTET_STRING);
		КонецЕсли;

	КонецЦикла; 
	
	
	
КонецПроцедуры

Функция ВозведениеВСтепеньПоМодулю (Основание, Степень, Модуль)
	
	// Двоичное представление степени переведем в массив нулей и единиц в обратном порядке
	МассивЕдиниц = Новый Массив;
	Значение = Степень;
    Пока Значение>0 цикл
        Остат = Значение%2;
		МассивЕдиниц.Добавить(Остат);
        Значение = (Значение-Остат)/2;
	КонецЦикла;
	
	//Основание переведем в массив по хитрому правилу
	МассивИзОснования = Новый Массив;
	Для сч=0 по МассивЕдиниц.ВГраница() Цикл
		Если сч = 0 тогда
			МассивИзОснования.Добавить(Основание);
		Иначе
			МассивИзОснования.Добавить(ВозведениеВСтепеньБинарное(МассивИзОснования[сч-1],2)%Модуль);
		КонецЕсли;
	КонецЦикла;
	
	//Вычислим произведение степеней 
	таблицаСтепеней = Новый ТаблицаЗначений;
	таблицаСтепеней.Колонки.Добавить("Степень", Новый ОписаниеТипов("Число"));
	Произведение = 1;
	Карацуба = 1;
	Для сч=0 по МассивЕдиниц.ВГраница() Цикл 
		степень = ВозведениеВСтепеньБинарное(МассивИзОснования[сч],МассивЕдиниц[сч]); 
		Произведение = Произведение * степень; 
	КонецЦикла;
	
	остатокДеления = Произведение%Модуль;

	Возврат остатокДеления;
	
КонецФункции  

Функция ВозведениеВСтепеньБинарное (пОснование, пСтепень) Экспорт
	Если пСтепень = 0 Тогда
		Возврат 1;
		
	ИначеЕсли пСтепень % 2 = 1 Тогда
		Возврат ВозведениеВСтепеньБинарное (пОснование, пСтепень-1) * пОснование;
		
	Иначе
		b = ВозведениеВСтепеньБинарное (пОснование, пСтепень/2);
		Возврат b * b; 
		
	КонецЕсли;

КонецФункции

Функция ДвоичныеИзЧисла(знач мЧисло)
	МассивЧиселБайт = Новый Массив;
	Пока мЧисло>0 Цикл
		ТекущийБайт = мЧисло%256;
		МассивЧиселБайт.Добавить(ТекущийБайт);
		мЧисло = (мЧисло - ТекущийБайт)/256;
	КонецЦикла;
	РазмерБайт = МассивЧиселБайт.Количество();
	Буфер = Новый БуферДвоичныхДанных(РазмерБайт);
	Для сч = 0 по РазмерБайт-1 Цикл
		Буфер.Установить(РазмерБайт-1-сч, МассивЧиселБайт[сч]);
	КонецЦикла;

	Возврат ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
КонецФункции

#КонецОбласти // RS256   

// Функции из типовых конфигураций и БСП
#Область Типовые

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Проверяет, что используемая версия платформы не ниже указанной.
//
// Параметры:
//	Версия - Строка - номер версии Платформы
//
// Возвращаемое значение:
//	Булево - Истина, если используемая версия не младше указанной в параметре Версия
//
Функция ВерсияПлатформыНеНижеУказанной(Версия) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат (СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, Версия) >= 0);
	
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
// ОбщегоНазначенияКлиентСервер
// 
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
// 
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	// ИЗ БСП
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Copyright (c) 2023, ООО 1С-Софт
	// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
	// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
	// Текст лицензии доступен по ссылке:
	// https://creativecommons.org/licenses/by/4.0/legalcode
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	
	КлючУникальности   = Новый УникальныйИдентификатор; 
	Попытка
		СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//  
// Из модуля ОбщегоНазначенияКлиентСервер
//
Функция ЗначениеВМассиве(Знач Значение) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  ИмяРеквизита       - Строка - имя получаемого реквизита.
//                                Допускается указание имени реквизита через точку, но при этом параметр КодЯзыка для
//                                такого реквизита учитываться не будет.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то возвращается Неопределено;
//                                если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита. Значение по умолчанию - основной язык конфигурации.
//
// Возвращаемое значение:
//  Произвольный - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено.
//                 Если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//                 то возвращается Неопределено.
//
// Из модуля ОбщегоНазначения
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неверный второй параметр %1 в функции %2: 
				|Имя реквизита должно быть заполнено.'"), "ИмяРеквизита", "ОбщегоНазначения.ЗначениеРеквизитаОбъекта");
	КонецЕсли;
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, "Код, Наименование, Родитель".
//            - Структура
//            - ФиксированнаяСтруктура - в качестве ключа передается
//                       псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                       значения (опционально) фактическое имя поля в таблице.
//                       Если ключ задан, а значение не определено, то имя поля берется из ключа.
//                       Допускается указание имени поля через точку, но при этом параметр КодЯзыка для такого поля
//                       учитываться не будет.
//            - Массив из Строка
//            - ФиксированныйМассив из Строка - имена реквизитов в формате требований к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то все реквизиты вернутся со 
//                                значением Неопределено; если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу 
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита. Значение по умолчанию - основной язык конфигурации.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если в параметр Реквизиты передана пустая строка, то возвращается пустая структура.
//              Если в параметр Ссылка передана пустая ссылка, то возвращается структура, 
//              соответствующая именам реквизитов со значениями Неопределено.
//              Если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//              то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	// Если передано имя предопределенного.
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		
		ПолноеИмяПредопределенногоЭлемента = Ссылка;
		
		// Вычисление ссылки по имени предопределенного.
		// - дополнительно выполняет проверку метаданных предопределенного, выполняется предварительно.
		Попытка
			Ссылка = ПредопределенноеЗначение(ПолноеИмяПредопределенногоЭлемента);
		Исключение
			ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Неверный первый параметр %1 в функции %2:
				|%3'"), "Ссылка", "ОбщегоНазначения.ЗначенияРеквизитовОбъекта", 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		// Разбор полного имени предопределенного.
		ЧастиПолногоИмени = СтрРазделить(ПолноеИмяПредопределенногоЭлемента, ".");
		ПолноеИмяОбъектаМетаданных = ЧастиПолногоИмени[0] + "." + ЧастиПолногоИмени[1];
		
		// Если предопределенный не создан в ИБ, то требуется выполнить проверку доступа к объекту.
		// В других сценариях проверка доступа выполняется в момент исполнения запроса.
		Если Ссылка = Неопределено Тогда 
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда 
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Недостаточно прав для работы с таблицей ""%1""'"), ПолноеИмяОбъектаМетаданных);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли общ.ЭтоЗаполненнаяСсылка(Ссылка) Тогда // Если передана ссылка.
		
		Попытка
			ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя(); 
		Исключение
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неверный первый параметр %1 в функции %2: 
					|Значение должно быть ссылкой или именем предопределенного элемента.'"), 
				"Ссылка", "ОбщегоНазначения.ЗначенияРеквизитовОбъекта");
			КонецПопытки;
			
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Разбор реквизитов, если второй параметр Строка.
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
		Для Индекс = 0 По Реквизиты.ВГраница() Цикл
			Реквизиты[Индекс] = СокрЛП(Реквизиты[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	МультиязычныеРеквизиты = Новый Соответствие;
	СуффиксЯзыка = "";
	
	// Приведение реквизитов к единому формату.
	СтруктураПолей = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			СтруктураПолей.Вставить(КлючИЗначение.Ключ, СокрЛП(КлючИЗначение.Значение));
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Реквизит Из Реквизиты Цикл
			Реквизит = СокрЛП(Реквизит);
			Попытка
				ПсевдонимПоля = СтрЗаменить(Реквизит, ".", "");
				СтруктураПолей.Вставить(ПсевдонимПоля, Реквизит);
			Исключение 
				// Если псевдоним не является ключом.
				
				// Поиск ошибки доступности полей.
				Результат = НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
				Если Результат.Ошибка Тогда 
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неверный второй параметр %1 в функции %2: %3'"),
						"Реквизиты", "ОбщегоНазначения.ЗначенияРеквизитовОбъекта", Результат.ОписаниеОшибки);
				КонецЕсли;
				
				// Не удалось распознать ошибку, проброс первичной ошибки.
				ВызватьИсключение;
			
			КонецПопытки;
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неверный тип второго параметра %1 в функции %2: %3.'"), 
			"Реквизиты", "ОбщегоНазначения.ЗначенияРеквизитовОбъекта", Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	// Подготовка результата (после выполнения запроса переопределится).
	Результат = Новый Структура;
	
	// Формирование текста запроса к выбираемым полям.
	ТекстЗапросаПолей = "";
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		
		ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
		ПсевдонимПоля = КлючИЗначение.Ключ;
		
		Если МультиязычныеРеквизиты[ИмяПоля] <> Неопределено Тогда
			ИмяПоля = ИмяПоля + СуффиксЯзыка;
		КонецЕсли;
		
		ТекстЗапросаПолей = 
			ТекстЗапросаПолей + ?(ПустаяСтрока(ТекстЗапросаПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + ПсевдонимПоля;
		
		// Предварительное добавление поля по псевдониму в возвращаемый результат.
		Результат.Вставить(ПсевдонимПоля);
		
	КонецЦикла;
	
	// Если предопределенного нет в ИБ.
	// - приведение результата к отсутствию объекта в ИБ или передаче пустой ссылки.
	Если Ссылка = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Если Тип("Структура") = ТипЗнч(Реквизиты)
		Или Тип("ФиксированнаяСтруктура") = ТипЗнч(Реквизиты) Тогда
		Реквизиты = Новый Массив;
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
			Реквизиты.Добавить(ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Массив;
	Для Индекс = -Реквизиты.ВГраница() По 0 Цикл
		ИмяПоля = Реквизиты[-Индекс];
		Если СтрНайти(ИмяПоля, ".") Тогда
			РеквизитыЧерезТочку.Добавить(ИмяПоля);
			Реквизиты.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		ЗначенияРеквизитовОбъекта = ЗначенияРеквизитовОбъектов(общ.ЗначениеВМассиве(Ссылка), Реквизиты, ВыбратьРазрешенные, КодЯзыка)[Ссылка];
		Если ЗначенияРеквизитовОбъекта <> Неопределено Тогда
			Для Каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Если СтрНайти(ИмяПоля, ".") = 0 И ЗначенияРеквизитовОбъекта.Свойство(ИмяПоля) Тогда
					Результат[КлючИЗначение.Ключ] = ЗначенияРеквизитовОбъекта[ИмяПоля];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыЧерезТочку) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Реквизиты = РеквизитыЧерезТочку;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|&ТекстЗапросаПолей
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка";
	
	Если Не ВыбратьРазрешенные Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", ""); // @Query-part-1
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПолей", ТекстЗапросаПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
	
	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		
		// Если реквизиты были переданы строкой, то они уже конвертированы в массив.
		// Если реквизиты - массив, оставляем без изменений.
		// Если реквизиты - структура - конвертируем в массив.
		// В остальных случаях уже было бы выброшено исключение.
		Если Тип("Структура") = ТипЗнч(Реквизиты)
			Или Тип("ФиксированнаяСтруктура") = ТипЗнч(Реквизиты) Тогда
			Реквизиты = Новый Массив;
			Для каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Реквизиты.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли;
		
		// Поиск ошибки доступности полей.
		Результат = НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
		Если Результат.Ошибка Тогда 
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неверный второй параметр %1 в функции %2: %3'"), 
				"Реквизиты", "ОбщегоНазначения.ЗначенияРеквизитовОбъекта", Результат.ОписаниеОшибки);
		КонецЕсли;
		
		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Заполнение реквизитов.
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения реквизитов, прочитанные из информационной базы для нескольких объектов.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылки - Массив из ЛюбаяСсылка
//         - ФиксированныйМассив из ЛюбаяСсылка - ссылки на объекты.
//           Если массив пуст, то результатом будет пустое соответствие.
//  Реквизиты - Строка - имена реквизитов перечисленные через запятую, в формате требований к свойствам
//                       структуры. Например, "Код, Наименование, Родитель".
//            - Массив из Строка
//            - ФиксированныйМассив из Строка - имена реквизитов в формате требований к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя;
//                                если какой-либо объект будет исключен из выборки по правам, то этот объект
//                                будет исключен и из результата;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита. Значение по умолчанию - основной язык конфигурации.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - список объектов и значений их реквизитов:
//   * Ключ - ЛюбаяСсылка - ссылка на объект;
//   * Значение - Структура:
//    ** Ключ - Строка - имя реквизита;
//    ** Значение - Произвольный - значение реквизита.
// 
// Из модуля ОбщегоНазанчения
//
Функция ЗначенияРеквизитовОбъектов(Ссылки, Знач Реквизиты, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Реквизиты = СтрСоединить(Реквизиты, ",");
	КонецЕсли;
	
	Если ПустаяСтрока(Реквизиты) Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неверный второй параметр %1 в функции %2: 
				|Поле объекта должно быть указано.'"), "Реквизиты", "ОбщегоНазначения.ЗначенияРеквизитовОбъектов");
	КонецЕсли;
	
	Если СтрНайти(Реквизиты, ".") <> 0 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неверный второй параметр %1 в функции %2: 
				|Обращение через точку не поддерживается.'"), "Реквизиты", "ОбщегоНазначения.ЗначенияРеквизитовОбъектов");
	КонецЕсли;
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если Ссылки.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		КодЯзыка = СтрРазделить(КодЯзыка, "_", Истина)[0];
	КонецЕсли;
	
	РеквизитыТекстЗапроса = Реквизиты;
	
	СсылкиПоТипам = Новый Соответствие;
	Для Каждого Ссылка Из Ссылки Цикл
		Тип = ТипЗнч(Ссылка);
		Если СсылкиПоТипам[Тип] = Неопределено Тогда
			СсылкиПоТипам[Тип] = Новый Массив;
		КонецЕсли;
		ЭлементПоТипу = СсылкиПоТипам[Тип]; // Массив
		ЭлементПоТипу.Добавить(Ссылка);
	КонецЦикла;
	
	ТекстыЗапросов = Новый Массив;
	ПараметрыЗапроса = Новый Структура;
	
	ИменаОбъектовМетаданных = Новый Массив;
	
	Для Каждого СсылкиПоТипу Из СсылкиПоТипам Цикл
		Тип = СсылкиПоТипу.Ключ;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неверный первый параметр %1 в функции %2: 
					|Значения массива должны быть ссылками.'"), "Ссылки", "ОбщегоНазначения.ЗначенияРеквизитовОбъектов");
		КонецЕсли;
		
		ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		ИменаОбъектовМетаданных.Добавить(ПолноеИмяОбъектаМетаданных);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка,
			|	&Реквизиты
			|ИЗ
			|	&ПолноеИмяОбъектаМетаданных КАК ПсевдонимЗаданнойТаблицы
			|ГДЕ
			|	ПсевдонимЗаданнойТаблицы.Ссылка В (&Ссылки)";
		Если Не ВыбратьРазрешенные Или ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", ""); // @Query-part-1
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизиты", РеквизитыТекстЗапроса);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
		ИмяПараметра = "Ссылки" + СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылки", "&" + ИмяПараметра); // @Query-part-1
		ПараметрыЗапроса.Вставить(ИмяПараметра, СсылкиПоТипу.Значение);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КодЯзыка", КодЯзыка);
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		
		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, " ", "");
		// Преобразование параметра в массив полей.
		Реквизиты = СтрРазделить(Реквизиты, ",");
		
		// Поиск ошибки доступности полей.
		СписокОшибок = Новый Массив;
		Для Каждого ПолноеИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
			Результат = НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
			Если Результат.Ошибка Тогда 
				СписокОшибок.Добавить(Результат.ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СписокОшибок) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неверный второй параметр %1 в функции %2: %3'"), 
				"Реквизиты", "ОбщегоНазначения.ЗначенияРеквизитовОбъектов", СтрСоединить(СписокОшибок, Символы.ПС));
		КонецЕсли;
		
		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
		
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(Реквизиты);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
		
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Возвращает код основного языка информационной базы, например "ru".
// На котором программно записываются автогенерируемые строки в информационную базу.
// Например, при начальном заполнении информационной базы данными из макета, автогенерации комментария
// к проводке или определении значения параметра ИмяСобытия метода ЗаписьЖурналаРегистрации.
//
// Возвращаемое значение:
//  Строка
//
// Из модуля ОбщегоНазанчения
//
Функция КодОсновногоЯзыка() Экспорт

	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
	
КонецФункции

// Выполняет поиск проверяемых выражений среди реквизитов объекта метаданных.
// 
// Параметры:
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя проверяемого объекта.
//  ПроверяемыеВыражения       - Массив - имена полей или проверяемые выражения объекта метаданных.
// 
// Возвращаемое значение:
//  Структура:
//   * Ошибка         - Булево - найдена ошибка.
//   * ОписаниеОшибки - Строка - описание найденных ошибок.
//
// Пример:
//  
// Реквизиты = Новый Массив;
// Реквизиты.Добавить("Номер");
// Реквизиты.Добавить("Валюта.НаименованиеПолное");
//
// Результат = ОбщегоНазначения.НайтиОшибкуДоступностиРеквизитовОбъекта("Документ._ДемоЗаказПокупателя", Реквизиты);
//
// Если Результат.Ошибка Тогда
//     ВызватьИсключение Результат.ОписаниеОшибки;
// КонецЕсли;
//
// Из модуля ОбщегоНазанчения
// 
Функция НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, ПроверяемыеВыражения)
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если МетаданныеОбъекта = Неопределено Тогда 
		Возврат Новый Структура("Ошибка, ОписаниеОшибки", Истина, 
			СтрШаблон(
				НСтр("ru = 'Ошибка получения метаданных ""%1"".'"), ПолноеИмяОбъектаМетаданных));
	КонецЕсли;

	// Разрешение вызова из безопасного режима внешней обработки или расширения.
	// Информация о доступности полей источника схемы при проверке метаданных не является секретной.
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Схема = Новый СхемаЗапроса;
	Пакет = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Пакет.Операторы.Получить(0);
	
	Источник = Оператор.Источники.Добавить(ПолноеИмяОбъектаМетаданных, "Таблица");
	ТекстОшибки = "";
	
	Для Каждого ТекущееВыражение Из ПроверяемыеВыражения Цикл
		
		Если Не ПолеИсточникаСхемыЗапросаДоступно(Источник, ТекущееВыражение) Тогда 
			ТекстОшибки = 
				ТекстОшибки + Символы.ПС + 
				СтрШаблон(
					НСтр("ru = 'Поле объекта ""%1"" не существует.'"), ТекущееВыражение
					);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Новый Структура("Ошибка, ОписаниеОшибки", Не ПустаяСтрока(ТекстОшибки), ТекстОшибки);
	
КонецФункции 

// Используется в НайтиОшибкуДоступностиРеквизитовОбъекта.
// Выполняет проверку доступности поля проверяемого выражения в источнике оператора схемы запроса.
//
// Из модуля ОбщегоНазанчения
//
Функция ПолеИсточникаСхемыЗапросаДоступно(ИсточникОператора, ПроверяемоеВыражение)
	
	ЧастиИмениПоля = СтрРазделить(ПроверяемоеВыражение, ".");
	ДоступныеПоля = ИсточникОператора.Источник.ДоступныеПоля;
	
	ТекущаяЧастьИмениПоля = 0;
	Пока ТекущаяЧастьИмениПоля < ЧастиИмениПоля.Количество() Цикл 
		
		ТекущееПоле = ДоступныеПоля.Найти(ЧастиИмениПоля.Получить(ТекущаяЧастьИмениПоля)); 
		
		Если ТекущееПоле = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		// Инкрементация следующей части имени поля и соответствующего списка доступности полей.
		ТекущаяЧастьИмениПоля = ТекущаяЧастьИмениПоля + 1;
		ДоступныеПоля = ТекущееПоле.Поля;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолноеИмяНеУказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

// Из модуля ОбщегоНазначения
Функция СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
	
	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Приемник = СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		Приемник = СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		Приемник = СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

Функция СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда 
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные)
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда 
		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция СкопироватьМассив(МассивИсточник, ФиксироватьДанные)
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда 
		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция СкопироватьСписокЗначений(СписокИсточник, ФиксироватьДанные)
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение, ФиксироватьДанные), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

// Определяет смещение времени сервера относительно времени программы.
//
// Возвращаемое значение:
//   Число - смещение времени в секундах.
//       Может использоваться для приведения фильтров, применяемых к журналу, к дате сервера,
//       а также для приведения дат, полученных из журнала, к датам программы.
//
// Из модуля ЖурналРегистрации
//
Функция СмещениеВремениСервера() Экспорт
	
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса(); // АПК:143 Требуется дата компьютера
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;
	Возврат СмещениеВремениСервера;
	
КонецФункции

// Из модуля ОбщегоНазначенияСлужебныйКлиентСервер
Функция СообщениеПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Отказ = Истина;
	
	Возврат Сообщение;
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом управления формы.
// В фоновом задании длительной операции отправляет сообщение сразу на клиент,
// если подключена система взаимодействия.
//
// АПК:142-выкл 4 необязательных параметра для совместимости 
// с устаревшей процедурой ОбщегоНазначенияКлиентСервер.СообщитьПользователю.
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле - Строка - наименование реквизита формы.
//  ПутьКДанным - Строка - путь к данным (путь к реквизиту формы).
//  Отказ - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ПолеВРеквизитеФормыОбъект",
//   "Объект");
//
//  Альтернативный вариант использования в форме объекта:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимого.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
// Из модуля ОбщегоНазначения
//
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено,	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь) Экспорт
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	Сообщение = 
		общ.СообщениеПользователю(
			ТекстСообщенияПользователю,
			КлючДанных, 
			Поле, 
			ПутьКДанным, 
			Отказ, 
			ЭтоОбъект
			);
		
	Сообщение.Сообщить();

КонецПроцедуры

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра %1: %2", "СтрокаВерсии1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра %1: %2", "СтрокаВерсии2", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсииБезНомераСборки(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра %1: %2'", "СтрокаВерсии1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон("Неправильный формат параметра %1: %2", "СтрокаВерсии2", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 2 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти  // Типовые


