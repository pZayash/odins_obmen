#Область ВнешнийИнтерфейс 

#Область Отправка

Функция ОбразОбъекта_СоздатьВФорматеОбмАльфа(пИсточник) Экспорт

	образ = общ.СсылкаВКоллекцию(пИсточник);
	общ.Коллекция_РазвернутьСсылки(образ, 2);
	обм.Послание_ПодписатьМетаданными(образ);
	
	образ.Вставить("_Формат", обм_лит.ФорматОбмАльфа());

	Возврат Образ_ПривестиКСтроке(образ); 
	
КонецФункции 

Функция Отправить_HTTP_POST(пСообщение, пПараметры, пРезультат = Неопределено) 
	
	имяСобытия = ИмяСобытияЖурналаРегистрации("Отправка.Отправить_HTTP_POST");
	
	Попытка
		кодСостояния = 501; // Не выполнено 
		
		адресРесурса = общ.ЗначениеПоПути(пПараметры, "АдресРесурса");
		
		Если Не ЗначениеЗаполнено(адресРесурса) Тогда 
			кодСостояния = 422; // 422 Unprocessable Entity
			Возврат кодСостояния;
			
		КонецЕсли;
		
		заголовки = Новый Соответствие;
		заголовки.Вставить("Content-Charset", "utf-8");
		заголовки.Вставить("Content-Type", "text/plain; charset=utf-8"); 

		// Добавить в заголовки элементы, если они переданы в параметрах
		пЗаголовки = общ.ЗначениеПоПути(пПараметры, "Заголовки");
		Если общ.ЭтоКоллекцияКлючЗначение(пЗаголовки) Тогда
			Для Каждого пара из пЗаголовки Цикл
				заголовки.Вставить(пара.Ключ, пара.Значение);
				
			КонецЦикла;
			пара = Неопределено;
			
		КонецЕсли;
		
		запрос = Новый HTTPЗапрос(адресРесурса, заголовки);
		
		// Сформировать сообщение
		стрСообщение = "";
		Если 
				общ.ЭтоКоллекцияКлючЗначение(пСообщение)
			Или общ.ЭтоСсылка(пСообщение)
		Тогда
			стрСообщение = общ.JSON(пСообщение);
			заголовки.Вставить("Content-Type", "application/json");	

		ИначеЕсли ТипЗнч(пСообщение) = Тип("Строка") Тогда
			стрСообщение = пСообщение;
			
		Иначе
			стрСообщение = Строка(пСообщение);
			
		КонецЕсли;
		
		запрос.УстановитьТелоИзСтроки(стрСообщение, КодировкаТекста.UTF8);
		
		сервер = общ.ЗначениеПоПути(пПараметры, "Сервер");

		соединение = Новый HTTPСоединение(сервер);
		ЗаполнитьЗначенияСвойств(соединение, пПараметры);

		ответ = соединение.ВызватьHTTPМетод("POST", запрос);

		// Получить тело ответа из временного файла
		кодировка = КодировкаТекста.UTF8; // Кодировка по умолчанию
			 
		// Если в заголовка ответа есть свойство "Content-Encoding", то из него получить кодировку
		Если ответ.Заголовки.Получить("Content-Encoding") = "ANSI" Тогда
			кодировка = "windows-1251"; // указывать кодировку явно, на linux сервере кодировка ANSI не 1251

		КонецЕсли;

		пРезультат = ответ.ПолучитьТелоКакСтроку(); 
		 
		ЗаписьЖурналаРегистрации(
			имяСобытия,
			?(КодСостояния = 200, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка),
			, // Объект метаданныех
			, // Данные
			пРезультат, // Комментарий
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
	 
 	Исключение
		КодСостояния = 500; // Внутренняя ошибка сервера
	 
		пРезультат = ИнформацияОбОшибке();
		стрОбОшибке = общ.Ошибка_ПодробноеПредставление(пРезультат);

		ЗаписьЖурналаРегистрации(
			имяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			, // Объект метаданныех
			, // Данные
			стрОбОшибке, // Комментарий
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
			
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти // Отправка

#Область Получение

// Обработать все необработанные запросы
Процедура Получение_ОбработатьОчередь(пИзвлечьПакетыДанных = Истина, пОбработатьПакетыДанных = Истина) Экспорт

	// 0. Запрос поиска входящих запросов в определенном статусе
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
	|	Т.ВходящееСообщение КАК Ссылка
	|ИЗ
	|	РегистрСведений.обм_ВходящиеСообщения_Статусы.СрезПоследних(&ТекущаяДата, ) КАК Т
	|ГДЕ
	|	Т.Статус В(&СтатусДляПоиска)
	|	И НЕ Т.ВходящееСообщение.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Период"; 

	Пока Истина Цикл
		счетчик = 0;
		
		// 1. Сначала найти все входящие запросы в статусе "Ждет обработки" и завершить их обработку
		Если пОбработатьПакетыДанных Тогда
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			Запрос.УстановитьПараметр("СтатусДляПоиска", Перечисления.обм_ВходящиеСообщения_Статусы.ЖдетОбработки);
			входящиеСообщения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

			Справочники.обм_ВходящиеСообщения.ДанныеЗаполнения_Обработать(входящиеСообщения);
			
			счетчик = счетчик + входящиеСообщения.Количество();
			
		КонецЕсли;
		
		// 2. Найти все входящие запросы в статусе "Получен" и обработать их
		Если пИзвлечьПакетыДанных Тогда
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			Запрос.УстановитьПараметр("СтатусДляПоиска", Перечисления.обм_ВходящиеСообщения_Статусы.Получен);
			входящиеСообщения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Справочники.обм_ВходящиеСообщения.ПакетыДанных_Извлечь(входящиеСообщения);
			
			счетчик = счетчик + входящиеСообщения.Количество(); 
			
		КонецЕсли;
		
		Если счетчик = 0 Тогда
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла; // Пока Истина Цикл
	
	
КонецПроцедуры

Процедура Получение_ФоновоеЗадание() Экспорт
	
	Ключ = Метаданные.РегламентныеЗадания.обм_Получение_ОбработатьДанныеЗаполнения.Ключ;
	Наименование = Метаданные.РегламентныеЗадания.обм_Получение_ОбработатьДанныеЗаполнения.Наименование;
	
	Если общ.ИнформационнаяБаза_Файловая() Тогда
		Получение_ОбработатьОчередь();
		Возврат;
		
	КонецЕсли;
	
	Активно = Ложь;
	Для Каждого ФЗ Из ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ",Ключ)) Цикл 
		Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
			Активно = Истина; Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;
	ФЗ = Неопределено;
	
	Если Не Активно Тогда 
		ФоновыеЗадания.Выполнить(
			"обм.Получение_ОбработатьОчередь", // ИмяМетода
			Новый Массив, // Параметры
			Ключ, // Ключ
			Наименование // Наименование
			);
		
	КонецЕсли;	
	 	 	
КонецПроцедуры	

// Обертка функций модуля менеджера справочника обм_ВходящиеСообщения, 
// чтобы их можно было вызывать с клиента 
#Область ВходящиеСообщения_ИнтерфейсДляКлиента

Функция ВходящееСообщение_Параметр_Значение(пВходящееСообщениеСсылка, КлючПараметра) Экспорт
	
	Возврат Справочники.обм_ВходящиеСообщения.Параметр_Значение(пВходящееСообщениеСсылка, КлючПараметра);
	
КонецФункции  

Функция ВходящееСообщение_СсылкаПоHTTPСервисОтвет(пHTTPОтветОЗаписиЗапроса) Экспорт

	#Если ВнешнееСоединение Тогда
		Возврат Неопределено;
		
	#Иначе
		общ.Проверка_Тип(пHTTPОтветОЗаписиЗапроса, Тип("HTTPСервисОтвет"));
		
	#КонецЕсли
	
	Если пHTTPОтветОЗаписиЗапроса.КодСостояния <> 200 Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Тело ответа содержит:
		//ТекстОтвета = 
		//	СтрШаблон(
		//		"{""Status"":""RequestReceived"",
		//		|""Tiket"":""%1""
		//		|}",
		//		Строка(ВходящийЗапрос_Объект.Ссылка.УникальныйИдентификатор())
		//		);
	// см. функцию Запрос_Записать
	
	стрОтвет = пHTTPОтветОЗаписиЗапроса.ПолучитьТелоКакСтроку();
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(стрОтвет);
		соотвРезультат = ПрочитатьJSON(ЧтениеJSON, Истина); // Прочитать в соответствие
		ЧтениеJSON.Закрыть();
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если ТипЗнч(соотвРезультат) <> Тип("Соответствие") Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	стрИД = соотвРезультат["Tiket"];
	
	Если стрИД = Неопределено Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Справочники.обм_ВходящиеСообщения.ПолучитьСсылку(Новый УникальныйИдентификатор(стрИД));
		
КонецФункции

Функция ВходящееСообщение_ОшибкаИзHTTPСервисОтвет(пHTTPОтветОЗаписиЗапроса) Экспорт
	
	#Если ВнешнееСоединение Тогда
		Возврат Неопределено;
		
	#Иначе
		общ.Проверка_Тип(пHTTPОтветОЗаписиЗапроса, Тип("HTTPСервисОтвет"));
		
	#КонецЕсли
	
	// 200 значит нет ошибки
	Если пHTTPОтветОЗаписиЗапроса.КодСостояния = 200 Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Тело ответа содержит:
		//ТекстОтвета = 
			//СтрШаблон(
			//	"{""Error"":""%1""}",
			//	КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) // %1
			//	);
	// см. функцию Запрос_Записать
	
	стрОтвет = пHTTPОтветОЗаписиЗапроса.ПолучитьТелоКакСтроку();
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(стрОтвет);
		соотвРезультат = ПрочитатьJSON(ЧтениеJSON, Истина); // Прочитать в соответствие
		ЧтениеJSON.Закрыть();
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если ТипЗнч(соотвРезультат) <> Тип("Соответствие") Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	обОшибке = соотвРезультат["Error"];
	
	Если обОшибке = Неопределено Или ПустаяСтрока(обОшибке) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат обОшибке;
		
КонецФункции

Функция ВходящееСообщение_Создать(пHTTPСервисЗапрос, пНаименованиеЗапроса = Неопределено, пОбрабатыватьРегламентнымЗаданием = Истина) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	имяСобытия = ИмяСобытияЖурналаРегистрации("Получение.ВходящееСообщение_Создать");
	
	HTTPСервисЗапрос_ЗарегестрироватьВЖурнале(имяСобытия, пHTTPСервисЗапрос);
	
	КодОтвета = 400;
	ТекстОтвета = "";
	
	Попытка
		ВходящееСообщение_Объект = Справочники.обм_ВходящиеСообщения.СоздатьЭлемент();
		СсылкаНового = Справочники.обм_ВходящиеСообщения.ПолучитьСсылку();
		ВходящееСообщение_Объект.ДополнительныеСвойства.Вставить("СсылкаНового", СсылкаНового);
		ВходящееСообщение_Объект.УстановитьСсылкуНового(СсылкаНового);
				
		Если Не ПустаяСтрока(пНаименованиеЗапроса) Тогда
			ВходящееСообщение_Объект.Наименование = СокрЛП(пНаименованиеЗапроса);
			
		Иначе
			ВходящееСообщение_Объект.Наименование = Строка(ТипЗнч(пHTTPСервисЗапрос));
			
		КонецЕсли;
		ВходящееСообщение_Объект.Наименование = ВходящееСообщение_Объект.Наименование + " " + Строка(СсылкаНового.УникальныйИдентификатор());

		ВходящееСообщение_Объект.ДатаВремя = общ_Сервер.ТекущаяДатаНаСервере();
		ВходящееСообщение_Объект.Запрос = пHTTPСервисЗапрос.ПолучитьТелоКакСтроку();
		
		ЗаполнитьЗначенияСвойств(ВходящееСообщение_Объект, пHTTPСервисЗапрос);
		
		Для Каждого КлючИЗначение Из пHTTPСервисЗапрос.ПараметрыURL Цикл
			тчПараметры_Строка = ВходящееСообщение_Объект.Параметры.Добавить();
			тчПараметры_Строка.Ключ = КлючИЗначение.Ключ;
			тчПараметры_Строка.Значение = КлючИЗначение.Значение;
			тчПараметры_Строка.ИсточникПараметра = Перечисления.обм_ВходящиеСообщения_ИсточникиПараметров.URL;
			
		КонецЦикла;
		КлючИЗначение = Неопределено;
		
		Для Каждого КлючИЗначение Из пHTTPСервисЗапрос.ПараметрыЗапроса Цикл
			тчПараметры_Строка = ВходящееСообщение_Объект.Параметры.Добавить();
			тчПараметры_Строка.Ключ = КлючИЗначение.Ключ;
			тчПараметры_Строка.Значение = КлючИЗначение.Значение;
			тчПараметры_Строка.ИсточникПараметра = Перечисления.обм_ВходящиеСообщения_ИсточникиПараметров.Запрос;
			
		КонецЦикла;
		
		// Добавить текущего пользователя
		тчПараметры_Строка = ВходящееСообщение_Объект.Параметры.Добавить();
		тчПараметры_Строка.Ключ = "ТекущийПользователь_Имя";
		тчПараметры_Строка.Значение = ТекущийПользователь_Имя();
		тчПараметры_Строка.ИсточникПараметра = Перечисления.обм_ВходящиеСообщения_ИсточникиПараметров.КонтекстБД;
		
		Если ТипЗнч(пНаименованиеЗапроса) = Тип("Строка") И ЗначениеЗаполнено(пНаименованиеЗапроса) Тогда
			тчПараметры_Строка = ВходящееСообщение_Объект.Параметры.Добавить();
			тчПараметры_Строка.Ключ = "Метод";
			тчПараметры_Строка.Значение = пНаименованиеЗапроса;
			тчПараметры_Строка.ИсточникПараметра = Перечисления.обм_ВходящиеСообщения_ИсточникиПараметров.КонтекстБД;
			
		ИначеЕсли ТипЗнч(пНаименованиеЗапроса) = Тип("Структура") Тогда
			Для Каждого Пара Из пНаименованиеЗапроса Цикл
				тчПараметры_Строка = ВходящееСообщение_Объект.Параметры.Добавить();
				тчПараметры_Строка.Ключ = Пара.Ключ;
				тчПараметры_Строка.Значение = Пара.Значение;
				тчПараметры_Строка.ИсточникПараметра = Перечисления.обм_ВходящиеСообщения_ИсточникиПараметров.КонтекстБД;
				
			КонецЦикла;
			Пара = Неопределено;
			
		КонецЕсли;

		Для Каждого КлючИЗначение Из пHTTPСервисЗапрос.Заголовки Цикл
			
			// Данные авторизации не фиксировать
			Если НРег(КлючИЗначение.Ключ) = "authorization" Тогда
				Продолжить;
				
			КонецЕсли;

			тчПараметры_Строка = ВходящееСообщение_Объект.Параметры.Добавить();
			тчПараметры_Строка.Ключ = КлючИЗначение.Ключ;
			тчПараметры_Строка.Значение = КлючИЗначение.Значение;
			тчПараметры_Строка.ИсточникПараметра = Перечисления.обм_ВходящиеСообщения_ИсточникиПараметров.ЗаголовокHTTP;
			
		КонецЦикла;
		КлючИЗначение = Неопределено; 

		// Чтобы запрос не обрабатывался регламентным заданием, пометить его на удаление
		// см. Получение_ОбработатьОчередь
		Если Не пОбрабатыватьРегламентнымЗаданием Тогда
			ВходящееСообщение_Объект.ПометкаУдаления = Истина;
			
		КонецЕсли;
		
		ВходящееСообщение_Объект.Параметры.Сортировать("Ключ");
		
		ВходящееСообщение_Объект.Записать();
		
		КодОтвета = 200;
		ТекстОтвета = 
			СтрШаблон(
				"{""Status"":""RequestReceived"",
				|""Tiket"":""%1""
				|}",
				Строка(ВходящееСообщение_Объект.Ссылка.УникальныйИдентификатор())
				);
		
	Исключение
		КодОтвета = 500;
		ТекстОтвета = 
			СтрШаблон(
				"{""Error"":""%1""}",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) // %1
				);
				
		стрОШибки = общ.Ошибка_ПодробноеПредставление(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации("Получение.ВходящееСообщение_Создать"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.обм, // Объект метаданных
			, // Данные
			стрОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);		
		
	КонецПопытки;
	
	#Если ВнешнееСоединение Тогда
		Ответ = ТекстОтвета;
		
	#Иначе
		Ответ = Новый HTTPСервисОтвет(КодОтвета);
		Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(ТекстОтвета); 
		
	#КонецЕсли
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

Функция ВходящееСообщение_СоздатьЧерезHTTPЗапросЭмуляция(
		URI, пДанные, ПараметрыЗапроса = Неопределено, НаименованиеЗапроса = Неопределено, ОбрабатыватьСразу = Ложь) Экспорт
	
	общ.Проверка_Тип(ПараметрыЗапроса, "Структура, Соответствие, Неопределено");
	
	httpЗапросЭмуляция = Обработки.обм_HTTPЗапросЭмуляция.Создать();
	
	httpЗапросЭмуляция.HTTPМетод = "POST";
	
	httpЗапросЭмуляция.БазовыйURL = "emul://" + URI;
	httpЗапросЭмуляция.ОтносительныйURL = URI;

	Если ТипЗнч(пДанные) = Тип("Строка") Тогда
		httpЗапросЭмуляция.Тело = пДанные;
		
	ИначеЕсли ТипЗнч(пДанные) = Тип("ДвоичныеДанные") Тогда
		httpЗапросЭмуляция.Тело = Base64Строка(пДанные);

	ИначеЕсли ТипЗнч(пДанные) = Тип("Массив") Или ТипЗнч(пДанные) = Тип("Структура") Или ТипЗнч(пДанные) = Тип("Соответствие") Тогда
		httpЗапросЭмуляция.Тело = Общ.JSON(пДанные);	
		
	Иначе
		httpЗапросЭмуляция.Тело = Строка(пДанные);
		
	КонецЕсли;

	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Пара Из ПараметрыЗапроса Цикл
			httpЗапросЭмуляция.ПараметрыЗапроса.Вставить(Пара.Ключ, Пара.Значение);
			
		КонецЦикла;
		Пара = Неопределено;
		
	КонецЕсли;	

	// Для предотвращения конфликта между регламентым заданием и обработкой при загрузке пользователем из формы
	// Запретить обработку регламентным заданием
	ОбрабатыватьРегламентымЗаданием = Не ОбрабатыватьСразу;
	ответОЗаписиЗапроса = ВходящееСообщение_Создать(httpЗапросЭмуляция, НаименованиеЗапроса, ОбрабатыватьРегламентымЗаданием); 
	
	Если ответОЗаписиЗапроса.КодСостояния = 200 И ОбрабатыватьСразу Тогда
		
		входящееСообщениеСсылка = ВходящееСообщение_СсылкаПоHTTPСервисОтвет(ответОЗаписиЗапроса);
		
		Если ЗначениеЗаполнено(входящееСообщениеСсылка) Тогда
			Справочники.обм_ВходящиеСообщения.ПакетыДанных_Извлечь(входящееСообщениеСсылка);
			Справочники.обм_ВходящиеСообщения.ДанныеЗаполнения_Обработать(входящееСообщениеСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ответОЗаписиЗапроса
	
КонецФункции

#КонецОбласти // ВходящиеСообщения_ИнтерфейсДляКлиента

#Область ОбразВОбъект

Функция ОбразВОбъект(пУзелОтправитель, знач пОбразОбъекта, пПриемник = Неопределено, пИмяФункцииВосстановления = Неопределено, пМодульФункцииВосстановления = Неопределено) Экспорт
	
	Если ТипЗнч(пОбразОбъекта) = Тип("Строка") И Не ПустаяСтрока(пОбразОбъекта) Тогда
		пОбразОбъекта = общ.UnJSON(пОбразОбъекта); 
		
	КонецЕсли;
	
	Если Не общ.ЭтоКоллекцияКлючЗначение(пОбразОбъекта) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	стрТипИсточника = Неопределено;
	Если Не Общ.Коллекция_Свойство(пОбразОбъекта, "_Тип", стрТипИсточника) Или ПустаяСтрока(стрТипИсточника) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	типИсточника = Неопределено;
	
	// @TODO 250709 Заяш: Попытка скрывающая исключение. Переработать метод или написать дисклеймер
	Попытка
		типИсточника = Тип(стрТипИсточника);
	Исключение
		обОшибке = общ.Ошибка_ПодробноеПредставление(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ТипЗнч(типИсточника) <> Тип("Тип") Тогда
		Возврат Неопределено;
		
	КонецЕсли;

	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пПриемник);
	приемникСсылка = Неопределено;
	Если объектСсылкаДругое = "Объект" Тогда 
		приемникСсылка = пПриемник.Ссылка;
		
	ИначеЕсли объектСсылкаДругое = "Ссылка" И общ.ЭтоЗаполненнаяСсылка(пПриемник) Тогда
		приемникСсылка = пПриемник;
		
	ИначеЕсли объектСсылкаДругое = "Другое" Тогда
		// ссылку приемника попытаться получить из навигационной ссылки в коллекции
		приемникСсылка = Неопределено;  
		
	КонецЕсли;
		
	Если Общ.ЭтоЗаполненнаяСсылка(приемникСсылка) И общ.Ссылка_Существует(приемникСсылка) Тогда
		пПриемник = приемникСсылка.ПолучитьОбъект();
			
	Иначе
		менеджерПриемника = общ.Менеджер_ПоОбъекту(типИсточника); 

		Если общ.Коллекция_Свойство(пОбразОбъекта, "_ЭтоГруппа") Тогда
			пПриемник = общ.Менеджер_СоздатьОбъект(менеджерПриемника, пОбразОбъекта["_ЭтоГруппа"]);
					
		Иначе
			пПриемник = общ.Менеджер_СоздатьОбъект(менеджерПриемника);
					
		КонецЕсли;
		
		приемникСсылка = общ.Менеджер_БитаяСсылка(менеджерПриемника, приемникСсылка);
				
		пПриемник.УстановитьСсылкуНового(приемникСсылка);

	КонецЕсли;

	объектСсылкаДругое = общ.ОбъектСсылкаДругое(пПриемник); 
	Если объектСсылкаДругое <> "Объект" Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	пПриемник.ОбменДанными.Загрузка = Истина;

	Для Каждого пара Из пОбразОбъекта Цикл 
		
		этоТабличнаяЧасть = пПриемник.Метаданные().ТабличныеЧасти.Найти(пара.Ключ) <> Неопределено; 
		Если этоТабличнаяЧасть Тогда
			приемник_ТЧ = пПриемник[пара.Ключ];
			приемник_ТЧ.Очистить();
			Для Каждого образРядаТЧ Из пара.Значение Цикл
				рядПриемник = приемник_ТЧ.Добавить();
				Для Каждого параОбразаРяда Из образРядаТЧ Цикл
					ВосстановитьРеквизитОбъекта(пУзелОтправитель, рядПриемник, параОбразаРяда.Ключ, параОбразаРяда.Значение, пИмяФункцииВосстановления, пМодульФункцииВосстановления);
					
				КонецЦикла;
				параОбразаРяда = Неопределено;
				
			КонецЦикла;
			образРядаТЧ = Неопределено; 
			
		// Обычный реквизит, не табличная часть
		Иначе
			ВосстановитьРеквизитОбъекта(пУзелОтправитель, пПриемник, пара.Ключ, пара.Значение, пИмяФункцииВосстановления, пМодульФункцииВосстановления);
			
		КонецЕсли; 
		
	КонецЦикла;
	пара = Неопределено;
		
	Возврат пПриемник;

КонецФункции // ОбразВОбъект  

// @TODO 250709 Заяш: Метод использует Попытка-Исключение без выброс исключения
// Подумать, надо его переработать, или дописать дисклеймер, почему так сделано
Процедура ВосстановитьРеквизитОбъекта(пУзел, пОбъект, Знач пКлюч, пОбразЗначения, пИмяФункцииВосстановления = Неопределено, пМодульФункцииВосстановления = Неопределено)

	Если Не общ.ЕстьРеквизитИлиСвойствоОбъекта(пОбъект, пКлюч) Тогда
		Возврат;
		
	КонецЕсли; 
	
	// 1. Сначала попробовать использовать функцию восстановления
	результатВосстановления = Ложь;
	восстановленноеЗначение = Неопределено;
	Если пИмяФункцииВосстановления <> Неопределено И пМодульФункцииВосстановления <> Неопределено Тогда
		Попытка
			Выполнить(
				СтрШаблон(
					"результатВосстановления = пМодульФункцииВосстановления.%1(пУзел, восстановленноеЗначение, пОбразЗначения);",
					пИмяФункцииВосстановления // %1
					)
				);
				
			Если Общ.Проверка_Тип(результатВосстановления, "Булево", Ложь) <> "" Тогда
				результатВосстановления = Ложь;
				
			КонецЕсли;
			
		Исключение
			// Для отладки 
			обОшибке = общ.Ошибка_ПодробноеПредставление(ИнформацияОбОшибке());
			результатВосстановления = Ложь; 
			
		КонецПопытки;	
		
		Если результатВосстановления Тогда 
			пОбъект[пКлюч] = восстановленноеЗначение;
			Возврат;
			
		КонецЕсли; 

	КонецЕсли; // Если пИмяФункцииВосстановления <> Неопределено

	// 2. Восстановление ссылочных данных
	Если общ.Коллекция_ЭтоОбразСсылки(пОбразЗначения) Тогда
		пОбъект[пКлюч] =  общ.Ссылка_ИзКоллекции(пОбразЗначения);
		Возврат;
			
	КонецЕсли;	
	
	// 3. Значения примитивных типов просто присвоить
	Попытка
		типРеквизитаОбъекта = ТипЗнч(пОбъект[пКлюч]);
		Если типРеквизитаОбъекта = Тип("Дата") Тогда
			Если Не ПустаяСтрока(пОбразЗначения) Тогда
				пОбъект[пКлюч] = XMLЗначение(Тип("Дата"), пОбразЗначения);
				
			КонецЕсли;
			
		Иначе	
			пОбъект[пКлюч] = пОбразЗначения;
			
		КонецЕсли; 
		Возврат;
		
	Исключение
		// для отладки
		обОШибке = общ.Ошибка_ПодробноеПредставление(ИнформацияОбОшибке());
		
	КонецПопытки;	

КонецПроцедуры  

#КонецОбласти // ОбразВОбъект

#КонецОбласти // Получение 

#Область Прочее

Функция HTTPСервисЗапрос_ЗарегестрироватьВЖурнале(пИмяСобытия, пHTTPСервисЗапрос) Экспорт

	Если ТипЗнч(пHTTPСервисЗапрос) <> Тип("HTTPСервисЗапрос") Тогда
		Возврат Неопределено; 
		
	КонецЕсли;	
	
	рез = "";

	рез = рез + пHTTPСервисЗапрос.HTTPМетод + Символы.ПС;
	рез = рез + пHTTPСервисЗапрос.БазовыйURL + Символы.ПС;
	рез = рез + пHTTPСервисЗапрос.ОтносительныйURL + Символы.ПС;
	рез = рез + "Заголовки:" + Символы.ПС;
	Для каждого Параметр Из пHTTPСервисЗапрос.Заголовки Цикл
		
		// Данные авторизации не фиксировать
		Если НРег(Параметр.Ключ) = "authorization" Тогда
			Продолжить;
			
		КонецЕсли;
		
		Заг =   СтрЗаменить( Параметр.Значение,";","");
	    рез = рез + Параметр.Ключ + ":" + Заг+ Символы.ПС;
	КонецЦикла;
	рез = рез + "Параметры URL:" + Символы.ПС;
	Для каждого Параметр Из пHTTPСервисЗапрос.ПараметрыURL Цикл
	    рез = рез + Параметр.Ключ + ":" + Параметр.Значение + Символы.ПС;
	КонецЦикла;
	рез = рез + "Параметры запроса:" + Символы.ПС;
	Для каждого Параметр Из пHTTPСервисЗапрос.ПараметрыЗапроса Цикл
	    рез = рез + Параметр.Ключ + ":" + Параметр.Значение + Символы.ПС;
	КонецЦикла;
	
	рез = рез + "BODY:" +пHTTPСервисЗапрос.ПолучитьТелоКакСтроку()+ Символы.ПС; 
	 
	ЗаписьЖурналаРегистрации(пИмяСобытия,,,,рез);

КонецФункции	

Функция ИмяСобытияЖурналаРегистрации(пИмяСобытия = "") Экспорт
	
	результат = "обм";
	
	Если Не ПустаяСтрока(пИмяСобытия) Тогда
		результат = результат + "." + СокрЛП(пИмяСобытия);
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

Функция ТекущийПользователь_Имя() Экспорт
	
	// Если не найдено, возвращать текущего пользователя ИБ
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
КонецФункции

Функция УРИ(пУзел, пКатегория, пИдентификатор) Экспорт
	
	стрУРИ = СтрШаблон("odins_obmen/%1/%2/%3", пУзел, пКатегория, пИдентификатор);
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // ВнешнийИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

Процедура Отправка_ИсходящиеСообщения_Создать() Экспорт
	
	имяСобытия = ИмяСобытияЖурналаРегистрации("Отправка.ИсходящиеСообщения.Создать");
	
	запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
	|	Т.Ссылка КАК Ссылка,
	|	Т.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.обм_Измененные КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ДатаВремя";
	
	Пока Истина Цикл
		выборка = запрос.Выполнить().Выбрать();
		
		Если выборка.Количество() = 0 Тогда
			Прервать;
			
		КонецЕсли;
		
		Пока выборка.Следующий() Цикл
			
			Если Не общ.ЭтоЗаполненнаяСсылка(выборка.Ссылка) Тогда
				Продолжить;
				
			КонецЕсли;
			
			исходящиеСообщения = Справочники.обм_ИсходящиеСообщения.Создать(выборка.Ссылка);
			
			Справочники.обм_ИсходящиеСообщения.ЗарегистрироватьКОтправке(исходящиеСообщения);

			РегистрыСведений.обм_Измененные.УдалитьРегистрацию(выборка.Ссылка, выборка.ВерсияДанных); 

		КонецЦикла;
		Выборка.Сбросить();
		
	КонецЦикла; // Пока Истина
		
КонецПроцедуры 

Функция Отправка_ИсходящиеСообщения_Отправить() Экспорт 
	
	имяСобытия = обм.ИмяСобытияЖурналаРегистрации("Отправка.ИсходящиеСообщения.Отправить");
	
	// Сбросить флаги ошибок прошлой отправки
	РегистрыСведений.обм_КОтправке.СброситьФлагиОшибокОтправки();
	
	Пока Истина Цикл
		
		запрос = Новый Запрос;
		запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	КО.ИсходящееСообщение КАК ИсходящееСообщение,
		|	КО.ОбработчикОтправки КАК ОбработчикОтправки,
		|	КО.Узел КАК Узел
		|ИЗ
		|	РегистрСведений.обм_КОтправке КАК КО
		|ГДЕ
		|	КО.ФлагОшибкиОтправки = ЛОЖЬ";
		
		выборка = запрос.Выполнить().Выбрать();
		
		Если выборка.Количество() = 0 Тогда
			Прервать;
			
		КонецЕсли;
		
		Пока выборка.Следующий() Цикл
			комментарийОшибки = "";
			Попытка
				отправитель = Обработки.обм_ИсходящиеСообщения_СозданиеАдресацияОтправка.Создать();
				отправитель.ИсходящееСообщение_Отправить(выборка.ИсходящееСообщение, выборка.ОбработчикОтправки, выборка.Узел);
				
				естьОшибки = отправитель.ЕстьОшибки();
				
				Если естьОшибки Тогда
					РегистрыСведений.обм_КОтправке.ПоднятьФлагОшибкиОтправки(выборка.ИсходящееСообщение, выборка.ОбработчикОтправки, выборка.Узел)
					
				Иначе
					РегистрыСведений.обм_КОтправке.УдалитьРегистрацию(выборка.ИсходящееСообщение, выборка.ОбработчикОтправки, выборка.Узел);
					
					// В журнале регистрации сделать запись о выгрузке объекта 
					комментарийЖурнала = 
						СтрШаблон(
							"Объект %1 выгружен в 
							|узел: %2
							|обработчиком: %3",
							выборка.ИсходящееСообщение, // %1
							выборка.Узел, // %2
							выборка.ОбработчикОтправки // %3
							);
							
					ЗаписьЖурналаРегистрации(
						имяСобытия,
						УровеньЖурналаРегистрации.Информация,
						, // Объект метаданных
						выборка.Ссылка,
						комментарийЖурнала, // Комментарий
						РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная
						);

				КонецЕсли;
				
			Исключение
				инфоОшибки = ИнформацияОбОшибке();
				комментарийОшибки = общ.Ошибка_ПодробноеПредставление(инфоОшибки);
				ЗаписьЖурналаРегистрации(
					имяСобытия, 
					УровеньЖурналаРегистрации.Ошибка,
					, // Объект метаданных
					выборка.ИсходящееСообщение,
					комментарийОшибки,
					РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					);
					
			КонецПопытки;
			
		КонецЦикла;
		выборка = Неопределено;
		
	КонецЦикла; // Пока Истина

	
КонецФункции

Процедура Получение_ВходящиеСообщения_Обработать() Экспорт 
	
	Получение_ОбработатьОчередь(
		Ложь, // Создавать данные заполнения
		Истина // Обрабатывать даннные заполнения
		);
	
КонецПроцедуры

Процедура Получение_ДанныеЗаполнения_Создать() Экспорт 
	
	Получение_ОбработатьОчередь(
		Истина, // Создавать данные заполнения
		Ложь // Обрабатывать данные заполнения
		);
	
КонецПроцедуры

#КонецОбласти // РегламентныеЗадания

#Область ПодпискиНаСобытия

Процедура ПриЗаписи(пИсточник, пОтказ = Ложь) Экспорт
	
	// В скрипты передаем не сам объект, а ссылку на него
	// Так надо, чтобы в скрипте было невозможно изменить объект или его свойства
	источникСсылка = общ.Ссылка_ПоОбъекту(пИсточник);
	
	Если общ.ОбъектСсылкаДругое(источникСсылка) <> "Ссылка" Тогда
		Возврат;
		
	КонецЕсли;
	
	узелОтправитель = Неопределено;
	этоОбмен = Общ.Коллекция_Свойство(пИсточник.ДополнительныеСвойства, "УзелОтправитель", узелОтправитель);

	// т.к. у пользователя может не быть прав на Справочник.Общ_Обработчики
	УстановитьПривилегированныйРежим(Истина);
	
	необходимаРегистрация = Ложь;
	интерфейс = Обработки.обм_РегистрацияИзмененных_ПереопределяемыйИнтерфейс.Создать();
	реализацииИнтерфейса = общ.Интерфейс_НайтиРеализации(интерфейс);
	Для Каждого обработчик Из реализацииИнтерфейса Цикл
		общ.Интерфейс_УстановитьРеализацию(интерфейс, обработчик);
		
		Если этоОбмен И интерфейс.ОбъектИБ_РегистрироватьПриПоступленииПоОбмену(источникСсылка, узелОтправитель) Тогда
			необходимаРегистрация = Истина;
			
		ИначеЕсли Не этоОбмен И интерфейс.ОбъектИБ_РегистрироватьПриЗаписи(источникСсылка) Тогда
			необходимаРегистрация = Истина;
			
		КонецЕсли;
		
		Если необходимаРегистрация Тогда
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	обработчик = Неопределено;
	
	Если необходимаРегистрация Тогда
		узелОтправитель = Неопределено;
		пИсточник.ДополнительныеСвойства.Свойство("УзелОтправитель", узелОтправитель);
		категория = Неопределено;
		пИсточник.ДополнительныеСвойства.Свойство("Категория", категория);
		идентификатор = Неопределено;
		пИсточник.ДополнительныеСвойства.Свойство("Идентификатор", идентификатор);

		РегистрыСведений.обм_Измененные.Зарегистрировать(источникСсылка, узелОтправитель, категория, идентификатор);
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти // Подписки на события

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ОбразОбъекта_ПодписатьМетаданнымиОбмАльфа(пОбразОбъекта)
	
	обОтправителе = Новый Структура;
	обОтправителе.Вставить("Версия", Метаданные.Версия); 
	обОтправителе.Вставить("Имя", Метаданные.Имя);
	обОтправителе.Вставить("Синоним", Метаданные.Синоним);
	обОтправителе.Вставить("ИмяКомпьютера", ИмяКомпьютера()); 
	обОтправителе.Вставить("ИмяПользователя", ИмяПользователя());
	обОтправителе.Вставить("ИмяИнформационнойБазы", общ.ИнформационнаяБаза_Имя());
	обОтправителе.Вставить("ПолноеИмяПользователя", ПолноеИмяПользователя());
	обОтправителе.Вставить("СтрокаСоединенияИнформационнойБазы", СтрокаСоединенияИнформационнойБазы());
	
	// Текущую дату сеанса не включать в сообщение, потому что она меняется
	// В приемнике изменяется хеш сообщения
	// И приемник считает каждое новое сообщение изменненным
	//обОтправителе.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	обОтправителе.Вставить("ЧасовойПоясСеанса", ЧасовойПоясСеанса());
	обОтправителе.Вставить("ИнформационнойБаза_Идентификатор", общ.ИнформационнойБаза_Идентификатор());
	обОтправителе.Вставить("ЭтоТестоваяБаза", общ_Кэш.ЭтоТестоваяБаза());
	
	си = Новый СистемнаяИнформация;
	обОтправителе.Вставить("ВерсияОС", си.ВерсияОС);
	обОтправителе.Вставить("ВерсияПриложения", си.ВерсияПриложения);

	пОбразОбъекта.Вставить("_метаданныеОтправителя", обОтправителе);
	
КонецФункции	

Функция Образ_ПривестиКСтроке(пОбраз)
	
	// Формирование строки послания
	стрПослание = Неопределено;
	Если ТипЗнч(пОбраз) = Тип("Строка") Тогда
		стрПослание = пОбраз;
		
	ИначеЕсли общ.ЭтоКоллекцияКлючЗначение(пОбраз) Тогда
		стрПослание = общ.Коллекция_ЗаписатьJSONсСортировкой(пОбраз);
		
	Иначе
		стрПослание = Строка(пОбраз);
			
	КонецЕсли;			
	
	Возврат стрПослание; 
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции