#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Регистрирует исходящее сообщение к отправке
// например, если его надо отправить повторно
//
// Параметры:
//  пИсходящиеСообщения	 - СправочникСсылка.обм_ИсходящиеСообщения
//
Процедура ЗарегистрироватьКОтправке(пИсходящиеСообщения) Экспорт
	
	исходящиеСообщения = Новый Массив;
	Если ТипЗнч(пИсходящиеСообщения) = Тип("СправочникСсылка.обм_ИсходящиеСообщения") Тогда
		исходящиеСообщения.Добавить(пИсходящиеСообщения);
		
	ИначеЕсли ТипЗнч(пИсходящиеСообщения) = Тип("Массив") Тогда
		исходящиеСообщения = пИсходящиеСообщения;
		
	КонецЕсли;
	
	общ.Проверка_Тип(исходящиеСообщения, Тип("СправочникСсылка.обм_ИсходящиеСообщения"));
	
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("исходящиеСообщения", исходящиеСообщения);
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИС.Ссылка КАК ИсходящееСообщение,
	|	ИС.ДатаВремя КАК ДатаВремя,
	|	ИС.ОбработчикОтправки КАК ОбработчикОтправки,
	|	ИСП.Узел КАК Узел
	|ИЗ
	|	Справочник.обм_ИсходящиеСообщения КАК ИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.обм_ИсходящиеСообщения.Получатели КАК ИСП
	|		ПО ИС.Ссылка = ИСП.Ссылка
	|			И (ИСП.Узел <> """")
	|			И ИС.УзелОтправительИсточника <> ИСП.Узел
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.общ_Обработчики КАК Обработчики
	|		ПО ИС.ОбработчикОтправки = Обработчики.Ссылка
	|ГДЕ
	|	ИС.Ссылка В(&исходящиеСообщения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИС.ДатаВремя";
	
	выборка = запрос.Выполнить().Выбрать();

	Пока выборка.Следующий() Цикл
		РегистрыСведений.обм_КОтправке.Зарегистрировать(выборка.ИсходящееСообщение, выборка.Узел, выборка.ОбработчикОтправки);
		
	КонецЦикла;
	выборка = Неопределено;
	
КонецПроцедуры

// Конструктор произвольного исходящего сообщения
// Создает исходящее сообщение и регистрирует его к отправке
//
// Параметры:
//  пИсточник			 - произвольный - источник исходящего сообщения;
//  пТекстСообщения		 - строка - текст для отправки получателю;
//  пУзлыПолучатели		 - строка - имена узлов-получателей, разделенных строкой;
//  пОбработчикОтправки	 - СправочникСсылка.общ_Обработчики - кто должен отправить сообщение;
// 
// Возвращаемое значение:
//  СправочникСсылка.обм_ИсходящиеСообщения
//
Функция Создать(пИсточник, пТекстСообщения, пУзлыПолучатели, пОбработчикОтправки) Экспорт
	
	общ.Проверка_Тип(пОбработчикОтправки, Тип("СправочникСсылка.общ_Обработчики"));
	
	НачатьТранзакцию();
	Попытка	
		исходящее = Справочники.обм_ИсходящиеСообщения.СоздатьЭлемент();
		
		исходящее.Источник = общ.Ссылка_ПоОбъекту(пИсточник);
		Если исходящее.Источник = Неопределено Тогда
			исходящее.Источник = СокрЛП(пИсточник);
			
		КонецЕсли;
		
		исходящее.ТекстСообщения = пТекстСообщения;
		
		узлы = СтрРазделить(пУзлыПолучатели, ",", Ложь);
		Для Каждого узел Из узлы Цикл
			исходящее.Получатели.Добавить().Узел = обм.УзелПривести(узел);
			
		КонецЦикла;
		узел = Неопределено;
		
		исходящее.ОбработчикОтправки = пОбработчикОтправки;
		
		исходящее.Записать();
		
		ЗарегистрироватьКОтправке(исходящее);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		имяСобытия = обм.ИмяСобытияЖурналаРегистрации("Отправка.ИсходящиеСообщения.Создать");
		инфоОшибки = ИнформацияОбОшибке();
		ссылкиДанных = Новый Массив;
		ссылкиДанных.Добавить(пИсточник);
		ссылкиДанных.Добавить(Справочники.общ_Обработчики.НайтиСсылку(пОбработчикОтправки));
		общ.Ошибка_ВЖурналРегистрации(имяСобытия, инфоОшибки, ссылкиДанных);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат исходящее.Ссылка;
	
КонецФункции

Функция СоздатьПоСсылкеИсточника(пИсточникСсылка, пУзелОтправительИсточника = Неопределено) Экспорт

	// Попытка для расширенной фиксации ошибок в привязке к нескольким объектам
	НачатьТранзакцию();
	Попытка
		исходящиеСообщения = Новый Массив;
		Если Не общ.ЭтоЗаполненнаяСсылка(пИсточникСсылка) Тогда
			Возврат исходящиеСообщения;
			
		КонецЕсли;
		
		интерфейс = Обработки.обм_ИнтерфейсОбработчиков_ИсходящиеСообщения_СозданиеАдресацияОтправка.Создать();
		реализацииИнтерфейса = общ.Интерфейс_НайтиРеализации(интерфейс);
		
		Если реализацииИнтерфейса.Количество() = 0 Тогда
			Возврат исходящиеСообщения;
			
		КонецЕсли;
	
		Для Каждого обработчик Из реализацииИнтерфейса Цикл
			общ.Интерфейс_УстановитьРеализацию(интерфейс, обработчик);
			исходящие = интерфейс.ИсходящееСообщение_Создать(пИсточникСсылка, пУзелОтправительИсточника);
					
			Если исходящие = Неопределено Тогда
				Продолжить;
						
			КонецЕсли;
					
			Для Каждого исходящееОбъект Из исходящие Цикл
				Если ТипЗнч(исходящееОбъект) <> Тип("СправочникОбъект.обм_ИсходящиеСообщения") Тогда
					Продолжить;
						
				КонецЕсли;
					
				исходящееОбъект.Записать();
				исходящиеСообщения.Добавить(исходящееОбъект.Ссылка);

			КонецЦикла;
			исходящееОбъект = Неопределено;
					
		КонецЦикла;
		обработчик = Неопределено;
		
		Справочники.обм_ИсходящиеСообщения.ЗарегистрироватьКОтправке(исходящиеСообщения);

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		имяСобытия = обм.ИмяСобытияЖурналаРегистрации("Отправка.ИсходящиеСообщения.СоздатьПоСсылкеИсточника");
		инфоОшибки = ИнформацияОбОшибке();
		ссылкиДанных = Новый Массив;
		ссылкиДанных.Добавить(пИсточникСсылка);
		ссылкиДанных.Добавить(Справочники.общ_Обработчики.НайтиСсылку(обработчик));
		общ.Ошибка_ВЖурналРегистрации(имяСобытия, инфоОшибки, ссылкиДанных);
		
		ВызватьИсключение;
		
	КонецПопытки;
		
	Возврат исходящиеСообщения;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли // #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда