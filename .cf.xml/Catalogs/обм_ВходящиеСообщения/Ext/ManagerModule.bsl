#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПакетыДанных_Извлечь(пВходящиеСообщения) Экспорт
	
	входящиеСообщения = ВходящиеСообщения_ПроверитьСортировать(пВходящиеСообщения);
	
	// Обработка пустого массива не имеет смысла
	Если входящиеСообщения.Количество() = 0 Тогда
		Возврат;
		
	КонецЕсли;
	
	// Основной цикл
	извлекатель = Обработки.обм_ИнтерфейсОбработчиков_ВходящиеСообщение_ИзвлечениеПакетовДанных.Создать();
	реализацииИнтерфейса = общ.Интерфейс_НайтиРеализации(извлекатель);
	
	естьОбработчики = реализацииИнтерфейса.Количество() > 0;
	
	Для Каждого входящее Из входящиеСообщения Цикл
		
		// Проверка 
		Если Не общ.ЭтоЗаполненнаяСсылка(входящее, Тип("СправочникСсылка.обм_ВходящиеСообщения")) Тогда 
			Продолжить;

		КонецЕсли;
		
		// Существующие подчиненные объекты входящих запросов пометить на удаление
		// чтобы в процессе обработки не были созданы дубли
		ПометитьНаУдалениеПодчиненныеПакетыДанных(входящее);
		
		примечание = "";
		обработкаВыполнена = Ложь;
		счетчикОшибок = 0;
		счетчикПакетов = 0;

		Если не естьОбработчики Тогда
			примечание = обм_лит.НетОбработчика();
			обработкаВыполнена = ложь;
			
			Перейти ~ПакетыДанных_Извлечь_УстановкаСтатусов;
				
		КонецЕсли; // Если не естьОбработчики
			
		Для Каждого обработчик Из реализацииИнтерфейса Цикл
			общ.Интерфейс_УстановитьРеализацию(извлекатель, обработчик);
			
			примечаниеОбработчика = "";
			
			// Нужно ли обрабатывать это сообщение
			обрабатывается = извлекатель.ВходящееСообщение_Обрабатывается(входящее); // Проверка содержимого запроса
			Если Не обрабатывается Тогда
				Продолжить;
				
			КонецЕсли;
			
			// Создание данных заполнения делать в попытке, чтобы падение переопределяемого обработчика не привело к тому,
			// что не запишуться все данные заполнения, а не только упавшие с ошибкой
			обработчикСсылка = Справочники.общ_Обработчики.НайтиСсылку(обработчик);
			пакетыДанных = Новый Массив;
			Попытка
				// Разобрать входящее сообщение на данные заполнения
				пакетыДанных = извлекатель.ПакетыДанных_Извлечь(входящее, примечаниеОбработчика);
				
			Исключение
				счетчикОшибок = счетчикОшибок + 1;
				инфОбОшибке = ИнформацияОбОшибке();
				Ошибка_ВЖурнал(входящее, инфОбОшибке, обработчикСсылка, "ПакетДанных.Создать");
				ДополнитьПримечание(примечание, "Ошибка создания данных заполнения, см. журнал регистрации");
				обОшибкеКратко = общ.Ошибка_КраткоеПредставление(инфОбОшибке);
				ДополнитьПримечание(примечание, обОшибкеКратко);
				
			КонецПопытки;
			
			обработкаВыполнена = Истина;
			ДополнитьПримечание(примечание, примечаниеОбработчика);
			Если ТипЗнч(пакетыДанных) <> Тип("Массив") Или пакетыДанных.Количество() = 0 Тогда
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого пакетОбъект Из пакетыДанных Цикл
				счетчикПакетов = счетчикПакетов + 1;
				Попытка
					пакетОбъект.Владелец = входящее;
					пакетОбъект.Записать();
					
				Исключение
					счетчикОшибок = счетчикОшибок + 1;
					инфОбОшибке = ИнформацияОбОшибке();
					Ошибка_ВЖурнал(входящее, инфОбОшибке, обработчикСсылка, "ПакетДанных.Записать");
					
					ДополнитьПримечание(примечание, "Ошибка записи данных заполнения, см. журнал регистрации");
					обОшибкеКратко = общ.Ошибка_КраткоеПредставление(инфОбОшибке);
					ДополнитьПримечание(примечание, обОшибкеКратко);
					
				КонецПопытки;
				
			КонецЦикла;
			пакетОбъект = Неопределено;
			
		КонецЦикла;
		обработчик = Неопределено;

		// Установка статуса
		~ПакетыДанных_Извлечь_УстановкаСтатусов:
		статус = 
			?( обработкаВыполнена,
				Перечисления.обм_ВходящиеСообщения_Статусы.ЖдетОбработки,
				Перечисления.обм_ВходящиеСообщения_Статусы.НеОбрабатывается
				)
		;
				
		Если обработкаВыполнена И счетчикПакетов = 0 Тогда
			ДополнитьПримечание(примечание, "Из входящего сообщения не извлечено ни одного пакета данных");
			
		КонецЕсли;
				
		Справочники.обм_ВходящиеСообщения.Статус_Установить(входящее, статус, примечание, счетчикОшибок);

	КонецЦикла;
	входящее = Неопределено;
	
КонецПроцедуры 

Процедура ПакетыДанных_Обработать(пВходящиеСообщения) Экспорт
	
	входящиеСообщения = ВходящиеСообщения_ПроверитьСортировать(пВходящиеСообщения);
	
	Для Каждого входящее Из входящиеСообщения Цикл
		
		Отказ = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("входящее", входящее);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПакетыДанных.Ссылка КАК ПакетДанных
		|ИЗ
		|	Справочник.обм_ПакетыДанных КАК ПакетыДанных
		|ГДЕ
		|	ПакетыДанных.ПометкаУдаления = ЛОЖЬ
		|	И ПакетыДанных.Владелец = &входящее
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПакетыДанных.ДатаВремя УБЫВ";
		
		пакетыДанных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПакетДанных");
		
		Если пакетыДанных.Количество() = 0 Тогда
			// ОбработанСОшибкой, нет объектов для обработки
			примечание = "Нет данных заполнения";
			Справочники.обм_ВходящиеСообщения.Статус_Установить( // ОбработанСОшибкой  
				входящее, 
				Перечисления.обм_ВходящиеСообщения_Статусы.ОбработанСОшибкой,
				примечание 
				);
			Продолжить;
			
		КонецЕсли;
			
		обработчик = Обработки.обм_ПакетыДанных_Обработка.Создать();
		
		ссылкиПриемников = Новый Массив;
		Для Каждого пакетСсылка Из пакетыДанных Цикл
			приемникОбъект = обработчик.ПакетДанных_Обработать(пакетСсылка);
			приемникСсылка = общ.Ссылка_ПоОбъекту(приемникОбъект);
			ссылкиПриемников.Добавить(приемникСсылка);
			
		КонецЦикла;
		пакетСсылка = Неопределено;
			
		статус = 
			?(обработчик.ЕстьОшибки(),
				Перечисления.обм_ВходящиеСообщения_Статусы.ОбработанСОшибкой,
				Перечисления.обм_ВходящиеСообщения_Статусы.Обработан
				);

		Справочники.обм_ВходящиеСообщения.Статус_Установить(
			входящее, 
			статус, 
			обработчик.ПримечаниеОЗагрузке(),
			обработчик.КоличествоОшибок(),
			ссылкиПриемников
			);

	КонецЦикла;
	входящее = Неопределено;
	
КонецПроцедуры

Функция Статус(пВходящееСообщениеСсылка) Экспорт 

	Если 
		Не Общ.ЭтоЗаполненнаяСсылка(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения"))
	Тогда
		Возврат Неопределено;
		
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пВходящееСообщениеСсылка", пВходящееСообщениеСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Т.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.обм_ВходящиеСообщения_Статусы.СрезПоследних(, ВходящееСообщение = &пВходящееСообщениеСсылка) КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Процедура Статус_Установить(пВходящееСообщениеСсылка, пСтатус, 
		пПримечание = Неопределено, пКоличествоОшибок = 0, пПриемники = Неопределено) Экспорт
	
	Если 
			Не Общ.ЭтоЗаполненнаяСсылка(пВходящееСообщениеСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения"))
		Или	Не Общ.ЭтоЗаполненнаяСсылка(пСтатус, Тип("ПеречислениеСсылка.обм_ВходящиеСообщения_Статусы")) 
	Тогда
		Возврат;
		
	КонецЕсли;

	стрПримечание = Неопределено;
	
	Если ТипЗнч(пПримечание) = Тип("Строка") Тогда
		стрПримечание = пПримечание;
		
	ИначеЕсли ТипЗнч(пПримечание) = Тип("Структура") Или ТипЗнч(пПримечание) = Тип("Соответствие") Тогда 
		стрПримечание = "";
		Для Каждого Пара Из пПримечание Цикл
			стрПримечание = стрПримечание + СокрЛП(Пара.Ключ);
			
			стрЗначение = СокрЛП(Пара.Значение);
			
			Если Не ПустаяСтрока(стрЗначение) Тогда
				стрПримечание = стрПримечание + "=" + стрЗначение;
				
			КонецЕсли;
			
			стрПримечание = стрПримечание + "; ";
			
		КонецЦикла;
		Пара = Неопределено;
		
		стрПримечание = СокрЛП(стрПримечание);
		
	ИначеЕсли ТипЗнч(пПримечание) = Тип("Неопределено") Тогда
		стрПримечание = Неопределено;
		
	Иначе
		стрПримечание = Строка(пПримечание);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВходящееСообщение", пВходящееСообщениеСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Т.Статус КАК Статус,
	|	Т.Примечание КАК Примечание,
	|	Т.КоличествоОшибок КАК КоличествоОшибок
	|ИЗ
	|	РегистрСведений.обм_ВходящиеСообщения_Статусы.СрезПоследних(, ВходящееСообщение = &ВходящееСообщение) КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийСтатус = Неопределено;
	ТекущееПримечание = Неопределено;
	ТекущееКоличествоОшибок = 0;
	Если Выборка.Следующий() Тогда
		ТекущийСтатус = Выборка.Статус;
		ТекущееПримечание = Выборка.Примечание;
		ТекущееКоличествоОшибок = Выборка.КоличествоОшибок;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийСтатус) Тогда
		ТекущийСтатус = Неопределено;
		
	КонецЕсли;

	// Если текущий статус совпадает с устанавливаемым, прервать обработку
	Если ТекущийСтатус = пСтатус И ТекущееПримечание = стрПримечание И ТекущееКоличествоОшибок = пКоличествоОшибок Тогда
		Возврат;
		
	КонецЕсли;
	
	// При штатном течении процесса обработки
	// При установке статуса Обработан после статуса ЖдетОбработки
	// Если Примечание не заполнено
	// Взять текущее примечание статуса
	Если 
			пСтатус = Перечисления.обм_ВходящиеСообщения_Статусы.Обработан
		И	ПустаяСтрока(стрПримечание)
		И	ТекущийСтатус = Перечисления.обм_ВходящиеСообщения_Статусы.ЖдетОбработки
	Тогда
		стрПримечание = ТекущееПримечание; 

	// При штатном переходе между статусами добавить новое примечание к старому
	// ЖдетОбработки —> НеОбрабатывается
	// ЖдетОбработки —> Обработан
	// ЖдетОбарботки —> Обработан с ошикой
	ИначеЕсли
			ТекущийСтатус = Перечисления.обм_ВходящиеСообщения_Статусы.ЖдетОбработки
		И	(
					пСтатус = Перечисления.обм_ВходящиеСообщения_Статусы.НеОбрабатывается
				Или	пСтатус = Перечисления.обм_ВходящиеСообщения_Статусы.Обработан
				Или пСтатус = Перечисления.обм_ВходящиеСообщения_Статусы.ОбработанСОшибкой
				)
	Тогда
		стрПримечание = СокрЛП(ТекущееПримечание + Символы.ПС + стрПримечание);
		
	КонецЕсли;
	
	мз = РегистрыСведений.обм_ВходящиеСообщения_Статусы.СоздатьМенеджерЗаписи();
	мз.ВходящееСообщение = пВходящееСообщениеСсылка;
	мз.Статус = пСтатус;
	мз.Примечание = стрПримечание;
	мз.Период = общ.ДатаУниверсальная();
	
	// Для статуса обработан сделать запись о приемнике
	послединйПриемник = Неопределено;
	Если ТипЗнч(пПриемники) = Тип("Массив") И пПриемники.Количество() > 0 Тогда
		индекс = пПриемники.Количество();
		Пока индекс > 0 Цикл
			индекс = индекс - 1;
			послединйПриемник = общ.Ссылка_ПоОбъекту(пПриемники[индекс]);
			Если общ.ЭтоЗаполненнаяСсылка(послединйПриемник) Тогда
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		индекс = Неопределено;
		
	ИначеЕсли общ.ЭтоЗаполненнаяСсылка(пПриемники) Тогда
		послединйПриемник = пПриемники;
		
	КонецЕсли;
	
	// Привести к ссылке
	послединйПриемник = общ.Ссылка_ПоОбъекту(послединйПриемник);
	мз.ПоследнийПриемник = ЗначениеВСтрокуВнутр(послединйПриемник);
	
	мз.Записать();
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейс

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция ВходящиеСообщения_ПроверитьСортировать(пВходящиеСообщения) Экспорт

	входящиеСообщения = Новый Массив;
	Если ТипЗнч(пВходящиеСообщения) = Тип("СправочникСсылка.обм_ВходящиеСообщения") Тогда
		входящиеСообщения.Добавить(пВходящиеСообщения);
		
	ИначеЕсли ТипЗнч(пВходящиеСообщения) = Тип("Массив") Тогда
		Для Каждого ВходящееСообщениеСсылка Из пВходящиеСообщения Цикл
			Если ТипЗнч(ВходящееСообщениеСсылка) = Тип("СправочникСсылка.обм_ВходящиеСообщения") Тогда
				входящиеСообщения.Добавить(ВходящееСообщениеСсылка);
				
			КонецЕсли;
			
		КонецЦикла;
		ВходящееСообщениеСсылка = Неопределено;
				
	КонецЕсли;

	// Входящие запросы нужно обрабатывать в режиме ФИФО
	// Самый поздний запрос обрабатывается первым, потому что там самые свежие данные
	Если входящиеСообщения.Количество() > 1 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("входящиеСообщения", входящиеСообщения);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.обм_ВходящиеСообщения КАК Т
		|ГДЕ
		|	Т.Ссылка В(&входящиеСообщения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ДатаВремя УБЫВ";
		
		входящиеСообщения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
		
	КонецЕсли;

	Возврат входящиеСообщения;
	
КонецФункции

// Возвращает параметры входящего сообщения.
//
// Параметры:
//	пВходящееСсылка - СправочникСсылка.обм_ВходящиеСообщения - Ссылка на входящее сообщение
//	пИменаПараметров - Структура из Произвольный, Строка - 
//				имена требуемых параметров
//				ключи структуры
//				или имена параметров, разделенных запятыми		
//
// Возвращаемое значение:
//	Null, Структура из ОпределяемыйТип.общ_ПримитивныйТип, ОпределяемыйТип.общ_ПримитивныйТип - 
//			Null возвращается, если параметр входящего сообщения отсутствует
//			Структура возвращается, если параметры переданы в виде структуры или
//			в виде строки с разделителем
//			Строка возвращается если в параметр была передана строка
//
Функция Параметры(пВходящееСсылка, пИменаПараметров) Экспорт
	
	ответПоУмолчанию = Null;
	
	параметрыПроверены = общ.ЭтоЗаполненнаяСсылка(пВходящееСсылка, Тип("СправочникСсылка.обм_ВходящиеСообщения"))
		И общ.ЭтоЗаполненнаяКоллекция(пИменаПараметров) Или Не ПустаяСтрока(пИменаПараметров)		;
	Если Не параметрыПроверены Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	именаПараметров = Неопределено;
	Если ТипЗнч(пИменаПараметров) = Тип("Строка") Тогда 
		именаПараметров = общ.Строка_РазделитьСокрЛП(пИменаПараметров, ",");
		
	ИначеЕсли общ.ЭтоКоллекцияКлючЗначение(пИменаПараметров) Тогда
		именаПараметров = Новый Массив;
		Для Каждого пара Из пИменаПараметров Цикл
			именаПараметров.Добавить(пара.Ключ);
			
		КонецЦикла;
		пара = Неопределено;
		
	Иначе
		Возврат ответПоУмолчанию;
		
	КонецЕсли;

	запрос = Новый запрос;
	запрос.УстановитьПараметр("входящееСсылка", пВходящееСсылка);
	запрос.УстановитьПараметр("именаПараметров", именаПараметров);
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	П.Ключ КАК Ключ,
	|	П.Значение КАК Значение
	|ИЗ
	|	Справочник.обм_ВходящиеСообщения.Параметры КАК П
	|ГДЕ
	|	П.Ссылка = &входящееСсылка
	|	И П.Ключ В (&именаПараметров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	П.Значение УБЫВ";
		
	запросРезультат = Запрос.Выполнить();
	Если запросРезультат.Пустой() Тогда
		Возврат ответПоУмолчанию;
		
	КонецЕсли;
	
	выборка = запросРезультат.Выбрать();
	
	результат = ответПоУмолчанию;
	вернутьОдин = ТипЗнч(пИменаПараметров) = Тип("Строка") И именаПараметров.Количество() <= 1;
	Если вернутьОдин И выборка.Следующий() Тогда
		Возврат выборка.Значение;
		
	Иначе
		результат = Новый Структура;
		Пока выборка.Следующий() Цикл
			результат.Вставить(выборка.Ключ, выборка.Значение);
				
		КонецЦикла;
		выборка = Неопределено;
		
	КонецЕсли;
		
	Возврат результат;

КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьПримечание(пПримечание, пДополнение)
	
	пПримечание = СокрЛП(пПримечание + Символы.ПС + пДополнение);
	
КонецПроцедуры

Процедура Ошибка_ВЖурнал(
	пВходящееСообщениеСсылка, 
	пИнфоОшибки, 
	пОбработчикСсылка = Неопределено, 
	пИмяСобытия = ""
	)

	кратко = ""; 
	подробно = "";
	
	Если ТипЗнч(пИнфоОшибки) = Тип("ИнформацияОбОшибке") Тогда
		кратко = общ.Ошибка_КраткоеПредставление(пИнфоОшибки);
		подробно = общ.Ошибка_ПодробноеПредставление(пИнфоОшибки);
		
	ИначеЕсли ТипЗнч(пИнфоОшибки) = Тип("Строка") Тогда
		кратко = СокрЛП(пИнфоОшибки);
		подробно = кратко;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(кратко) Тогда
		Справочники.обм_ВходящиеСообщения.Статус_Установить( // ОбработанСОшибкой
			пВходящееСообщениеСсылка, 
			Перечисления.обм_ВходящиеСообщения_Статусы.ОбработанСОшибкой,
			кратко
			);
			
	КонецЕсли;

	Если ПустаяСтрока(подробно) Тогда
		Возврат;
		
	КонецЕсли;
	
	имяСобытия = обм.ИмяСобытияЖурналаРегистрации(пИмяСобытия);
	ссылкиДанных = Новый Массив;
	ссылкиДанных.Добавить(пВходящееСообщениеСсылка);
	ссылкиДанных.Добавить(пОбработчикСсылка);
	
	общ.Ошибка_ВЖурналРегистрации(имяСобытия, подробно, ссылкиДанных);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеПодчиненныеПакетыДанных(пВходящееСообщение)
	
	Если Не общ.ЭтоЗаполненнаяСсылка(пВходящееСообщение, Тип("СправочникСсылка.обм_ВходящиеСообщения")) Тогда
		Возврат;
		
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		запрос = Новый Запрос;
		запрос.УстановитьПараметр("ВходящееСообщениеСсылка", пВходящееСообщение);
		запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПакетыДанных.Ссылка КАК ПакетДанных
		|ИЗ
		|	Справочник.обм_ПакетыДанных КАК ПакетыДанных
		|ГДЕ
		|	ПакетыДанных.Владелец = &ВходящееСообщениеСсылка
		|	И ПакетыДанных.ПометкаУдаления = ЛОЖЬ";
		
		результатЗапроса = запрос.Выполнить();
		Если результатЗапроса.Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
		блокировка = Новый БлокировкаДанных;
		имяТаблицы = общ.Объект_ИмяТаблицы(Метаданные.Справочники.обм_ПакетыДанных);
		блокЭлемент = блокировка.Добавить(имяТаблицы);
		блокЭлемент.Режим = РежимБлокировкиДанных.Исключительный;
		блокЭлемент.ИсточникДанных = результатЗапроса;
		блокЭлемент.ИспользоватьИзИсточникаДанных("Ссылка", "ПакетДанных");
		блокировка.Заблокировать();
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			пакетДанныхОбъект = выборка.ПакетДанных.ПолучитьОбъект();
			
			Если пакетДанныхОбъект = Неопределено Тогда
				Продолжить;
				
			КонецЕсли;
			
			пакетДанныхОбъект.ПометкаУдаления = Истина;
			пакетДанныхОбъект.Записать();
			пакетДанныхОбъект = Неопределено;
			
		КонецЦикла;
		выборка = Неопределено;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли // #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


