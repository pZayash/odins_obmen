#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// @TODO 250705 Заяш: отрефакторить, наверное удалить
Функция ВыполнитьОбработчик(Знач пОбработчик, Знач пИсточник, пПараметры = Неопределено) Экспорт
	
	ВызватьИсключение "@TODO Удалить метод";
	
КонецФункции

// Выполняет создание экземпляра внешней обработки (отчета)
// Параметры
//  ВнешняяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки
//  БезопасныйРежим - Булево - требуется ли запускать обработку в безопасном режиме
// Возвращаемое значение
//  строка - имя обработки известное системе
//
Функция ОбработчикОбъект(пОбработчикСсылка) Экспорт
	
	//Для Контекстной подсказки 
	Если Ложь Тогда
		пОбработчикСсылка = Справочники.общ_Обработчики.ПустаяСсылка();
		
	КонецЕсли;
	
	общ.Проверка_Тип(пОбработчикСсылка, Тип("СправочникСсылка.общ_Обработчики"));
	
	УстановитьПривилегированныйРежим(Истина);
	
		спрОбработчикОбъект = пОбработчикСсылка.ПолучитьОбъект(); 
		
		двоичныеДанные = спрОбработчикОбъект.ХранилищеОбработчика.Получить();
		
		Если ТипЗнч(двоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
			Возврат Неопределено;
			
		КонецЕсли;
		
		путьКФайлу = ПутьКФайлуОтладки(пОбработчикСсылка);
		Если ПустаяСтрока(путьКФайлу) Тогда
			имяПапки = ?(Отладка_Включена(), Отладка_ПапкаДляОтладкиОбработчиков(), КаталогВременныхФайлов());
			имяФайла = ИмяФайлаОбработчика(пОбработчикСсылка);
			путьКФайлу = имяПапки + "\" + имяФайла;
		
			двоичныеДанные.Записать(путьКФайлу);
			
		КонецЕсли;

		текущийБезопасныйРежим = БезопасныйРежим();
		Если текущийБезопасныйРежим <> Ложь Тогда
			УстановитьОтключениеБезопасногоРежима(Истина);
				
		КонецЕсли;
			
		безЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
		безЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		внешняяОбработка = ВнешниеОбработки.Создать(путьКФайлу, Ложь, безЗащиты);
		
		Если общ.ЕстьРеквизитИлиСвойствоОбъекта(внешняяОбработка, "СправочникСсылка_общ_Обработчики") 
			И ТипЗнч(внешняяОбработка.СправочникСсылка_общ_Обработчики) = Тип("СправочникСсылка.общ_Обработчики")
		Тогда
			внешняяОбработка.СправочникСсылка_общ_Обработчики = пОбработчикСсылка;
			
		Иначе
			текстОшибки = СтрШаблон("У внешней обработки %1 отсутствует реквизит СправочникСсылка_общ_Обработчики", путьКФайлу);
			ВызватьИсключение текстОшибки;
			
		КонецЕсли;
		
		ХранилищеОбщихНастроек.Сохранить(ИмяНастроекСеанса(), Строка(пОбработчикСсылка.УникальныйИдентификатор()), пОбработчикСсылка);

		Если текущийБезопасныйРежим <> БезопасныйРежим() Тогда 
			Если текущийБезопасныйРежим <> Ложь Тогда
				УстановитьОтключениеБезопасногоРежима(Ложь);

			КонецЕсли;
			
		КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат внешняяОбработка;
	
КонецФункции

Функция ОбработчикОдиночка(пОбработчикСсылка, пВерсияДанных = Неопределено) Экспорт
	
	общ.Проверка_Тип(пОбработчикСсылка, Тип("СправочникСсылка.общ_Обработчики"));
	
	путьКФайлуДляОтладки = ПутьКФайлуОтладки(пОбработчикСсылка);
	
	Если Не ПустаяСтрока(путьКФайлуДляОтладки) Или Отладка_Включена() Тогда
		обработчикОбъект = ОбработчикОбъект(пОбработчикСсылка);
		
	Иначе
		версияДанных = пВерсияДанных;
		Если версияДанных = Неопределено Тогда
			версияДанных = пОбработчикСсылка.ВерсияДанных;
			
		КонецЕсли;
		
		обработчикОбъект = общ_Кэш.Одиночка(пОбработчикСсылка, версияДанных);
		
	КонецЕсли;
	
	Возврат обработчикОбъект;

КонецФункции

Функция Отладка_Включена() Экспорт
	
	имяПапки = Отладка_ПапкаДляОтладкиОбработчиков();
	
	Если ПустаяСтрока(имяПапки) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	файл = Новый Файл(имяПапки);
	Если файл.Существует() Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция Отладка_ВключитьВЭтомСеансе(пПутьПапкиДляОтладкиОбработчиков) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить(
		ИмяНастроекСеанса(), ИмяНастройкиПапкиДляОтладкиОбработчиков(), пПутьПапкиДляОтладкиОбработчиков);
		
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецФункции

Функция Отладка_ПапкаДляОтладкиОбработчиков() Экспорт
	
	имяПапки = 
		ХранилищеОбщихНастроек.Загрузить(ИмяНастроекСеанса(), ИмяНастройкиПапкиДляОтладкиОбработчиков());
	
КонецФункции
	
Функция НайтиСсылку(пПараметрПоиска) Экспорт
	
	результат = Неопределено;
	
	Если ТипЗнч(пПараметрПоиска) = Тип("СправочникСсылка.общ_Обработчики") Тогда
		результат = пПараметрПоиска;
		
	ИначеЕсли ТипЗнч(пПараметрПоиска) = Тип("СправочникОбъект.общ_Обработчики") Тогда
		результат = пПараметрПоиска.Ссылка;
		
	ИначеЕсли ТипЗнч(пПараметрПоиска) = Тип("Строка") Тогда
		результат = СсылкаПоИмениФайла(пПараметрПоиска);
		
	ИначеЕсли общ.ЕстьРеквизитИлиСвойствоОбъекта(пПараметрПоиска, "СправочникСсылка_общ_Обработчики") Тогда
		результат = СсылкаПоОбъектуВнешнейОбработки(пПараметрПоиска);
		
	Иначе
		результат = Неопределено;
		
	КонецЕсли;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(результат, Тип("СправочникСсылка.общ_Обработчики")) Тогда
		результат = Неопределено;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ИмяНастройкиПапкиДляОтладкиОбработчиков()
	
	Возврат "общ_Обработчики_ПутьПапкиДляОтладкиОбработчиков";
	
КонецФункции

Функция ИмяНастроекСеанса()
	
	Возврат "Сеанс " + общ.ИдентификаторСеанса();
	
КонецФункции

Функция ИмяФайлаОбработчика(пОбработчик)
	
	общ.Проверка_Тип(пОбработчик, Тип("СправочникСсылка.общ_Обработчики"));
	
	имяФайла = общ.Файл_ИмяДополненноеИдентификатором(пОбработчик.Наименование, пОбработчик.УникальныйИдентификатор(), "epf");
	
	Возврат имяФайла;
	
КонецФункции

Функция СсылкаПоИмениФайла(пИмяФайла)
	
	параметрыФайла = общ.Файл_ПараметрыИмени(пИмяФайла);
	
	Если общ.Строка_ЭтоУникальныйИдентификатор(параметрыФайла.ИД) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	уид = Новый УникальныйИдентификатор(параметрыФайла.ИД);
	
	результат = Справочники.общ_Обработчики.ПолучитьСсылку(уид);
	
	Если Не общ.ЭтоЗаполненнаяСсылка(результат, Тип("СправочникСсылка.общ_Обработчики")) Тогда
		результат = Неопределено;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

Функция СсылкаПоОбъектуВнешнейОбработки(пВнешняяОбработкаОбъект)
	
	Если Не ЭтоВнешняяОбработкаОтчет(пВнешняяОбработкаОбъект) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если общ.ЕстьРеквизитИлиСвойствоОбъекта(пВнешняяОбработкаОбъект, "СправочникСсылка_общ_Обработчики")
		И общ.ЭтоЗаполненнаяСсылка(пВнешняяОбработкаОбъект.СправочникСсылка_общ_Обработчики, Тип("СправочникСсылка.общ_Обработчики"))
		Тогда
		Возврат пВнешняяОбработкаОбъект.СправочникСсылка_общ_Обработчики;
		
	КонецЕсли;
	
	// Далее поиск обработчика по имени файла	
	Если ПустаяСтрока(пВнешняяОбработкаОбъект.ИспользуемоеИмяФайла) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	идОбработчика = общ.Файл_ПараметрыИмени(пВнешняяОбработкаОбъект.ИспользуемоеИмяФайла).ИД;
	
	Если Не общ.Строка_ЭтоУникальныйИдентификатор(идОбработчика) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	спрОбработчикСсылка = ХранилищеОбщихНастроек.Загрузить(ИмяНастроекСеанса(), идОбработчика);
		
	// Если нет ссылки в настройка, попытаться извлечь ссылку из имени файла
	Если Не общ.ЭтоЗаполненнаяСсылка(спрОбработчикСсылка, Тип("СправочникСсылка.общ_Обработчики")) Тогда
		спрОбработчикСсылка = СсылкаПоИмениФайла(пВнешняяОбработкаОбъект.ИспользуемоеИмяФайла);
		
	КонецЕсли;
	
	Если Не общ.ЭтоЗаполненнаяСсылка(спрОбработчикСсылка, Тип("СправочникСсылка.общ_Обработчики")) Тогда
		спрОбработчикСсылка = Неопределено;
		
	КонецЕсли;
	
	Возврат спрОбработчикСсылка;
	
КонецФункции

Функция ЭтоВнешняяОбработкаОтчет(пПараметр)
	
	полноеИмя = пПараметр.Метаданные().ПолноеИмя();
	
	результат = Метаданные.НайтиПоПолномуИмени(полноеИмя) = Неопределено;
	
	Возврат результат;
	
КонецФункции

Функция ПутьКФайлуОтладки(пОбработчикСсылка)
	
	Если ПустаяСтрока(пОбработчикСсылка.ПутьКФайлуДляОтладки) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	файлДляОтладки = Новый Файл(пОбработчикСсылка.ПутьКФайлуДляОтладки);
	Если файлДляОтладки.Существует() Тогда
		Возврат пОбработчикСсылка.ПутьКФайлуДляОтладки;
				
	КонецЕсли;
			
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли // #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда