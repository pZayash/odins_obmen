#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
	
	Процедура Зарегистрировать(пИсточникСсылка, пУзелОтправитель = Неопределено,
			пКатегорияОтправителя = Неопределено, пИдентификаторОтправителя = Неопределено) Экспорт
		
		запись = РегистрыСведений.обм_Измененные.СоздатьМенеджерЗаписи();
		
		запись.Ссылка = пИсточникСсылка;
		запись.ДатаВремя = общ.ДатаУниверсальная();
		запись.ВерсияДанных = пИсточникСсылка.ВерсияДанных;
		запись.УзелОтправитель = обм.УзелПривести(пУзелОтправитель);
		запись.КатегорияОтправителя = пКатегорияОтправителя;
		запись.ИдентификаторОтправителя = пИдентификаторОтправителя;
		
		// Привелигированный режим нужен, чтобы не было проблем с правами 
		// механизм регистрации должен работать надежно
		// Не должен вызывать прерывать работу программы ни в коем случае
		УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
		запись.Записать(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПроцедуры

Процедура КОтправке(пИсточникСсылка, пВерсияДанных, пУзелОтправительИсточника = Неопределено, 
			пУдалитьРегистрацию = Истина) Экспорт
	
	НачатьТранзакцию();
	Попытка
		необходимаОтправка = Ложь;
		интерфейс = Обработки.обм_ИнтерфейсОбработчиков_ОбъектыИБ.Создать();
		реализацииИнтерфейса = общ.Интерфейс_НайтиРеализации(интерфейс);
		Для Каждого обработчик Из реализацииИнтерфейса Цикл
			общ.Интерфейс_УстановитьРеализацию(интерфейс, обработчик);
			
			этоОбмен = Не ПустаяСтрока(пУзелОтправительИсточника);
			Если этоОбмен Тогда 
				необходимаОтправка = 
					интерфейс.ОбъектИБ_ПодлежитОтправкеПослеОбменДаннымиЗагрузка(пИсточникСсылка, пУзелОтправительИсточника);
				
			Иначе
				необходимаОтправка = интерфейс.ОбъектИБ_ПодлежитОтправке(пИсточникСсылка);
				
			КонецЕсли;
						
			Если необходимаОтправка Тогда
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		обработчик = Неопределено;
		
		Если необходимаОтправка Тогда
			Справочники.обм_ИсходящиеСообщения.СоздатьПоСсылкеИсточника(пИсточникСсылка, пУзелОтправительИсточника);
			
		КонецЕсли;

		Если пУдалитьРегистрацию Тогда
			РегистрыСведений.обм_Измененные.УдалитьРегистрацию(пИсточникСсылка, пВерсияДанных);
				
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		РегистрыСведений.обм_Измененные.ПоднятьФлагОшибки(пИсточникСсылка, пУзелОтправительИсточника, пВерсияДанных);
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура ПоднятьФлагОшибки(пИсточник, пУзелОтправительИсточника = Неопределено, пВерсияДанных = Неопределено) Экспорт
	
	источникСсылка = общ.Ссылка_ПоОбъекту(пИсточник);

	Если Не общ.ЭтоЗаполненнаяСсылка(источникСсылка) Тогда
		Возврат;
		
	КонецЕсли;
	
	блокировка = Новый БлокировкаДанных;
	имяТаблицы = общ.Объект_ИмяТаблицы(Метаданные.РегистрыСведений.обм_Измененные);
	блокЭлемент = блокировка.Добавить(имяТаблицы);
	блокЭлемент.Режим = РежимБлокировкиДанных.Исключительный;
	блокЭлемент.УстановитьЗначение("Ссылка", источникСсылка);
	узел = обм.УзелПривести(пУзелОтправительИсточника);
	блокЭлемент.УстановитьЗначение("УзелОтправитель", узел);
	
	НачатьТранзакцию();
	Попытка
		блокировка.Заблокировать();
		
		версияИзменилась = Ложь;
		
		Если Не ПустаяСтрока(пВерсияДанных) Тогда
			запись = РегистрыСведений.обм_Измененные.СоздатьМенеджерЗаписи();
			запись.Ссылка = источникСсылка;
			запись.УзелОтправитель = узел;
			запись.Прочитать();
		
			// Контроль версии данных
			версияИзменилась = запись.Выбран() И запись.ВерсияДанных <> пВерсияДанных;
			
			Если Не версияИзменилась Тогда
				запись.ФлагОшибкиПриОбработке = Истина;
				запись.ВерсияДанных = пВерсияДанных;
				запись.Записать();

			КонецЕсли;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьРегистрацию(пИсточник, пВерсияДанных = Неопределено) Экспорт

	источникСсылка = общ.Ссылка_ПоОбъекту(пИсточник);

	Если Не общ.ЭтоЗаполненнаяСсылка(источникСсылка) Тогда
		Возврат;
		
	КонецЕсли;
	
	блокировка = Новый БлокировкаДанных;
	имяТаблицы = общ.Объект_ИмяТаблицы(Метаданные.РегистрыСведений.обм_Измененные);
	блокЭлемент = блокировка.Добавить(имяТаблицы);
	блокЭлемент.Режим = РежимБлокировкиДанных.Исключительный;
	блокЭлемент.УстановитьЗначение("Ссылка", источникСсылка);
	
	НачатьТранзакцию();
	Попытка
		блокировка.Заблокировать();
		запись = РегистрыСведений.обм_Измененные.СоздатьМенеджерЗаписи();
		запись.Ссылка = источникСсылка;
	
		// Контроль версии данных, если она передана в параметре
		Если Не ПустаяСтрока(пВерсияДанных) Тогда
			запись.Прочитать();
		
			// Удалять только если версия данных не изменилась
			Если запись.Выбран() И запись.ВерсияДанных = пВерсияДанных Тогда
				запись.Удалить();
				
			КонецЕсли;
			
		Иначе // ПустаяСтрока(пВерсияДанных)
			запись.Удалить();
			
		КонецЕсли; 
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОчередьИзмененных() Экспорт

	имяСобытия = обм.ИмяСобытияЖурналаРегистрации("Отправка.ИсходящиеСообщения.Создать");
	
	запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
	|	Т.Ссылка КАК Ссылка,
	|	Т.ВерсияДанных КАК ВерсияДанных,
	|	Т.УзелОтправитель КАК УзелОтправитель
	|ИЗ
	|	РегистрСведений.обм_Измененные КАК Т
	|ГДЕ
	|	Т.ФлагОшибкиПриОбработке = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ДатаВремя";

	Пока Истина Цикл
		// Запрос в цикле, чтобы обрабатывать данные небольшими порциями по ФИФО
		выборка = запрос.Выполнить().Выбрать(); // BSLLS:CreateQueryInCycle-off
		
		Если выборка.Количество() = 0 Тогда
			Прервать;
			
		КонецЕсли;
		
		Пока выборка.Следующий() Цикл
			Попытка
				РегистрыСведений.обм_Измененные.КОтправке(выборка.Ссылка, выборка.ВерсияДанных, выборка.УзелОтправитель, Истина);
				
			Исключение
				// Ошибку записать в журнал, но обработку не прерывать.
				// Сбой на одном элементе не должен останавливать процесс
				имяСобытия = обм.ИмяСобытияЖурналаРегистрации("Отправка.ОбработатьОчередьИзмененных");
				общ.Ошибка_ВЖурналРегистрации(имяСобытия, ИнформацияОбОшибке(), выборка.Ссылка);
				
			КонецПопытки;
			
		КонецЦикла;
		Выборка.Сбросить();
		
	КонецЦикла; // Пока Истина
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#КонецЕсли // Если Сервер и тд.
