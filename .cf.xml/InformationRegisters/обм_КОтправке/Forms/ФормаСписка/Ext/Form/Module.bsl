&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеДиалогом();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослание(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	результат =
		ОтправитьПосланиеНаСервере(
			Элементы.Список.ТекущиеДанные.Узел,
			Элементы.Список.ТекущиеДанные.Категория,
			Элементы.Список.ТекущиеДанные.Идентификатор
			);
			
	Если ТипЗнч(результат) = Тип("ИнформацияОбОшибке") Тогда
		результат = ПодробноеПредставлениеОшибки(результат);
		
	КонецЕсли;
	
	// 20230911 Заяш Добавлены различные способы вывода в зависимости от типа сообщения
	Если Не ЗначениеЗаполнено(результат) Тогда 
		// Ничего не делать
		
	ИначеЕсли ТипЗнч(результат) = Тип("Строка") Тогда
		сообщ = Новый СообщениеПользователю;
		сообщ.Текст = результат;
		сообщ.Сообщить();
		
	Иначе
		ПоказатьЗначение(, результат);
		
	КонецЕсли; 
	
	Элементы.Список.Обновить();
	
КонецПроцедуры  

&НаКлиенте
Процедура ОтправитьПосланиеИУдалитьРегистрацию(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	результат =
		ОтправитьПосланиеНаСервере(
			Элементы.Список.ТекущиеДанные.Узел,
			Элементы.Список.ТекущиеДанные.Категория,
			Элементы.Список.ТекущиеДанные.Идентификатор,
			Истина // Удалить регистрацию
			);
			
	Если ТипЗнч(результат) = Тип("ИнформацияОбОшибке") Тогда
		результат = ПодробноеПредставлениеОшибки(результат);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(результат) Тогда
    	ПоказатьЗначение(, результат);
		
	КонецЕсли; 
	
	Элементы.Список.Обновить();
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ОтправитьПосланиеНаСервере(пУзел, пКатегория, пИдентификатор, пУдалитьрегистрацию = Ложь) 
	
	Если ПустаяСтрока(пУзел) Или ПустаяСтрока(пКатегория) Или ПустаяСтрока(пИдентификатор) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	зпрс = Новый Запрос;
	зпрс.УстановитьПараметр("пУзел", пУзел);
	зпрс.УстановитьПараметр("пКатегория", пКатегория);
	зпрс.УстановитьПараметр("пИдентификатор", пИдентификатор);
	зпрс.Текст = 
	"ВЫБРАТЬ
	|	Т.Послание КАК Послание,
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.обм_КОтправке КАК Т
	|ГДЕ
	|	Т.Узел = &пУзел
	|	И Т.Категория = &пКатегория
	|	И Т.Идентификатор = &пИдентификатор";
	
	вбрк = зпрс.Выполнить().Выбрать();

	результат = Неопределено;
	
	Если вбрк.Следующий() И Не ПустаяСтрока(вбрк.Послание) Тогда
		результат = обм.Послание_Отправить(вбрк.Послание, пУзел, пКатегория, пИдентификатор, вбрк.Ссылка); 
		
		отказ = ТипЗнч(результат) = Тип("ИнформацияОбОшибке");
		
		Если Не отказ и пУдалитьрегистрацию Тогда
			РегистрыСведений.обм_КОтправке.УдалитьРегистрацию(пУзел, пКатегория, пИдентификатор, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

&НаСервере
Процедура УправлениеДиалогом()
	
	Если Элементы.Список.Видимость Тогда
		Элементы.Список.Обновить();
		
	КонецЕсли; 
	
	Если Элементы.ФормаПереключитьРегламентное.Видимость Тогда
		регламентное = Регламентное_Получить();
		
		заголовокКнопки = Неопределено;
		картинкаКнопки = Неопределено;
		Если регламентное.Использование Тогда
			заголовокКнопки = "Задание работает";
			картинкаКнопки = БиблиотекаКартинок.ОформлениеКругЗеленый;
			
		ИначеЕсли Не регламентное.Использование Тогда
			заголовокКнопки = "Задание отключено";
			картинкаКнопки = БиблиотекаКартинок.ОформлениеКругПустой;
			
		КонецЕсли;

		Элементы.ФормаПереключитьРегламентное.Заголовок = заголовокКнопки;
		Элементы.ФормаПереключитьРегламентное.Картинка = картинкаКнопки;
					
	КонецЕсли; 		

КонецПроцедуры

&НаСервере
Процедура ПереключитьРегламентноеНаСервере()
	
	регламентное = Регламентное_Получить();
	
	использование = регламентное.Использование;
	
	регламентное.Использование = Не использование;
	регламентное.Записать();
	
	УправлениеДиалогом();

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРегламентное(Команда)
	
	ПереключитьРегламентноеНаСервере();
	
КонецПроцедуры 

Функция Регламентное_Получить()
	
	Возврат РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.обм_Отправка_Отправка);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОбработчикАдресацииИзмененных(Команда)
	
	ПоказатьЗначение(,ПредопределенноеЗначение("Справочник.общ_Обработчики.обм_Измененные_Адресация"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработчикФормированияСообщения(Команда)
	
	ПоказатьЗначение(,ПредопределенноеЗначение("Справочник.общ_Обработчики.обм_СфомироватьОбразОбъекта"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработчикФормированияСообщенияДляУзла(Команда)
	
	ПоказатьЗначение(,ПредопределенноеЗначение("Справочник.общ_Обработчики.обм_СфомироватьОбразОбъектаДляУзла"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработчикРегистрацииИзмененныхПриЗаписи(Команда)
	
	ПоказатьЗначение(,ПредопределенноеЗначение("Справочник.общ_Обработчики.обм_Измененные_РегистрироватьПриЗаписи"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработчикРегистрацииИзмененныхПриОбмене(Команда)
	
	ПоказатьЗначение(,ПредопределенноеЗначение("Справочник.общ_Обработчики.обм_Измененные_РегистрироватьПриЗаписи"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработчикОтправкиСообщения(Команда)
	
	ПоказатьЗначение(,ПредопределенноеЗначение("Справочник.общ_Обработчики.обм_ОтправитьПослание"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбработчиков(Команда)
	
	ОткрытьФорму("Справочник.общ_Обработчики.ФормаСписка");
	
КонецПроцедуры

