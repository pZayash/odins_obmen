#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// @TODO 250721 Заяш: Убрать лишние методы из программного интерфейса
#Область ПрограммныйИнтерфейс

Процедура Зарегистрировать(пИсходящееСообщение, пУзел, пОбработчикОтправки, пФлагОшибки = Ложь) Экспорт  

	// Проверить заполненность вектора
	Если Не ПроверитьВекторИсходящееУзелОбработчик(пИсходящееСообщение, пУзел, пОбработчикОтправки) Тогда
		Возврат;
		
	КонецЕсли;
	
	блокировка = Новый БлокировкаДанных;
	элементБлок = блокировка.Добавить(общ.Объект_ИмяТаблицы(Метаданные.РегистрыСведений.обм_КОтправке));
	элементБлок.Режим = ?(пФлагОшибки, РежимБлокировкиДанных.Исключительный, РежимБлокировкиДанных.Разделяемый);
	элементБлок.УстановитьЗначение("ИсходящееСообщение", пИсходящееСообщение);
	элементБлок.УстановитьЗначение("ОбработчикОтправки", пОбработчикОтправки);
	элементБлок.УстановитьЗначение("Узел", пУзел);
	
	Попытка
		НачатьТранзакцию();
		блокировка.Заблокировать();
		запись = РегистрыСведений.обм_КОтправке.СоздатьМенеджерЗаписи();
		запись.ИсходящееСообщение = пИсходящееСообщение;
		запись.ОбработчикОтправки = пОбработчикОтправки;
		запись.Узел = пУзел;
		
		запись.Прочитать();
		
		Если Не запись.Выбран() Тогда
			запись.ДатаВремя = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		запись.ФлагОшибкиОтправки = пФлагОшибки;
		
		запись.Записать(Истина); 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура ИсходящееСообщение_Отправить(пИсходящееСообщение, пУзел, пОбработчикОтправки) Экспорт
	
	вызыватьОшибку = Истина
	РегистрыСведений.обм_КОтправке.ПроверитьВекторИсходящееУзелОбработчик(
		пИсходящееСообщение, пУзел, пОбработчикОтправки, вызыватьОшибку);

	имяСобытия = обм.ИмяСобытияЖурналаРегистрации("Отправка.ИсходящееСообщение_Отправить");

	ссылкиПараметров = Новый Массив;
	ссылкиПараметров.Добавить(пИсходящееСообщение);
	ссылкиПараметров.Добавить(пОбработчикОтправки);
	
	НачатьТранзакцию();
	Попытка
		интерфейс = Обработки.обм_ИсходящиеСообщения_СозданиеАдресацияОтправка_ПереопределяемыйИнтерфейс.Создать();
		обработчик = Справочники.общ_Обработчики.ОбработчикОдиночка(пОбработчикОтправки);
		общ.Интерфейс_УстановитьРеализацию(интерфейс, обработчик);
		интерфейс.ИсходящееСообщение_Отправить(пИсходящееСообщение, пУзел);
			
		записьОбОтправке = РегистрыСведений.обм_ОтправленныеСообщения.СоздатьМенеджерЗаписи();
		записьОбОтправке.ИсходящееСообщение = пИсходящееСообщение;
		записьОбОтправке.ОбработчикОтправки = Справочники.общ_Обработчики.НайтиСсылку(обработчик);
		записьОбОтправке.ДатаОтправки = ТекущаяДатаСеанса();
		записьОбОтправке.Записать();
		
		// В журнале регистрации сделать запись о выгрузке объекта 
		комментарийРезультата = 
			СтрШаблон(
				"Объект %1 выгружен в узел: %2
				|обработчиком: %3",
				пИсходящееСообщение, // %1
				пУзел, // %2
				пОбработчикОтправки // %3
				);
				
		общ.ВЖурнал(имяСобытия, комментарийРезультата, , ссылкиПараметров);
		
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		инфоОшибки = ИнформацияОбОшибке();
		комментарийРезультата = общ.Ошибка_ПодробноеПредставление(инфоОшибки);
		общ.Ошибка_ВЖурналРегистрации(имяСобытия, комментарийРезультата, ссылкиПараметров);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПоднятьФлагОшибкиОтправки(пИсходящееСообщение, пУзел, пОбработчикОтправки) Экспорт
	
	Зарегистрировать(пИсходящееСообщение, пУзел, пОбработчикОтправки, Истина);
	
КонецПроцедуры

Процедура СброситьФлагиОшибокОтправки() Экспорт
	
	запрос = Новый Запрос;
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Т.ИсходящееСообщение КАК ИсходящееСообщение,
	|	Т.Узел КАК Узел,
	|	Т.ОбработчикОтправки КАК ОбработчикОтправки
	|ИЗ
	|	РегистрСведений.обм_КОтправке КАК Т
	|ГДЕ
	|	Т.ФлагОшибкиОтправки";
	
	выборка = запрос.Выполнить().Выбрать();
	имяТаблицы = общ.Объект_ИмяТаблицы(Метаданные.РегистрыСведений.обм_КОтправке);
	
	Пока выборка.Следующий() Цикл
		Попытка
			Зарегистрировать(выборка.ИсходящееСообщение, выборка.Узел, выборка.ОбработчикОтправки, Ложь);
			
		Исключение
			// При исключении не прервывать обработку, только записать ошибку в журнал регистрации
			// оставшийся флаг ошибки отправки не серьезная проблема, гораздо хуже если из-за
			// облома процесса остануться висеть все флаги ошибок
			инфоОшибки = ИнформацияОбОшибке();
			комментарийОшибки = общ.Ошибка_ПодробноеПредставление(инфоОшибки);
			ЗаписьЖурналаРегистрации(
				обм.ИмяСобытияЖурналаРегистрации("Отправка.СброситьФлагиОшибокОтправки"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.обм_КОтправке,
				выборка.ИсходящееСообщение,
				комментарийОшибки,
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
				);
				
		КонецПопытки;

	КонецЦикла;
	выборка.Сбросить();
	
КонецПроцедуры

Процедура УдалитьРегистрацию(пИсходящееСообщение, пУзел, пОбработчикОтправки) Экспорт
	
	// Проверить заполненность вектора
	Если Не ПроверитьВекторИсходящееУзелОбработчик(пИсходящееСообщение, пУзел, пОбработчикОтправки) Тогда
		Возврат;
		
	КонецЕсли;
	
	блокировка = Новый БлокировкаДанных;
	элементБлок = блокировка.Добавить(общ.Объект_ИмяТаблицы(Метаданные.РегистрыСведений.обм_КОтправке));
	элементБлок.Режим = РежимБлокировкиДанных.Исключительный;
	элементБлок.УстановитьЗначение("ИсходящееСообщение", пИсходящееСообщение);
	элементБлок.УстановитьЗначение("ОбработчикОтправки", пОбработчикОтправки);
	элементБлок.УстановитьЗначение("Узел", пУзел);
	
	Попытка
		НачатьТранзакцию();
		блокировка.Заблокировать();
		запись = РегистрыСведений.обм_КОтправке.СоздатьМенеджерЗаписи();
		запись.ИсходящееСообщение = пИсходящееСообщение;
		запись.ОбработчикОтправки = пОбработчикОтправки;
		запись.Узел = пУзел;
		
		запись.Прочитать(); 
	
		Если запись.Выбран() Тогда
			запись.Удалить();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция ОбработатьОчередьОтправки() Экспорт 
	
	// Сбросить флаги ошибок прошлой отправки
	РегистрыСведений.обм_КОтправке.СброситьФлагиОшибокОтправки();
	
	Пока Истина Цикл
		
		запрос = Новый Запрос;
		запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	КО.ИсходящееСообщение КАК ИсходящееСообщение,
		|	КО.ОбработчикОтправки КАК ОбработчикОтправки,
		|	КО.Узел КАК Узел
		|ИЗ
		|	РегистрСведений.обм_КОтправке КАК КО
		|ГДЕ
		|	КО.ФлагОшибкиОтправки = ЛОЖЬ";
		
		выборка = запрос.Выполнить().Выбрать();
		
		Если выборка.Количество() = 0 Тогда
			Прервать;
			
		КонецЕсли;
		
		Пока выборка.Следующий() Цикл
			Попытка
				РегистрыСведений.обм_КОтправке.ИсходящееСообщение_Отправить(выборка.ИсходящееСообщение, выборка.ОбработчикОтправки, выборка.Узел);
				РегистрыСведений.обм_КОтправке.УдалитьРегистрацию(выборка.ИсходящееСообщение, выборка.ОбработчикОтправки, выборка.Узел);

			Исключение
				РегистрыСведений.обм_КОтправке.ПоднятьФлагОшибкиОтправки(выборка.ИсходящееСообщение, выборка.ОбработчикОтправки, выборка.Узел);
				
			КонецПопытки;
			
		КонецЦикла;
		выборка = Неопределено;
		
	КонецЦикла; // Пока Истина

КонецФункции

Функция ПроверитьВекторИсходящееУзелОбработчик(пИсходящееСообщение, пУзел, пОбработчикОтправки, пВызватьИсключание = Ложь) Экспорт

	результатыПроверки = Новый Массив;
	
	// Проверить заполненность вектора
	Если Не общ.ЭтоЗаполненнаяСсылка(пИсходящееСообщение, Тип("СправочникСсылка.обм_ИсходящиеСообщения")) Тогда
		результатыПроверки.Добавить("Не заполнено исходящее сообщение;");
		
	КонецЕсли;
	
	Если ПустаяСтрока(пУзел) Тогда
		результатыПроверки.Добавить("Не заполнен узел-получатель;");
		
	КонецЕсли;
	
	Если Не Общ.ЭтоЗаполненнаяСсылка(пОбработчикОтправки, Тип("СправочникСсылка.общ_Обработчики")) Тогда
		результатыПроверки.Добавить("Не заполнен обработчик отправки;");
		
	КонецЕсли;
	
	Если результатыПроверки.Количество() = 0 Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	комментарийПроверки = СтрСоединить(результатыПроверки, Символы.ПС);
	
	Если ПустаяСтрока(комментарийПроверки) Тогда
		Возврат Истина;
		
	ИначеЕсли пВызватьИсключание Тогда
		ВызватьИсключение комментарийПроверки;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#КонецЕсли // #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
