Процедура Зарегистрировать(пУзел, Знач пКатегория = Неопределено, Знач пИдентификатор = Неопределено, пСсылка = Неопределено, пПослание = Неопределено) Экспорт  
	
	// Проверить заполненность полезной нагрузки
	Если Не общ.ЭтоЗаполненнаяСсылка(пСсылка) И ПустаяСтрока(пПослание) Тогда
		Возврат;
		
	КонецЕсли; 
	
	Если пКатегория = Неопределено Тогда
		пКатегория = общ.Ссылка_ИмяТаблицы(пСсылка);
		
	КонецЕсли; 
	
	Если пИдентификатор = Неопределено Тогда
		пИдентификатор = НРег(пСсылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
	// Проверить заполненность вектора
	Если
			ПустаяСтрока(пУзел)
		Или ПустаяСтрока(пКатегория)
		Или ПустаяСтрока(пИдентификатор)
	Тогда
		Возврат;
		
	КонецЕсли;

	запись = РегистрыСведений.обм_КОтправке.СоздатьМенеджерЗаписи();
	
	запись.Узел = пУзел;
	запись.Категория = пКатегория;
	запись.Идентификатор = пИдентификатор;
	
	запись.ДатаВремя = общ_Сервер.ТекущаяДатаНаСервере();
	запись.ВерсияДанных = пСсылка.ВерсияДанных;
	запись.Ссылка = пСсылка;
	запись.Послание = пПослание;
	запись.ФлагОшибки = Ложь;

	запись.Записать(Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьПоУмолчанию(пУзел, пСсылка) Экспорт 
	
	// Проверить заполненность параметров
	Если ПустаяСтрока(пУзел) Или Не общ.ЭтоЗаполненнаяСсылка(пСсылка) Тогда
		Возврат;
		
	КонецЕсли;
	
	стрПослание = обм.Послание_СформироватьПоУмолчанию(пСсылка);
	
	Если ПустаяСтрока(стрПослание) Тогда
		Возврат;
		
	КонецЕсли;
	
	РегистрыСведений.обм_КОтправке.Зарегистрировать(
			пУзел, // Узел
			, // Категория
			,  // Идентификатор
			пСсылка, // Ссылка
			стрПослание  // строка сообщения
			);
			
КонецПроцедуры

Процедура УдалитьРегистрацию(пУзел, пКатегория, пИдентификатор, пВерсияДанных = Неопределено) Экспорт
	
	// Проверить заполненность вектора
	Если
			ПустаяСтрока(пУзел)
		Или ПустаяСтрока(пКатегория)
		Или ПустаяСтрока(пИдентификатор)
	Тогда
		Возврат;
		
	КонецЕсли;
	
	запись = РегистрыСведений.обм_КОтправке.СоздатьМенеджерЗаписи();
	запись.Узел = пУзел;
	запись.Категория = пКатегория;
	запись.Идентификатор = пИдентификатор;
	
	запись.Прочитать(); 
	
	Если запись.Выбран() Тогда
		можноУдалить =  
			?(
				Не пустаяСтрока(пВерсияДанных),
				запись.Ссылка.ВерсияДанных = пВерсияДанных, 
				запись.Ссылка.ВерсияДанных = запись.ВерсияДанных 
				);
		
		Если можноУдалить Тогда
			запись.Удалить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоднятьФлагОшибки(пУзел, пКатегория, пИдентификатор) Экспорт
	
	// Проверить заполненность вектора
	Если
			ПустаяСтрока(пУзел)
		Или ПустаяСтрока(пКатегория)
		Или ПустаяСтрока(пИдентификатор)
	Тогда
		Возврат;
		
	КонецЕсли;
	
	запись = РегистрыСведений.обм_КОтправке.СоздатьМенеджерЗаписи();
	запись.Узел = пУзел;
	запись.Категория = пКатегория;
	запись.Идентификатор = пИдентификатор;
	
	запись.Прочитать();
	
	Если Не запись.Выбран() Тогда
		Возврат;
		
	КонецЕсли;
	
	запись.ФлагОшибки = Истина;
	
	запись.Записать(Истина);
	
КонецПроцедуры

Процедура СброситьВсеФлагиОшибки() Экспорт
	
	запрос = Новый Запрос;
	запрос.Текст =
	"Выбрать Т.* Из РегистрСведений.обм_КОтправке КАК Т ГДЕ Т.ФлагОшибки";
	
	выборка = запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
		
		запись = РегистрыСведений.обм_КОтправке.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(запись, выборка);
		
		запись.ФлагОшибки = Ложь;
		
		запись.Записать(Истина);		
		
	КонецЦикла;
	выборка.Сбросить();
	
КонецПроцедуры