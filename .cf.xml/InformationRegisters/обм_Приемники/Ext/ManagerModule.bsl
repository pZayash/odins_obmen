Процедура Записать(пУзел, пКатегория, пИдентификатор, пПриемник, Знач пОбработчикЗаполненияПриемника = Неопределено, пКомментарий = Неопределено) Экспорт
	
	Если ПустаяСтрока(пУзел) ИЛИ ПустаяСтрока(пКатегория) ИЛИ ПустаяСтрока(пИдентификатор) Тогда
		Возврат;
			
	КонецЕсли;

	приемникСсылка = Неопределено;
	Если общ.ЭтоЗаполненнаяСсылка(пПриемник) Тогда
		приемникСсылка = пПриемник;
		
	КонецЕсли;		
	
	Если приемникСсылка = Неопределено Тогда
		Возврат;
		
	КонецЕсли;

	МЗ = РегистрыСведений.обм_Приемники.СоздатьМенеджерЗаписи();
	МЗ.Узел = пУзел;
	МЗ.Категория = пКатегория;
	МЗ.Идентификатор = пИдентификатор;
	МЗ.Приемник = приемникСсылка;
	Если общ.ЭтоОбработчик(пОбработчикЗаполненияПриемника) Тогда
		МЗ.ОбработчикЗаполненияПриемника = пОбработчикЗаполненияПриемника;
		
	КонецЕсли; 
	МЗ.Комментарий = пКомментарий;

	МЗ.Записать();
	
КонецПроцедуры

Функция НайтиСсылкуПриемника(пУзел, пКатегория, пИдентификатор) Экспорт
	
	Если ПустаяСтрока(пУзел) ИЛИ ПустаяСтрока(пКатегория) ИЛИ ПустаяСтрока(пИдентификатор) Тогда
		Возврат Неопределено;
			
	КонецЕсли;
	
	// По замерам чтение через менеджер записи быстрее примерно на 15%, чем чтение запросом
	// Чтение 10^4 записей из регистра
	// запросом: 129.965 с
	// через менеджер записи: 111.186 с
	
	запись = РегистрыСведений.обм_Приемники.СоздатьМенеджерЗаписи();
	запись.Узел = СокрЛП(пУзел);
	запись.Категория = СокрЛП(пКатегория);
	запись.Идентификатор = СокрЛП(пИдентификатор);
	запись.Прочитать();
	
	Если запись.Выбран() Тогда
		Возврат запись.Приемник;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

// Функция получает ссылку приемника из регистра сведений, 
// Если в регистре сведений нет записи, то будет создана новая запись с "битой" ссылкой
// Функция получает ссылку приемника и регистра сведений, 
// Если в регистре сведений нет записи, то будет создана новая запись с "битой" ссылкой
Функция ПолучитьСсылкуПриемника(пУзел, пКатегория, пИдентификатор, пТипСсылки, пСсылкаКандидат = Неопределено) Экспорт

	Если пТипСсылки = Неопределено Или Не Общ.Тип_ЭтоСсылка(пТипСсылки) Тогда
		Возврат Неопределено;
		
	КонецЕсли;   

	// 0. Искать существующую ссылку приемника, если есть, вернуть ее
	// Также вернуть найденную битую ссылку приемника, если нет ссылки-кандидата
	ссылкаПриемника = НайтиСсылкуПриемника(пУзел, пКатегория, пИдентификатор);
		
	Если 
			общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) И общ.СсылкаСуществует(ссылкаПриемника)
	Тогда  
		Перейти ~ПолучитьСсылкуПриемника_Выход;
			
	КонецЕсли;

	// способ 1. Если в параметре передана заполненная ссылка, использовать ее в качестве ссылки приемника
	// Битая ссылка кандидата тоже подойдет
	Если общ.ЭтоЗаполненнаяСсылка(пСсылкаКандидат, пТипСсылки) Тогда
		ссылкаПриемника = пСсылкаКандидат;
		Перейти ~ПолучитьСсылкуПриемника_Выход;
		
	КонецЕсли;

	// способ 2. Если ссылки приемника не существует, создать "битую" ссылку из пИдентификатор
	этоПеречисление = общ.КорневойТипКонфигурации_Получить(пТипСсылки) = "Перечисление"; 
	Если Не этоПеречисление И Не общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) И общ.Строка_ЭтоУникальныйИдентификатор(пИдентификатор) Тогда
		битаяСсылка = общ.Менеджер_Получить(пТипСсылки).ПолучитьСсылку(Новый УникальныйИдентификатор(пИдентификатор));
		
		// битая ссылка должна быть заполненной и битой, она не должна существовать в базе, чтобы не было коллизий
		Если общ.ЭтоЗаполненнаяСсылка(битаяСсылка) И Не общ.СсылкаСуществует(битаяСсылка) Тогда
			ссылкаПриемника = битаяСсылка;
			Перейти ~ПолучитьСсылкуПриемника_Выход;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	// способ 3. Если ссылка из идентификатора не создана, получить ее методом перебора
	Если Не этоПеречисление И Не общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) Тогда
		ссылкаПриемника = общ.Менеджер_ПолучитьБитуюСсылку(общ.Менеджер_Получить(пТипСсылки)); 
		Перейти ~ПолучитьСсылкуПриемника_Выход;

	КонецЕсли;
	
	~ПолучитьСсылкуПриемника_Выход:

	// Если не удалось получить ссылку способами 1..3, вернуть неопределено 
	Если Не общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) Тогда
		Возврат Неопределено;
		
	КонецЕсли; 

	// Зарезервировать ссылку приемника в регистре обм_Приемники
	Записать(пУзел, пКатегория, пИдентификатор, ссылкаПриемника);

	Возврат ссылкаПриемника;
	
КонецФункции

