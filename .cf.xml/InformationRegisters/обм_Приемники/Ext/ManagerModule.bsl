#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура Записать(пУзел, пКатегория, пИдентификатор, пПриемник, Знач пОбработчикЗагрузкиДанныхЗаполнения = Неопределено, пКомментарий = Неопределено) Экспорт
	
	Если ПустаяСтрока(пУзел) ИЛИ ПустаяСтрока(пКатегория) ИЛИ ПустаяСтрока(пИдентификатор) Тогда
		Возврат;
			
	КонецЕсли;

	приемникСсылка = Неопределено;
	Если общ.ЭтоЗаполненнаяСсылка(пПриемник) Тогда
		приемникСсылка = пПриемник;
		
	КонецЕсли;
	
	Если приемникСсылка = Неопределено Тогда
		Возврат;
		
	КонецЕсли;

	мз = РегистрыСведений.обм_Приемники.СоздатьМенеджерЗаписи();
	мз.Узел = пУзел;
	мз.Категория = пКатегория;
	мз.Идентификатор = пИдентификатор;
	мз.Приемник = приемникСсылка;
	Если общ.ЭтоОбработчик(пОбработчикЗагрузкиДанныхЗаполнения) Тогда
		мз.ОбработчикПакетаДанных = Справочники.общ_Обработчики.НайтиСсылку(пОбработчикЗагрузкиДанныхЗаполнения);
		
	КонецЕсли; 
	мз.Комментарий = пКомментарий;

	мз.Записать();
	
КонецПроцедуры

Функция Приемник_Найти(Знач пУзелИлиПакетДанных, Знач пКатегория = Неопределено, Знач пИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	узел = Неопределено;
	пакетДанных = Неопределено;
	
	Если ТипЗнч(пУзелИлиПакетДанных) = Тип("СправочникСсылка.обм_ПакетыДанных") Тогда
		пакетДанных = пУзелИлиПакетДанных;
		
	Иначе
		узел = Строка(пУзелИлиПакетДанных);
		
	КонецЕсли;
	
	проверитьПараметры = ЗначениеЗаполнено(пакетДанных) 
		Или (Не ПустаяСтрока(Узел) И Не ПустаяСтрока(пКатегория) И Не ПустаяСтрока(пИдентификатор))
		;
	
	Если Не проверитьПараметры Тогда
		Возврат Неопределено;
			
	КонецЕсли;
	
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("пакетДанных", общ.ЕслиПустое(пакетДанных, Неопределено));
	запрос.УстановитьПараметр("идентификатор", общ.ЕслиПустое(пИдентификатор, Неопределено));
	запрос.УстановитьПараметр("категория", общ.ЕслиПустое(пКатегория, Неопределено));
	запрос.УстановитьПараметр("узел", общ.ЕслиПустое(узел, Неопределено));
	запрос.Текст = 
	"ВЫБРАТЬ
	|	Д.Узел КАК Узел,
	|	Д.Категория КАК Категория,
	|	Д.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ уки
	|ИЗ
	|	Справочник.обм_ПакетыДанных КАК Д
	|ГДЕ
	|	Д.Ссылка = &пакетДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&узел,
	|	&категория,
	|	&идентификатор
	|ГДЕ
	|	&узел <> НЕОПРЕДЕЛЕНО
	|	И &категория <> НЕОПРЕДЕЛЕНО
	|	И &идентификатор <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	П.Приемник КАК Приемник
	|ИЗ
	|	РегистрСведений.обм_Приемники КАК П
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ути КАК ути
	|		ПО П.Узел = ути.Узел
	|			И П.Категория = ути.Категория
	|			И П.Идентификатор = ути.Идентификатор";
	
	выборка = запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если выборка.Следующий() Тогда
		Возврат выборка.Приемник;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Функция получает ссылку приемника из регистра сведений, 
// Если в регистре сведений нет записи, то будет создана новая запись с "битой" ссылкой
// Функция получает ссылку приемника и регистра сведений, 
// Если в регистре сведений нет записи, то будет создана новая запись с "битой" ссылкой
Функция Приемник_Ссылка(пУзел, пКатегория, пИдентификатор, пТипСсылки, пСсылкаКандидат = Неопределено) Экспорт

	Если пТипСсылки = Неопределено Или Не Общ.Тип_ЭтоСсылка(пТипСсылки) Тогда
		Возврат Неопределено;
		
	КонецЕсли;

	// 0. Искать существующую ссылку приемника, если есть, вернуть ее
	// Также вернуть найденную битую ссылку приемника, если нет ссылки-кандидата
	ссылкаПриемника = Приемник_Найти(пУзел, пКатегория, пИдентификатор);
		
	Если общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) И общ.Ссылка_Существует(ссылкаПриемника) Тогда
		Перейти ~ПолучитьСсылкуПриемника_Выход;
			
	КонецЕсли;

	// способ 1. Если в параметре передана заполненная ссылка, использовать ее в качестве ссылки приемника
	// Битая ссылка кандидата тоже подойдет
	Если общ.ЭтоЗаполненнаяСсылка(пСсылкаКандидат, пТипСсылки) Тогда
		ссылкаПриемника = пСсылкаКандидат;
		Перейти ~ПолучитьСсылкуПриемника_Выход;
		
	КонецЕсли;

	// способ 2. Если ссылки приемника не существует, создать "битую" ссылку из пИдентификатор
	этоПеречисление = общ.КорневойТипКонфигурации(пТипСсылки) = "Перечисление"; 
	Если Не этоПеречисление И Не общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) И общ.Строка_ЭтоУникальныйИдентификатор(пИдентификатор) Тогда
		битаяСсылка = общ.Менеджер_ПоОбъекту(пТипСсылки).ПолучитьСсылку(Новый УникальныйИдентификатор(пИдентификатор));
		
		// битая ссылка должна быть заполненной и битой, она не должна существовать в базе, чтобы не было коллизий
		Если общ.ЭтоЗаполненнаяСсылка(битаяСсылка) И Не общ.Ссылка_Существует(битаяСсылка) Тогда
			ссылкаПриемника = битаяСсылка;
			Перейти ~ПолучитьСсылкуПриемника_Выход;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// способ 3. Если ссылка из идентификатора не создана, получить ее методом перебора
	Если Не этоПеречисление И Не общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) Тогда
		ссылкаПриемника = общ.Менеджер_БитаяСсылка(общ.Менеджер_ПоОбъекту(пТипСсылки)); 
		Перейти ~ПолучитьСсылкуПриемника_Выход;

	КонецЕсли;
	
	~ПолучитьСсылкуПриемника_Выход:

	// Если не удалось получить ссылку способами 1..3, вернуть неопределено 
	Если Не общ.ЭтоЗаполненнаяСсылка(ссылкаПриемника, пТипСсылки) Тогда
		Возврат Неопределено;
		
	КонецЕсли; 

	// Зарезервировать ссылку приемника в регистре обм_Приемники
	Записать(пУзел, пКатегория, пИдентификатор, ссылкаПриемника);

	Возврат ссылкаПриемника;
	
КонецФункции

#КонецЕсли // #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

